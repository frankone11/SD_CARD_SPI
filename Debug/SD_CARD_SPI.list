
SD_CARD_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081c4  080081c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080081c4  080081c4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081c4  080081c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081c4  080081c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080081cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028b8  20000074  08008240  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000292c  08008240  0002292c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c735  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000235d  00000000  00000000  0002c815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  0002eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091d  00000000  00000000  0002f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184be  00000000  00000000  00030075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107d0  00000000  00000000  00048533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085423  00000000  00000000  00058d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035bc  00000000  00000000  000de128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e16e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08007aa8 	.word	0x08007aa8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08007aa8 	.word	0x08007aa8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_dmul>:
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000162:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016a:	bf1d      	ittte	ne
 800016c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000170:	ea94 0f0c 	teqne	r4, ip
 8000174:	ea95 0f0c 	teqne	r5, ip
 8000178:	f000 f8de 	bleq	8000338 <__aeabi_dmul+0x1dc>
 800017c:	442c      	add	r4, r5
 800017e:	ea81 0603 	eor.w	r6, r1, r3
 8000182:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000186:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800018e:	bf18      	it	ne
 8000190:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800019c:	d038      	beq.n	8000210 <__aeabi_dmul+0xb4>
 800019e:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a2:	f04f 0500 	mov.w	r5, #0
 80001a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b2:	f04f 0600 	mov.w	r6, #0
 80001b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ba:	f09c 0f00 	teq	ip, #0
 80001be:	bf18      	it	ne
 80001c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d0:	d204      	bcs.n	80001dc <__aeabi_dmul+0x80>
 80001d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001d6:	416d      	adcs	r5, r5
 80001d8:	eb46 0606 	adc.w	r6, r6, r6
 80001dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f4:	bf88      	it	hi
 80001f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fa:	d81e      	bhi.n	800023a <__aeabi_dmul+0xde>
 80001fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000200:	bf08      	it	eq
 8000202:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000206:	f150 0000 	adcs.w	r0, r0, #0
 800020a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800020e:	bd70      	pop	{r4, r5, r6, pc}
 8000210:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000214:	ea46 0101 	orr.w	r1, r6, r1
 8000218:	ea40 0002 	orr.w	r0, r0, r2
 800021c:	ea81 0103 	eor.w	r1, r1, r3
 8000220:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000224:	bfc2      	ittt	gt
 8000226:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800022e:	bd70      	popgt	{r4, r5, r6, pc}
 8000230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000234:	f04f 0e00 	mov.w	lr, #0
 8000238:	3c01      	subs	r4, #1
 800023a:	f300 80ab 	bgt.w	8000394 <__aeabi_dmul+0x238>
 800023e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000242:	bfde      	ittt	le
 8000244:	2000      	movle	r0, #0
 8000246:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024a:	bd70      	pople	{r4, r5, r6, pc}
 800024c:	f1c4 0400 	rsb	r4, r4, #0
 8000250:	3c20      	subs	r4, #32
 8000252:	da35      	bge.n	80002c0 <__aeabi_dmul+0x164>
 8000254:	340c      	adds	r4, #12
 8000256:	dc1b      	bgt.n	8000290 <__aeabi_dmul+0x134>
 8000258:	f104 0414 	add.w	r4, r4, #20
 800025c:	f1c4 0520 	rsb	r5, r4, #32
 8000260:	fa00 f305 	lsl.w	r3, r0, r5
 8000264:	fa20 f004 	lsr.w	r0, r0, r4
 8000268:	fa01 f205 	lsl.w	r2, r1, r5
 800026c:	ea40 0002 	orr.w	r0, r0, r2
 8000270:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800027c:	fa21 f604 	lsr.w	r6, r1, r4
 8000280:	eb42 0106 	adc.w	r1, r2, r6
 8000284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000288:	bf08      	it	eq
 800028a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800028e:	bd70      	pop	{r4, r5, r6, pc}
 8000290:	f1c4 040c 	rsb	r4, r4, #12
 8000294:	f1c4 0520 	rsb	r5, r4, #32
 8000298:	fa00 f304 	lsl.w	r3, r0, r4
 800029c:	fa20 f005 	lsr.w	r0, r0, r5
 80002a0:	fa01 f204 	lsl.w	r2, r1, r4
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f205 	lsl.w	r2, r0, r5
 80002c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002cc:	fa20 f304 	lsr.w	r3, r0, r4
 80002d0:	fa01 f205 	lsl.w	r2, r1, r5
 80002d4:	ea43 0302 	orr.w	r3, r3, r2
 80002d8:	fa21 f004 	lsr.w	r0, r1, r4
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	fa21 f204 	lsr.w	r2, r1, r4
 80002e4:	ea20 0002 	bic.w	r0, r0, r2
 80002e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f0:	bf08      	it	eq
 80002f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f094 0f00 	teq	r4, #0
 80002fc:	d10f      	bne.n	800031e <__aeabi_dmul+0x1c2>
 80002fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	eb41 0101 	adc.w	r1, r1, r1
 8000308:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030c:	bf08      	it	eq
 800030e:	3c01      	subeq	r4, #1
 8000310:	d0f7      	beq.n	8000302 <__aeabi_dmul+0x1a6>
 8000312:	ea41 0106 	orr.w	r1, r1, r6
 8000316:	f095 0f00 	teq	r5, #0
 800031a:	bf18      	it	ne
 800031c:	4770      	bxne	lr
 800031e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	eb43 0303 	adc.w	r3, r3, r3
 8000328:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800032c:	bf08      	it	eq
 800032e:	3d01      	subeq	r5, #1
 8000330:	d0f7      	beq.n	8000322 <__aeabi_dmul+0x1c6>
 8000332:	ea43 0306 	orr.w	r3, r3, r6
 8000336:	4770      	bx	lr
 8000338:	ea94 0f0c 	teq	r4, ip
 800033c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000340:	bf18      	it	ne
 8000342:	ea95 0f0c 	teqne	r5, ip
 8000346:	d00c      	beq.n	8000362 <__aeabi_dmul+0x206>
 8000348:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800034c:	bf18      	it	ne
 800034e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000352:	d1d1      	bne.n	80002f8 <__aeabi_dmul+0x19c>
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	f04f 0000 	mov.w	r0, #0
 8000360:	bd70      	pop	{r4, r5, r6, pc}
 8000362:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000366:	bf06      	itte	eq
 8000368:	4610      	moveq	r0, r2
 800036a:	4619      	moveq	r1, r3
 800036c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000370:	d019      	beq.n	80003a6 <__aeabi_dmul+0x24a>
 8000372:	ea94 0f0c 	teq	r4, ip
 8000376:	d102      	bne.n	800037e <__aeabi_dmul+0x222>
 8000378:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800037c:	d113      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 800037e:	ea95 0f0c 	teq	r5, ip
 8000382:	d105      	bne.n	8000390 <__aeabi_dmul+0x234>
 8000384:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000388:	bf1c      	itt	ne
 800038a:	4610      	movne	r0, r2
 800038c:	4619      	movne	r1, r3
 800038e:	d10a      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000398:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
 80003a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003ae:	bd70      	pop	{r4, r5, r6, pc}

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2uiz>:
 8000728:	004a      	lsls	r2, r1, #1
 800072a:	d211      	bcs.n	8000750 <__aeabi_d2uiz+0x28>
 800072c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000730:	d211      	bcs.n	8000756 <__aeabi_d2uiz+0x2e>
 8000732:	d50d      	bpl.n	8000750 <__aeabi_d2uiz+0x28>
 8000734:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000738:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800073c:	d40e      	bmi.n	800075c <__aeabi_d2uiz+0x34>
 800073e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000746:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074a:	fa23 f002 	lsr.w	r0, r3, r2
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075a:	d102      	bne.n	8000762 <__aeabi_d2uiz+0x3a>
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr

08000768 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2101      	movs	r1, #1
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <SELECT+0x14>)
 8000772:	f001 fb29 	bl	8001dc8 <HAL_GPIO_WritePin>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40010c00 	.word	0x40010c00

08000780 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2101      	movs	r1, #1
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <DESELECT+0x14>)
 800078a:	f001 fb1d 	bl	8001dc8 <HAL_GPIO_WritePin>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40010c00 	.word	0x40010c00

08000798 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80007a2:	bf00      	nop
 80007a4:	4808      	ldr	r0, [pc, #32]	; (80007c8 <SPI_TxByte+0x30>)
 80007a6:	f002 faae 	bl	8002d06 <HAL_SPI_GetState>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d1f9      	bne.n	80007a4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80007b0:	1df9      	adds	r1, r7, #7
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	2201      	movs	r2, #1
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <SPI_TxByte+0x30>)
 80007ba:	f001 ffb1 	bl	8002720 <HAL_SPI_Transmit>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000094 	.word	0x20000094

080007cc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80007d2:	23ff      	movs	r3, #255	; 0xff
 80007d4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80007da:	bf00      	nop
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <SPI_RxByte+0x38>)
 80007de:	f002 fa92 	bl	8002d06 <HAL_SPI_GetState>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d1f9      	bne.n	80007dc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80007e8:	1dba      	adds	r2, r7, #6
 80007ea:	1df9      	adds	r1, r7, #7
 80007ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	2301      	movs	r3, #1
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <SPI_RxByte+0x38>)
 80007f6:	f002 f8d6 	bl	80029a6 <HAL_SPI_TransmitReceive>

  return data;
 80007fa:	79bb      	ldrb	r3, [r7, #6]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000094 	.word	0x20000094

08000808 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000810:	f7ff ffdc 	bl	80007cc <SPI_RxByte>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	701a      	strb	r2, [r3, #0]
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <SD_ReadyWait+0x34>)
 800082c:	2232      	movs	r2, #50	; 0x32
 800082e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000830:	f7ff ffcc 	bl	80007cc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000834:	f7ff ffca 	bl	80007cc <SPI_RxByte>
 8000838:	4603      	mov	r3, r0
 800083a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2bff      	cmp	r3, #255	; 0xff
 8000840:	d004      	beq.n	800084c <SD_ReadyWait+0x28>
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SD_ReadyWait+0x34>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1f3      	bne.n	8000834 <SD_ReadyWait+0x10>

  return res;
 800084c:	79fb      	ldrb	r3, [r7, #7]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200025a6 	.word	0x200025a6

0800085c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000862:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000866:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000868:	f7ff ff8a 	bl	8000780 <DESELECT>

  for(int i = 0; i < 10; i++)
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	e005      	b.n	800087e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000872:	20ff      	movs	r0, #255	; 0xff
 8000874:	f7ff ff90 	bl	8000798 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	3301      	adds	r3, #1
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	2b09      	cmp	r3, #9
 8000882:	ddf6      	ble.n	8000872 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000884:	f7ff ff70 	bl	8000768 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800089c:	2395      	movs	r3, #149	; 0x95
 800089e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	e009      	b.n	80008ba <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80008a6:	1d3a      	adds	r2, r7, #4
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff72 	bl	8000798 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3301      	adds	r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b05      	cmp	r3, #5
 80008be:	ddf2      	ble.n	80008a6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80008c0:	e002      	b.n	80008c8 <SD_PowerOn+0x6c>
  {
    Count--;
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80008c8:	f7ff ff80 	bl	80007cc <SPI_RxByte>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d002      	beq.n	80008d8 <SD_PowerOn+0x7c>
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1f4      	bne.n	80008c2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80008d8:	f7ff ff52 	bl	8000780 <DESELECT>
  SPI_TxByte(0XFF);
 80008dc:	20ff      	movs	r0, #255	; 0xff
 80008de:	f7ff ff5b 	bl	8000798 <SPI_TxByte>

  PowerFlag = 1;
 80008e2:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <SD_PowerOn+0x94>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000091 	.word	0x20000091

080008f4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <SD_PowerOff+0x14>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000091 	.word	0x20000091

0800090c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000910:	4b02      	ldr	r3, [pc, #8]	; (800091c <SD_CheckPower+0x10>)
 8000912:	781b      	ldrb	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000091 	.word	0x20000091

08000920 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <SD_RxDataBlock+0x68>)
 800092c:	220a      	movs	r2, #10
 800092e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000930:	f7ff ff4c 	bl	80007cc <SPI_RxByte>
 8000934:	4603      	mov	r3, r0
 8000936:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	2bff      	cmp	r3, #255	; 0xff
 800093c:	d104      	bne.n	8000948 <SD_RxDataBlock+0x28>
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <SD_RxDataBlock+0x68>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f3      	bne.n	8000930 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2bfe      	cmp	r3, #254	; 0xfe
 800094c:	d001      	beq.n	8000952 <SD_RxDataBlock+0x32>
    return FALSE;
 800094e:	2300      	movs	r3, #0
 8000950:	e016      	b.n	8000980 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff55 	bl	8000808 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff4f 	bl	8000808 <SPI_RxBytePtr>
  } while(btr -= 2);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	3b02      	subs	r3, #2
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1ed      	bne.n	8000952 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000976:	f7ff ff29 	bl	80007cc <SPI_RxByte>
  SPI_RxByte();
 800097a:	f7ff ff27 	bl	80007cc <SPI_RxByte>

  return TRUE;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200025a5 	.word	0x200025a5

0800098c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800099c:	f7ff ff42 	bl	8000824 <SD_ReadyWait>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2bff      	cmp	r3, #255	; 0xff
 80009a4:	d001      	beq.n	80009aa <SD_TxDataBlock+0x1e>
    return FALSE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e040      	b.n	8000a2c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fef3 	bl	8000798 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80009b2:	78fb      	ldrb	r3, [r7, #3]
 80009b4:	2bfd      	cmp	r3, #253	; 0xfd
 80009b6:	d031      	beq.n	8000a1c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fee7 	bl	8000798 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fee0 	bl	8000798 <SPI_TxByte>
    } while (--wc);
 80009d8:	7bbb      	ldrb	r3, [r7, #14]
 80009da:	3b01      	subs	r3, #1
 80009dc:	73bb      	strb	r3, [r7, #14]
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1eb      	bne.n	80009bc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80009e4:	f7ff fef2 	bl	80007cc <SPI_RxByte>
    SPI_RxByte();
 80009e8:	f7ff fef0 	bl	80007cc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80009ec:	e00b      	b.n	8000a06 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80009ee:	f7ff feed 	bl	80007cc <SPI_RxByte>
 80009f2:	4603      	mov	r3, r0
 80009f4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	f003 031f 	and.w	r3, r3, #31
 80009fc:	2b05      	cmp	r3, #5
 80009fe:	d006      	beq.n	8000a0e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000a00:	7b7b      	ldrb	r3, [r7, #13]
 8000a02:	3301      	adds	r3, #1
 8000a04:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000a06:	7b7b      	ldrb	r3, [r7, #13]
 8000a08:	2b40      	cmp	r3, #64	; 0x40
 8000a0a:	d9f0      	bls.n	80009ee <SD_TxDataBlock+0x62>
 8000a0c:	e000      	b.n	8000a10 <SD_TxDataBlock+0x84>
        break;
 8000a0e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000a10:	bf00      	nop
 8000a12:	f7ff fedb 	bl	80007cc <SPI_RxByte>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0fa      	beq.n	8000a12 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	f003 031f 	and.w	r3, r3, #31
 8000a22:	2b05      	cmp	r3, #5
 8000a24:	d101      	bne.n	8000a2a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000a40:	f7ff fef0 	bl	8000824 <SD_ReadyWait>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2bff      	cmp	r3, #255	; 0xff
 8000a48:	d001      	beq.n	8000a4e <SD_SendCmd+0x1a>
    return 0xFF;
 8000a4a:	23ff      	movs	r3, #255	; 0xff
 8000a4c:	e040      	b.n	8000ad0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fea1 	bl	8000798 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	0e1b      	lsrs	r3, r3, #24
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe9b 	bl	8000798 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	0c1b      	lsrs	r3, r3, #16
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fe95 	bl	8000798 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe8f 	bl	8000798 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fe8a 	bl	8000798 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b40      	cmp	r3, #64	; 0x40
 8000a8c:	d101      	bne.n	8000a92 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000a8e:	2395      	movs	r3, #149	; 0x95
 8000a90:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b48      	cmp	r3, #72	; 0x48
 8000a96:	d101      	bne.n	8000a9c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000a98:	2387      	movs	r3, #135	; 0x87
 8000a9a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fe7a 	bl	8000798 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b4c      	cmp	r3, #76	; 0x4c
 8000aa8:	d101      	bne.n	8000aae <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000aaa:	f7ff fe8f 	bl	80007cc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000aae:	230a      	movs	r3, #10
 8000ab0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000ab2:	f7ff fe8b 	bl	80007cc <SPI_RxByte>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000aba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	da05      	bge.n	8000ace <SD_SendCmd+0x9a>
 8000ac2:	7bbb      	ldrb	r3, [r7, #14]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1f1      	bne.n	8000ab2 <SD_SendCmd+0x7e>

  return res;
 8000ace:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e0d5      	b.n	8000c98 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000aec:	4b6c      	ldr	r3, [pc, #432]	; (8000ca0 <SD_disk_initialize+0x1c8>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <SD_disk_initialize+0x2a>
    return Stat;
 8000afa:	4b69      	ldr	r3, [pc, #420]	; (8000ca0 <SD_disk_initialize+0x1c8>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	e0ca      	b.n	8000c98 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000b02:	f7ff feab 	bl	800085c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000b06:	f7ff fe2f 	bl	8000768 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2040      	movs	r0, #64	; 0x40
 8000b12:	f7ff ff8f 	bl	8000a34 <SD_SendCmd>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	f040 80a5 	bne.w	8000c68 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000b1e:	4b61      	ldr	r3, [pc, #388]	; (8000ca4 <SD_disk_initialize+0x1cc>)
 8000b20:	2264      	movs	r2, #100	; 0x64
 8000b22:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000b24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000b28:	2048      	movs	r0, #72	; 0x48
 8000b2a:	f7ff ff83 	bl	8000a34 <SD_SendCmd>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d158      	bne.n	8000be6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e00c      	b.n	8000b54 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000b3a:	7bfc      	ldrb	r4, [r7, #15]
 8000b3c:	f7ff fe46 	bl	80007cc <SPI_RxByte>
 8000b40:	4603      	mov	r3, r0
 8000b42:	461a      	mov	r2, r3
 8000b44:	f104 0310 	add.w	r3, r4, #16
 8000b48:	443b      	add	r3, r7
 8000b4a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	3301      	adds	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d9ef      	bls.n	8000b3a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000b5a:	7abb      	ldrb	r3, [r7, #10]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	f040 8083 	bne.w	8000c68 <SD_disk_initialize+0x190>
 8000b62:	7afb      	ldrb	r3, [r7, #11]
 8000b64:	2baa      	cmp	r3, #170	; 0xaa
 8000b66:	d17f      	bne.n	8000c68 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2077      	movs	r0, #119	; 0x77
 8000b6c:	f7ff ff62 	bl	8000a34 <SD_SendCmd>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d807      	bhi.n	8000b86 <SD_disk_initialize+0xae>
 8000b76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b7a:	2069      	movs	r0, #105	; 0x69
 8000b7c:	f7ff ff5a 	bl	8000a34 <SD_SendCmd>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d005      	beq.n	8000b92 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000b86:	4b47      	ldr	r3, [pc, #284]	; (8000ca4 <SD_disk_initialize+0x1cc>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1eb      	bne.n	8000b68 <SD_disk_initialize+0x90>
 8000b90:	e000      	b.n	8000b94 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000b92:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000b94:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <SD_disk_initialize+0x1cc>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d064      	beq.n	8000c68 <SD_disk_initialize+0x190>
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	207a      	movs	r0, #122	; 0x7a
 8000ba2:	f7ff ff47 	bl	8000a34 <SD_SendCmd>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d15d      	bne.n	8000c68 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e00c      	b.n	8000bcc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000bb2:	7bfc      	ldrb	r4, [r7, #15]
 8000bb4:	f7ff fe0a 	bl	80007cc <SPI_RxByte>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f104 0310 	add.w	r3, r4, #16
 8000bc0:	443b      	add	r3, r7
 8000bc2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d9ef      	bls.n	8000bb2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000bd2:	7a3b      	ldrb	r3, [r7, #8]
 8000bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SD_disk_initialize+0x108>
 8000bdc:	2306      	movs	r3, #6
 8000bde:	e000      	b.n	8000be2 <SD_disk_initialize+0x10a>
 8000be0:	2302      	movs	r3, #2
 8000be2:	73bb      	strb	r3, [r7, #14]
 8000be4:	e040      	b.n	8000c68 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000be6:	2100      	movs	r1, #0
 8000be8:	2077      	movs	r0, #119	; 0x77
 8000bea:	f7ff ff23 	bl	8000a34 <SD_SendCmd>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d808      	bhi.n	8000c06 <SD_disk_initialize+0x12e>
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2069      	movs	r0, #105	; 0x69
 8000bf8:	f7ff ff1c 	bl	8000a34 <SD_SendCmd>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d801      	bhi.n	8000c06 <SD_disk_initialize+0x12e>
 8000c02:	2302      	movs	r3, #2
 8000c04:	e000      	b.n	8000c08 <SD_disk_initialize+0x130>
 8000c06:	2301      	movs	r3, #1
 8000c08:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d10e      	bne.n	8000c2e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000c10:	2100      	movs	r1, #0
 8000c12:	2077      	movs	r0, #119	; 0x77
 8000c14:	f7ff ff0e 	bl	8000a34 <SD_SendCmd>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d80e      	bhi.n	8000c3c <SD_disk_initialize+0x164>
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2069      	movs	r0, #105	; 0x69
 8000c22:	f7ff ff07 	bl	8000a34 <SD_SendCmd>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d107      	bne.n	8000c3c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000c2c:	e00d      	b.n	8000c4a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2041      	movs	r0, #65	; 0x41
 8000c32:	f7ff feff 	bl	8000a34 <SD_SendCmd>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d005      	beq.n	8000c48 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SD_disk_initialize+0x1cc>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1e1      	bne.n	8000c0a <SD_disk_initialize+0x132>
 8000c46:	e000      	b.n	8000c4a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000c48:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SD_disk_initialize+0x1cc>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d007      	beq.n	8000c64 <SD_disk_initialize+0x18c>
 8000c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c58:	2050      	movs	r0, #80	; 0x50
 8000c5a:	f7ff feeb 	bl	8000a34 <SD_SendCmd>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000c68:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <SD_disk_initialize+0x1d0>)
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000c6e:	f7ff fd87 	bl	8000780 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000c72:	f7ff fdab 	bl	80007cc <SPI_RxByte>

  if (type)
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d008      	beq.n	8000c8e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <SD_disk_initialize+0x1c8>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f023 0301 	bic.w	r3, r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SD_disk_initialize+0x1c8>)
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e001      	b.n	8000c92 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000c8e:	f7ff fe31 	bl	80008f4 <SD_PowerOff>
  }

  return Stat;
 8000c92:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <SD_disk_initialize+0x1c8>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd90      	pop	{r4, r7, pc}
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	200025a5 	.word	0x200025a5
 8000ca8:	20000090 	.word	0x20000090

08000cac <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e002      	b.n	8000cc6 <SD_disk_status+0x1a>

  return Stat;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <SD_disk_status+0x24>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d102      	bne.n	8000cf0 <SD_disk_read+0x1c>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <SD_disk_read+0x20>
    return RES_PARERR;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	e051      	b.n	8000d98 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <SD_disk_read+0xcc>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e048      	b.n	8000d98 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <SD_disk_read+0xd0>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	025b      	lsls	r3, r3, #9
 8000d16:	607b      	str	r3, [r7, #4]

  SELECT();
 8000d18:	f7ff fd26 	bl	8000768 <SELECT>

  if (count == 1)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d111      	bne.n	8000d46 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	2051      	movs	r0, #81	; 0x51
 8000d26:	f7ff fe85 	bl	8000a34 <SD_SendCmd>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d129      	bne.n	8000d84 <SD_disk_read+0xb0>
 8000d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d34:	68b8      	ldr	r0, [r7, #8]
 8000d36:	f7ff fdf3 	bl	8000920 <SD_RxDataBlock>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d021      	beq.n	8000d84 <SD_disk_read+0xb0>
      count = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	e01e      	b.n	8000d84 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2052      	movs	r0, #82	; 0x52
 8000d4a:	f7ff fe73 	bl	8000a34 <SD_SendCmd>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d117      	bne.n	8000d84 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d58:	68b8      	ldr	r0, [r7, #8]
 8000d5a:	f7ff fde1 	bl	8000920 <SD_RxDataBlock>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00a      	beq.n	8000d7a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d6a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1ed      	bne.n	8000d54 <SD_disk_read+0x80>
 8000d78:	e000      	b.n	8000d7c <SD_disk_read+0xa8>
          break;
 8000d7a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	204c      	movs	r0, #76	; 0x4c
 8000d80:	f7ff fe58 	bl	8000a34 <SD_SendCmd>
    }
  }

  DESELECT();
 8000d84:	f7ff fcfc 	bl	8000780 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000d88:	f7ff fd20 	bl	80007cc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bf14      	ite	ne
 8000d92:	2301      	movne	r3, #1
 8000d94:	2300      	moveq	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000090 	.word	0x20000090

08000da8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	4603      	mov	r3, r0
 8000db6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <SD_disk_write+0x1c>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <SD_disk_write+0x20>
    return RES_PARERR;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	e06b      	b.n	8000ea0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <SD_disk_write+0x100>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e062      	b.n	8000ea0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000dda:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <SD_disk_write+0x100>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SD_disk_write+0x44>
    return RES_WRPRT;
 8000de8:	2302      	movs	r3, #2
 8000dea:	e059      	b.n	8000ea0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <SD_disk_write+0x104>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	025b      	lsls	r3, r3, #9
 8000dfc:	607b      	str	r3, [r7, #4]

  SELECT();
 8000dfe:	f7ff fcb3 	bl	8000768 <SELECT>

  if (count == 1)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d110      	bne.n	8000e2a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	2058      	movs	r0, #88	; 0x58
 8000e0c:	f7ff fe12 	bl	8000a34 <SD_SendCmd>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d13a      	bne.n	8000e8c <SD_disk_write+0xe4>
 8000e16:	21fe      	movs	r1, #254	; 0xfe
 8000e18:	68b8      	ldr	r0, [r7, #8]
 8000e1a:	f7ff fdb7 	bl	800098c <SD_TxDataBlock>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d033      	beq.n	8000e8c <SD_disk_write+0xe4>
      count = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	e030      	b.n	8000e8c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <SD_disk_write+0x104>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000e36:	2100      	movs	r1, #0
 8000e38:	2077      	movs	r0, #119	; 0x77
 8000e3a:	f7ff fdfb 	bl	8000a34 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000e3e:	6839      	ldr	r1, [r7, #0]
 8000e40:	2057      	movs	r0, #87	; 0x57
 8000e42:	f7ff fdf7 	bl	8000a34 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	2059      	movs	r0, #89	; 0x59
 8000e4a:	f7ff fdf3 	bl	8000a34 <SD_SendCmd>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d11b      	bne.n	8000e8c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000e54:	21fc      	movs	r1, #252	; 0xfc
 8000e56:	68b8      	ldr	r0, [r7, #8]
 8000e58:	f7ff fd98 	bl	800098c <SD_TxDataBlock>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00a      	beq.n	8000e78 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e68:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1ee      	bne.n	8000e54 <SD_disk_write+0xac>
 8000e76:	e000      	b.n	8000e7a <SD_disk_write+0xd2>
          break;
 8000e78:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000e7a:	21fd      	movs	r1, #253	; 0xfd
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fd85 	bl	800098c <SD_TxDataBlock>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <SD_disk_write+0xe4>
      {
        count = 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000e8c:	f7ff fc78 	bl	8000780 <DESELECT>
  SPI_RxByte();
 8000e90:	f7ff fc9c 	bl	80007cc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf14      	ite	ne
 8000e9a:	2301      	movne	r3, #1
 8000e9c:	2300      	moveq	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000090 	.word	0x20000090

08000eb0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	603a      	str	r2, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	e11b      	b.n	8001106 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	d129      	bne.n	8000f2e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d017      	beq.n	8000f12 <SD_disk_ioctl+0x62>
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	dc1f      	bgt.n	8000f26 <SD_disk_ioctl+0x76>
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <SD_disk_ioctl+0x40>
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d00b      	beq.n	8000f06 <SD_disk_ioctl+0x56>
 8000eee:	e01a      	b.n	8000f26 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000ef0:	f7ff fd0c 	bl	800090c <SD_CheckPower>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000efa:	f7ff fcfb 	bl	80008f4 <SD_PowerOff>
      res = RES_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f04:	e0fd      	b.n	8001102 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000f06:	f7ff fca9 	bl	800085c <SD_PowerOn>
      res = RES_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f10:	e0f7      	b.n	8001102 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	1c5c      	adds	r4, r3, #1
 8000f16:	f7ff fcf9 	bl	800090c <SD_CheckPower>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f24:	e0ed      	b.n	8001102 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000f26:	2304      	movs	r3, #4
 8000f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f2c:	e0e9      	b.n	8001102 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000f2e:	4b78      	ldr	r3, [pc, #480]	; (8001110 <SD_disk_ioctl+0x260>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e0e2      	b.n	8001106 <SD_disk_ioctl+0x256>

    SELECT();
 8000f40:	f7ff fc12 	bl	8000768 <SELECT>

    switch (ctrl)
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	2b0d      	cmp	r3, #13
 8000f48:	f200 80cc 	bhi.w	80010e4 <SD_disk_ioctl+0x234>
 8000f4c:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <SD_disk_ioctl+0xa4>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	0800104f 	.word	0x0800104f
 8000f58:	08000f8d 	.word	0x08000f8d
 8000f5c:	0800103f 	.word	0x0800103f
 8000f60:	080010e5 	.word	0x080010e5
 8000f64:	080010e5 	.word	0x080010e5
 8000f68:	080010e5 	.word	0x080010e5
 8000f6c:	080010e5 	.word	0x080010e5
 8000f70:	080010e5 	.word	0x080010e5
 8000f74:	080010e5 	.word	0x080010e5
 8000f78:	080010e5 	.word	0x080010e5
 8000f7c:	080010e5 	.word	0x080010e5
 8000f80:	08001061 	.word	0x08001061
 8000f84:	08001085 	.word	0x08001085
 8000f88:	080010a9 	.word	0x080010a9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2049      	movs	r0, #73	; 0x49
 8000f90:	f7ff fd50 	bl	8000a34 <SD_SendCmd>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f040 80a8 	bne.w	80010ec <SD_disk_ioctl+0x23c>
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fcbc 	bl	8000920 <SD_RxDataBlock>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 809e 	beq.w	80010ec <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000fb0:	7b3b      	ldrb	r3, [r7, #12]
 8000fb2:	099b      	lsrs	r3, r3, #6
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d10e      	bne.n	8000fd8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000fba:	7d7b      	ldrb	r3, [r7, #21]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	7d3b      	ldrb	r3, [r7, #20]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000fce:	8bfb      	ldrh	r3, [r7, #30]
 8000fd0:	029a      	lsls	r2, r3, #10
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e02e      	b.n	8001036 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000fd8:	7c7b      	ldrb	r3, [r7, #17]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	7dbb      	ldrb	r3, [r7, #22]
 8000fe2:	09db      	lsrs	r3, r3, #7
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	7d7b      	ldrb	r3, [r7, #21]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f003 0306 	and.w	r3, r3, #6
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001000:	7d3b      	ldrb	r3, [r7, #20]
 8001002:	099b      	lsrs	r3, r3, #6
 8001004:	b2db      	uxtb	r3, r3
 8001006:	b29a      	uxth	r2, r3
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	b29b      	uxth	r3, r3
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	b29b      	uxth	r3, r3
 8001010:	4413      	add	r3, r2
 8001012:	b29a      	uxth	r2, r3
 8001014:	7cbb      	ldrb	r3, [r7, #18]
 8001016:	029b      	lsls	r3, r3, #10
 8001018:	b29b      	uxth	r3, r3
 800101a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800101e:	b29b      	uxth	r3, r3
 8001020:	4413      	add	r3, r2
 8001022:	b29b      	uxth	r3, r3
 8001024:	3301      	adds	r3, #1
 8001026:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001028:	8bfa      	ldrh	r2, [r7, #30]
 800102a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800102e:	3b09      	subs	r3, #9
 8001030:	409a      	lsls	r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800103c:	e056      	b.n	80010ec <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800104c:	e055      	b.n	80010fa <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800104e:	f7ff fbe9 	bl	8000824 <SD_ReadyWait>
 8001052:	4603      	mov	r3, r0
 8001054:	2bff      	cmp	r3, #255	; 0xff
 8001056:	d14b      	bne.n	80010f0 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800105e:	e047      	b.n	80010f0 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001060:	2100      	movs	r1, #0
 8001062:	2049      	movs	r0, #73	; 0x49
 8001064:	f7ff fce6 	bl	8000a34 <SD_SendCmd>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d142      	bne.n	80010f4 <SD_disk_ioctl+0x244>
 800106e:	2110      	movs	r1, #16
 8001070:	6a38      	ldr	r0, [r7, #32]
 8001072:	f7ff fc55 	bl	8000920 <SD_RxDataBlock>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d03b      	beq.n	80010f4 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001082:	e037      	b.n	80010f4 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001084:	2100      	movs	r1, #0
 8001086:	204a      	movs	r0, #74	; 0x4a
 8001088:	f7ff fcd4 	bl	8000a34 <SD_SendCmd>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d132      	bne.n	80010f8 <SD_disk_ioctl+0x248>
 8001092:	2110      	movs	r1, #16
 8001094:	6a38      	ldr	r0, [r7, #32]
 8001096:	f7ff fc43 	bl	8000920 <SD_RxDataBlock>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d02b      	beq.n	80010f8 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010a6:	e027      	b.n	80010f8 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80010a8:	2100      	movs	r1, #0
 80010aa:	207a      	movs	r0, #122	; 0x7a
 80010ac:	f7ff fcc2 	bl	8000a34 <SD_SendCmd>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d116      	bne.n	80010e4 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010bc:	e00b      	b.n	80010d6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80010be:	6a3c      	ldr	r4, [r7, #32]
 80010c0:	1c63      	adds	r3, r4, #1
 80010c2:	623b      	str	r3, [r7, #32]
 80010c4:	f7ff fb82 	bl	80007cc <SPI_RxByte>
 80010c8:	4603      	mov	r3, r0
 80010ca:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80010cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d0:	3301      	adds	r3, #1
 80010d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d9ef      	bls.n	80010be <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80010e4:	2304      	movs	r3, #4
 80010e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010ea:	e006      	b.n	80010fa <SD_disk_ioctl+0x24a>
      break;
 80010ec:	bf00      	nop
 80010ee:	e004      	b.n	80010fa <SD_disk_ioctl+0x24a>
      break;
 80010f0:	bf00      	nop
 80010f2:	e002      	b.n	80010fa <SD_disk_ioctl+0x24a>
      break;
 80010f4:	bf00      	nop
 80010f6:	e000      	b.n	80010fa <SD_disk_ioctl+0x24a>
      break;
 80010f8:	bf00      	nop
    }

    DESELECT();
 80010fa:	f7ff fb41 	bl	8000780 <DESELECT>
    SPI_RxByte();
 80010fe:	f7ff fb65 	bl	80007cc <SPI_RxByte>
  }

  return res;
 8001102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001106:	4618      	mov	r0, r3
 8001108:	372c      	adds	r7, #44	; 0x2c
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000

08001114 <send_uart>:
DWORD free_clust;
uint32_t total, free_space;

/* to send data to the uart */
void send_uart (char *string)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff f815 	bl	800014c <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *)string, len, 2000);
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	b29a      	uxth	r2, r3
 800112a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <send_uart+0x2c>)
 8001132:	f001 feeb 	bl	8002f0c <HAL_UART_Transmit>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000ec 	.word	0x200000ec

08001144 <buf_clear>:
	while(*buf++) i++;
	return i;
}

void buf_clear(void) //clear the buffer
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1024; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	e007      	b.n	8001160 <buf_clear+0x1c>
		buffer[i] = 0;
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <buf_clear+0x30>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1024; i++)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001166:	dbf3      	blt.n	8001150 <buf_clear+0xc>
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	20002194 	.word	0x20002194

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f000 fb5a 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f8da 	bl	8001338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f000 f97e 	bl	8001484 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001188:	f000 f91c 	bl	80013c4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800118c:	f000 f950 	bl	8001430 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001190:	f002 f83c 	bl	800320c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  fresult = f_mount(&fs, "", 0);
 8001194:	2200      	movs	r2, #0
 8001196:	4955      	ldr	r1, [pc, #340]	; (80012ec <main+0x174>)
 8001198:	4855      	ldr	r0, [pc, #340]	; (80012f0 <main+0x178>)
 800119a:	f004 fd07 	bl	8005bac <f_mount>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b54      	ldr	r3, [pc, #336]	; (80012f4 <main+0x17c>)
 80011a4:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK) send_uart("Error mounting SD CARD...\n");
 80011a6:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <main+0x17c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <main+0x3e>
 80011ae:	4852      	ldr	r0, [pc, #328]	; (80012f8 <main+0x180>)
 80011b0:	f7ff ffb0 	bl	8001114 <send_uart>
 80011b4:	e002      	b.n	80011bc <main+0x44>
  else send_uart("SD_ CARD mounted successfully...\n");
 80011b6:	4851      	ldr	r0, [pc, #324]	; (80012fc <main+0x184>)
 80011b8:	f7ff ffac 	bl	8001114 <send_uart>

  /* Check free space */
  	f_getfree("", &free_clust, &pfs);
 80011bc:	4a50      	ldr	r2, [pc, #320]	; (8001300 <main+0x188>)
 80011be:	4951      	ldr	r1, [pc, #324]	; (8001304 <main+0x18c>)
 80011c0:	484a      	ldr	r0, [pc, #296]	; (80012ec <main+0x174>)
 80011c2:	f005 fd6f 	bl	8006ca4 <f_getfree>

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80011c6:	4b4e      	ldr	r3, [pc, #312]	; (8001300 <main+0x188>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	3b02      	subs	r3, #2
 80011d2:	4a4b      	ldr	r2, [pc, #300]	; (8001300 <main+0x188>)
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011da:	7892      	ldrb	r2, [r2, #2]
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fa27 	bl	8000634 <__aeabi_ui2d>
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <main+0x190>)
 80011ec:	f7fe ffb6 	bl	800015c <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fa96 	bl	8000728 <__aeabi_d2uiz>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a43      	ldr	r2, [pc, #268]	; (800130c <main+0x194>)
 8001200:	6013      	str	r3, [r2, #0]
  	sprintf(buffer, "SD CARD Total size: \t%lu\n", total);
 8001202:	4b42      	ldr	r3, [pc, #264]	; (800130c <main+0x194>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	4941      	ldr	r1, [pc, #260]	; (8001310 <main+0x198>)
 800120a:	4842      	ldr	r0, [pc, #264]	; (8001314 <main+0x19c>)
 800120c:	f005 ff9a 	bl	8007144 <siprintf>
  	send_uart(buffer);
 8001210:	4840      	ldr	r0, [pc, #256]	; (8001314 <main+0x19c>)
 8001212:	f7ff ff7f 	bl	8001114 <send_uart>
  	buf_clear();
 8001216:	f7ff ff95 	bl	8001144 <buf_clear>

  	free_space = (uint32_t)(free_clust * pfs->csize * 0.5);
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <main+0x188>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001222:	789b      	ldrb	r3, [r3, #2]
 8001224:	461a      	mov	r2, r3
 8001226:	4b37      	ldr	r3, [pc, #220]	; (8001304 <main+0x18c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	fb02 f303 	mul.w	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fa00 	bl	8000634 <__aeabi_ui2d>
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b33      	ldr	r3, [pc, #204]	; (8001308 <main+0x190>)
 800123a:	f7fe ff8f 	bl	800015c <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f7ff fa6f 	bl	8000728 <__aeabi_d2uiz>
 800124a:	4603      	mov	r3, r0
 800124c:	4a32      	ldr	r2, [pc, #200]	; (8001318 <main+0x1a0>)
 800124e:	6013      	str	r3, [r2, #0]
  	sprintf(buffer, "SD CARD Free Space: \t%lu\n", free_space);
 8001250:	4b31      	ldr	r3, [pc, #196]	; (8001318 <main+0x1a0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4931      	ldr	r1, [pc, #196]	; (800131c <main+0x1a4>)
 8001258:	482e      	ldr	r0, [pc, #184]	; (8001314 <main+0x19c>)
 800125a:	f005 ff73 	bl	8007144 <siprintf>
	send_uart(buffer);
 800125e:	482d      	ldr	r0, [pc, #180]	; (8001314 <main+0x19c>)
 8001260:	f7ff ff58 	bl	8001114 <send_uart>
	buf_clear();
 8001264:	f7ff ff6e 	bl	8001144 <buf_clear>

	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001268:	2213      	movs	r2, #19
 800126a:	492d      	ldr	r1, [pc, #180]	; (8001320 <main+0x1a8>)
 800126c:	482d      	ldr	r0, [pc, #180]	; (8001324 <main+0x1ac>)
 800126e:	f004 fce7 	bl	8005c40 <f_open>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <main+0x17c>)
 8001278:	701a      	strb	r2, [r3, #0]

	if(fresult != FR_OK)
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <main+0x17c>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <main+0x112>
		send_uart("ERR W\n");
 8001282:	4829      	ldr	r0, [pc, #164]	; (8001328 <main+0x1b0>)
 8001284:	f7ff ff46 	bl	8001114 <send_uart>
 8001288:	e00d      	b.n	80012a6 <main+0x12e>
	else
	{

	/* Writing text */
	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 800128a:	4926      	ldr	r1, [pc, #152]	; (8001324 <main+0x1ac>)
 800128c:	4827      	ldr	r0, [pc, #156]	; (800132c <main+0x1b4>)
 800128e:	f005 fe5d 	bl	8006f4c <f_puts>

	/* Close file */
	fresult = f_close(&fil);
 8001292:	4824      	ldr	r0, [pc, #144]	; (8001324 <main+0x1ac>)
 8001294:	f005 fcdb 	bl	8006c4e <f_close>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <main+0x17c>)
 800129e:	701a      	strb	r2, [r3, #0]

	send_uart("File1.txt created and the data is written.\n");
 80012a0:	4823      	ldr	r0, [pc, #140]	; (8001330 <main+0x1b8>)
 80012a2:	f7ff ff37 	bl	8001114 <send_uart>
	}

	/* Open the file to read */

	fresult = f_open(&fil, "file1.txt", FA_READ);
 80012a6:	2201      	movs	r2, #1
 80012a8:	491d      	ldr	r1, [pc, #116]	; (8001320 <main+0x1a8>)
 80012aa:	481e      	ldr	r0, [pc, #120]	; (8001324 <main+0x1ac>)
 80012ac:	f004 fcc8 	bl	8005c40 <f_open>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <main+0x17c>)
 80012b6:	701a      	strb	r2, [r3, #0]

	if(fresult != FR_OK)
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <main+0x17c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <main+0x150>
		send_uart("ERR R\n");
 80012c0:	481c      	ldr	r0, [pc, #112]	; (8001334 <main+0x1bc>)
 80012c2:	f7ff ff27 	bl	8001114 <send_uart>
 80012c6:	e00e      	b.n	80012e6 <main+0x16e>
	else
	{

	f_gets(buffer, fil.fsize, &fil);
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <main+0x1ac>)
 80012ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4a14      	ldr	r2, [pc, #80]	; (8001324 <main+0x1ac>)
 80012d2:	4619      	mov	r1, r3
 80012d4:	480f      	ldr	r0, [pc, #60]	; (8001314 <main+0x19c>)
 80012d6:	f005 fdbf 	bl	8006e58 <f_gets>

	send_uart(buffer);
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <main+0x19c>)
 80012dc:	f7ff ff1a 	bl	8001114 <send_uart>

	f_close(&fil);
 80012e0:	4810      	ldr	r0, [pc, #64]	; (8001324 <main+0x1ac>)
 80012e2:	f005 fcb4 	bl	8006c4e <f_close>
	}

	buf_clear();
 80012e6:	f7ff ff2d 	bl	8001144 <buf_clear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <main+0x172>
 80012ec:	08007ac0 	.word	0x08007ac0
 80012f0:	20000134 	.word	0x20000134
 80012f4:	20002190 	.word	0x20002190
 80012f8:	08007ac4 	.word	0x08007ac4
 80012fc:	08007ae0 	.word	0x08007ae0
 8001300:	20002594 	.word	0x20002594
 8001304:	20002598 	.word	0x20002598
 8001308:	3fe00000 	.word	0x3fe00000
 800130c:	2000259c 	.word	0x2000259c
 8001310:	08007b04 	.word	0x08007b04
 8001314:	20002194 	.word	0x20002194
 8001318:	200025a0 	.word	0x200025a0
 800131c:	08007b20 	.word	0x08007b20
 8001320:	08007b3c 	.word	0x08007b3c
 8001324:	20001164 	.word	0x20001164
 8001328:	08007b48 	.word	0x08007b48
 800132c:	08007b50 	.word	0x08007b50
 8001330:	08007b98 	.word	0x08007b98
 8001334:	08007bc4 	.word	0x08007bc4

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b090      	sub	sp, #64	; 0x40
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0318 	add.w	r3, r7, #24
 8001342:	2228      	movs	r2, #40	; 0x28
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f005 ff1c 	bl	8007184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001368:	2301      	movs	r3, #1
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136c:	2302      	movs	r3, #2
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001376:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fd39 	bl	8001df8 <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800138c:	f000 f8c4 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	230f      	movs	r3, #15
 8001392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001394:	2302      	movs	r3, #2
 8001396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800139c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2102      	movs	r1, #2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 ffa6 	bl	80022fc <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013b6:	f000 f8af 	bl	8001518 <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3740      	adds	r7, #64	; 0x40
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_SPI1_Init+0x64>)
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <MX_SPI1_Init+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_SPI1_Init+0x64>)
 80013d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_SPI1_Init+0x64>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_SPI1_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_SPI1_Init+0x64>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_SPI1_Init+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_SPI1_Init+0x64>)
 80013f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_SPI1_Init+0x64>)
 80013f8:	2210      	movs	r2, #16
 80013fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <MX_SPI1_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_SPI1_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <MX_SPI1_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_SPI1_Init+0x64>)
 8001410:	220a      	movs	r2, #10
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_SPI1_Init+0x64>)
 8001416:	f001 f8ff 	bl	8002618 <HAL_SPI_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001420:	f000 f87a 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000094 	.word	0x20000094
 800142c:	40013000 	.word	0x40013000

08001430 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MX_USART1_UART_Init+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_USART1_UART_Init+0x4c>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART1_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART1_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001468:	f001 fd00 	bl	8002e6c <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001472:	f000 f851 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200000ec 	.word	0x200000ec
 8001480:	40013800 	.word	0x40013800

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <MX_GPIO_Init+0x8c>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <MX_GPIO_Init+0x8c>)
 800149e:	f043 0320 	orr.w	r3, r3, #32
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_GPIO_Init+0x8c>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0320 	and.w	r3, r3, #32
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_GPIO_Init+0x8c>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a16      	ldr	r2, [pc, #88]	; (8001510 <MX_GPIO_Init+0x8c>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_GPIO_Init+0x8c>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_GPIO_Init+0x8c>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a10      	ldr	r2, [pc, #64]	; (8001510 <MX_GPIO_Init+0x8c>)
 80014ce:	f043 0308 	orr.w	r3, r3, #8
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_GPIO_Init+0x8c>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2101      	movs	r1, #1
 80014e4:	480b      	ldr	r0, [pc, #44]	; (8001514 <MX_GPIO_Init+0x90>)
 80014e6:	f000 fc6f 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ea:	2301      	movs	r3, #1
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4619      	mov	r1, r3
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_GPIO_Init+0x90>)
 8001502:	f000 fadd 	bl	8001ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001506:	bf00      	nop
 8001508:	3720      	adds	r7, #32
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	40010c00 	.word	0x40010c00

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>
	...

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_MspInit+0x5c>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_MspInit+0x5c>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6193      	str	r3, [r2, #24]
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_MspInit+0x5c>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_MspInit+0x5c>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_MspInit+0x5c>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_MspInit+0x5c>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_MspInit+0x60>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_MspInit+0x60>)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40021000 	.word	0x40021000
 8001584:	40010000 	.word	0x40010000

08001588 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d12f      	bne.n	8001608 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_SPI_MspInit+0x8c>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a19      	ldr	r2, [pc, #100]	; (8001614 <HAL_SPI_MspInit+0x8c>)
 80015ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_SPI_MspInit+0x8c>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_SPI_MspInit+0x8c>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <HAL_SPI_MspInit+0x8c>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_SPI_MspInit+0x8c>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015d8:	23a0      	movs	r3, #160	; 0xa0
 80015da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4619      	mov	r1, r3
 80015ea:	480b      	ldr	r0, [pc, #44]	; (8001618 <HAL_SPI_MspInit+0x90>)
 80015ec:	f000 fa68 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <HAL_SPI_MspInit+0x90>)
 8001604:	f000 fa5c 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40013000 	.word	0x40013000
 8001614:	40021000 	.word	0x40021000
 8001618:	40010800 	.word	0x40010800

0800161c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <HAL_UART_MspInit+0x8c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d131      	bne.n	80016a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_UART_MspInit+0x90>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <HAL_UART_MspInit+0x90>)
 8001642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_UART_MspInit+0x90>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_UART_MspInit+0x90>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <HAL_UART_MspInit+0x90>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_UART_MspInit+0x90>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800166c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001670:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	4619      	mov	r1, r3
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <HAL_UART_MspInit+0x94>)
 8001682:	f000 fa1d 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4619      	mov	r1, r3
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <HAL_UART_MspInit+0x94>)
 800169c:	f000 fa10 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40013800 	.word	0x40013800
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010800 	.word	0x40010800

080016b4 <SDTimerHandler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimerHandler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <SDTimerHandler+0x3c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d006      	beq.n	80016d0 <SDTimerHandler+0x1c>
		Timer1 --;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <SDTimerHandler+0x3c>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <SDTimerHandler+0x3c>)
 80016ce:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <SDTimerHandler+0x40>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <SDTimerHandler+0x34>
		Timer2 --;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <SDTimerHandler+0x40>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <SDTimerHandler+0x40>)
 80016e6:	701a      	strb	r2, [r3, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	200025a5 	.word	0x200025a5
 80016f4:	200025a6 	.word	0x200025a6

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <NMI_Handler+0x4>

080016fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <MemManage_Handler+0x4>

0800170a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <UsageFault_Handler+0x4>

08001716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt ++;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <SysTick_Handler+0x30>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	3301      	adds	r3, #1
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <SysTick_Handler+0x30>)
 800174c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <SysTick_Handler+0x30>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b09      	cmp	r3, #9
 8001756:	d904      	bls.n	8001762 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <SysTick_Handler+0x30>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
		SDTimerHandler();
 800175e:	f7ff ffa9 	bl	80016b4 <SDTimerHandler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001762:	f000 f8ad 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200025a4 	.word	0x200025a4

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f005 fcf8 	bl	8007194 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20005000 	.word	0x20005000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	200025a8 	.word	0x200025a8
 80017d8:	20002930 	.word	0x20002930

080017dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e8:	f7ff fff8 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ee:	490c      	ldr	r1, [pc, #48]	; (8001820 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017f0:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001804:	4c09      	ldr	r4, [pc, #36]	; (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f005 fcc5 	bl	80071a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001816:	f7ff fcaf 	bl	8001178 <main>
  bx lr
 800181a:	4770      	bx	lr
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001824:	080081cc 	.word	0x080081cc
  ldr r2, =_sbss
 8001828:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800182c:	2000292c 	.word	0x2000292c

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x28>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x28>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f907 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	200f      	movs	r0, #15
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fe68 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f911 	bl	8001aa6 <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f8e7 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000004 	.word	0x20000004
 80018b8:	2000000c 	.word	0x2000000c
 80018bc:	20000008 	.word	0x20000008

080018c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x1c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_IncTick+0x20>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <HAL_IncTick+0x20>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	200025ac 	.word	0x200025ac

080018e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <HAL_GetTick+0x10>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	200025ac 	.word	0x200025ac

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff90 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff49 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff5e 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff90 	bl	80019b0 <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5f 	bl	800195c <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffb0 	bl	8001a14 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad2:	e169      	b.n	8001da8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f040 8158 	bne.w	8001da2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a9a      	ldr	r2, [pc, #616]	; (8001d60 <HAL_GPIO_Init+0x2a0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d05e      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001afc:	4a98      	ldr	r2, [pc, #608]	; (8001d60 <HAL_GPIO_Init+0x2a0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d875      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b02:	4a98      	ldr	r2, [pc, #608]	; (8001d64 <HAL_GPIO_Init+0x2a4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d058      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b08:	4a96      	ldr	r2, [pc, #600]	; (8001d64 <HAL_GPIO_Init+0x2a4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d86f      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b0e:	4a96      	ldr	r2, [pc, #600]	; (8001d68 <HAL_GPIO_Init+0x2a8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d052      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b14:	4a94      	ldr	r2, [pc, #592]	; (8001d68 <HAL_GPIO_Init+0x2a8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d869      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b1a:	4a94      	ldr	r2, [pc, #592]	; (8001d6c <HAL_GPIO_Init+0x2ac>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d04c      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b20:	4a92      	ldr	r2, [pc, #584]	; (8001d6c <HAL_GPIO_Init+0x2ac>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d863      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b26:	4a92      	ldr	r2, [pc, #584]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d046      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b2c:	4a90      	ldr	r2, [pc, #576]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d85d      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b32:	2b12      	cmp	r3, #18
 8001b34:	d82a      	bhi.n	8001b8c <HAL_GPIO_Init+0xcc>
 8001b36:	2b12      	cmp	r3, #18
 8001b38:	d859      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <HAL_GPIO_Init+0x80>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001bbb 	.word	0x08001bbb
 8001b44:	08001b95 	.word	0x08001b95
 8001b48:	08001ba7 	.word	0x08001ba7
 8001b4c:	08001be9 	.word	0x08001be9
 8001b50:	08001bef 	.word	0x08001bef
 8001b54:	08001bef 	.word	0x08001bef
 8001b58:	08001bef 	.word	0x08001bef
 8001b5c:	08001bef 	.word	0x08001bef
 8001b60:	08001bef 	.word	0x08001bef
 8001b64:	08001bef 	.word	0x08001bef
 8001b68:	08001bef 	.word	0x08001bef
 8001b6c:	08001bef 	.word	0x08001bef
 8001b70:	08001bef 	.word	0x08001bef
 8001b74:	08001bef 	.word	0x08001bef
 8001b78:	08001bef 	.word	0x08001bef
 8001b7c:	08001bef 	.word	0x08001bef
 8001b80:	08001bef 	.word	0x08001bef
 8001b84:	08001b9d 	.word	0x08001b9d
 8001b88:	08001bb1 	.word	0x08001bb1
 8001b8c:	4a79      	ldr	r2, [pc, #484]	; (8001d74 <HAL_GPIO_Init+0x2b4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b92:	e02c      	b.n	8001bee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	623b      	str	r3, [r7, #32]
          break;
 8001b9a:	e029      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	623b      	str	r3, [r7, #32]
          break;
 8001ba4:	e024      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	3308      	adds	r3, #8
 8001bac:	623b      	str	r3, [r7, #32]
          break;
 8001bae:	e01f      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	330c      	adds	r3, #12
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e01a      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e013      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	611a      	str	r2, [r3, #16]
          break;
 8001bda:	e009      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	615a      	str	r2, [r3, #20]
          break;
 8001be6:	e003      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
          break;
 8001bec:	e000      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          break;
 8001bee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d801      	bhi.n	8001bfa <HAL_GPIO_Init+0x13a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	e001      	b.n	8001bfe <HAL_GPIO_Init+0x13e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2bff      	cmp	r3, #255	; 0xff
 8001c04:	d802      	bhi.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	e002      	b.n	8001c12 <HAL_GPIO_Init+0x152>
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	3b08      	subs	r3, #8
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	210f      	movs	r1, #15
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	401a      	ands	r2, r3
 8001c24:	6a39      	ldr	r1, [r7, #32]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80b1 	beq.w	8001da2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c40:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_GPIO_Init+0x2b8>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a4c      	ldr	r2, [pc, #304]	; (8001d78 <HAL_GPIO_Init+0x2b8>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_GPIO_Init+0x2b8>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c58:	4a48      	ldr	r2, [pc, #288]	; (8001d7c <HAL_GPIO_Init+0x2bc>)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a40      	ldr	r2, [pc, #256]	; (8001d80 <HAL_GPIO_Init+0x2c0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_GPIO_Init+0x1ec>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a3f      	ldr	r2, [pc, #252]	; (8001d84 <HAL_GPIO_Init+0x2c4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_GPIO_Init+0x1e8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a3e      	ldr	r2, [pc, #248]	; (8001d88 <HAL_GPIO_Init+0x2c8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d007      	beq.n	8001ca4 <HAL_GPIO_Init+0x1e4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a3d      	ldr	r2, [pc, #244]	; (8001d8c <HAL_GPIO_Init+0x2cc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_GPIO_Init+0x1e0>
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e006      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	e004      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001cac:	2300      	movs	r3, #0
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cbe:	492f      	ldr	r1, [pc, #188]	; (8001d7c <HAL_GPIO_Init+0x2bc>)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	492c      	ldr	r1, [pc, #176]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	4928      	ldr	r1, [pc, #160]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	4922      	ldr	r1, [pc, #136]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60cb      	str	r3, [r1, #12]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	491e      	ldr	r1, [pc, #120]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4918      	ldr	r1, [pc, #96]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	4914      	ldr	r1, [pc, #80]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d021      	beq.n	8001d94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
 8001d5c:	e021      	b.n	8001da2 <HAL_GPIO_Init+0x2e2>
 8001d5e:	bf00      	nop
 8001d60:	10320000 	.word	0x10320000
 8001d64:	10310000 	.word	0x10310000
 8001d68:	10220000 	.word	0x10220000
 8001d6c:	10210000 	.word	0x10210000
 8001d70:	10120000 	.word	0x10120000
 8001d74:	10110000 	.word	0x10110000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40010800 	.word	0x40010800
 8001d84:	40010c00 	.word	0x40010c00
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40011400 	.word	0x40011400
 8001d90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_GPIO_Init+0x304>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	4909      	ldr	r1, [pc, #36]	; (8001dc4 <HAL_GPIO_Init+0x304>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3301      	adds	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f47f ae8e 	bne.w	8001ad4 <HAL_GPIO_Init+0x14>
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	372c      	adds	r7, #44	; 0x2c
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dd8:	787b      	ldrb	r3, [r7, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001de4:	e003      	b.n	8001dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001de6:	887b      	ldrh	r3, [r7, #2]
 8001de8:	041a      	lsls	r2, r3, #16
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e272      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8087 	beq.w	8001f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e18:	4b92      	ldr	r3, [pc, #584]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d00c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e24:	4b8f      	ldr	r3, [pc, #572]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d112      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5e>
 8001e30:	4b8c      	ldr	r3, [pc, #560]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d10b      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3e:	4b89      	ldr	r3, [pc, #548]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d06c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x12c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d168      	bne.n	8001f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e24c      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x76>
 8001e60:	4b80      	ldr	r3, [pc, #512]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a7f      	ldr	r2, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e02e      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x98>
 8001e76:	4b7b      	ldr	r3, [pc, #492]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7a      	ldr	r2, [pc, #488]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b78      	ldr	r3, [pc, #480]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a77      	ldr	r2, [pc, #476]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xbc>
 8001e9a:	4b72      	ldr	r3, [pc, #456]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a71      	ldr	r2, [pc, #452]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b6f      	ldr	r3, [pc, #444]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6e      	ldr	r2, [pc, #440]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001eb4:	4b6b      	ldr	r3, [pc, #428]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6a      	ldr	r2, [pc, #424]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b68      	ldr	r3, [pc, #416]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a67      	ldr	r2, [pc, #412]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fd06 	bl	80018e4 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff fd02 	bl	80018e4 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e200      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xe4>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fcf2 	bl	80018e4 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff fcee 	bl	80018e4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1ec      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x10c>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d063      	beq.n	8001ffa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f32:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f3e:	4b49      	ldr	r3, [pc, #292]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x18c>
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d116      	bne.n	8001f84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	4b43      	ldr	r3, [pc, #268]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x176>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1c0      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4939      	ldr	r1, [pc, #228]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	e03a      	b.n	8001ffa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff fca7 	bl	80018e4 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fca3 	bl	80018e4 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1a1      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4927      	ldr	r1, [pc, #156]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e015      	b.n	8001ffa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fc86 	bl	80018e4 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7ff fc82 	bl	80018e4 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e180      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d03a      	beq.n	800207c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d019      	beq.n	8002042 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7ff fc66 	bl	80018e4 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff fc62 	bl	80018e4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e160      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800203a:	2001      	movs	r0, #1
 800203c:	f000 face 	bl	80025dc <RCC_Delay>
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7ff fc4c 	bl	80018e4 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204e:	e00f      	b.n	8002070 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff fc48 	bl	80018e4 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d908      	bls.n	8002070 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e146      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	42420000 	.word	0x42420000
 800206c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	4b92      	ldr	r3, [pc, #584]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e9      	bne.n	8002050 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80a6 	beq.w	80021d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b8b      	ldr	r3, [pc, #556]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10d      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a87      	ldr	r2, [pc, #540]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b85      	ldr	r3, [pc, #532]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d118      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c2:	4b7f      	ldr	r3, [pc, #508]	; (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7e      	ldr	r2, [pc, #504]	; (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fc09 	bl	80018e4 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7ff fc05 	bl	80018e4 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b64      	cmp	r3, #100	; 0x64
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e103      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e8:	4b75      	ldr	r3, [pc, #468]	; (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x312>
 80020fc:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a6e      	ldr	r2, [pc, #440]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	e02d      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x334>
 8002112:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a69      	ldr	r2, [pc, #420]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a66      	ldr	r2, [pc, #408]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	e01c      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d10c      	bne.n	800214e <HAL_RCC_OscConfig+0x356>
 8002134:	4b61      	ldr	r3, [pc, #388]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a60      	ldr	r2, [pc, #384]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6213      	str	r3, [r2, #32]
 8002140:	4b5e      	ldr	r3, [pc, #376]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a5d      	ldr	r2, [pc, #372]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	e00b      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800214e:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a5a      	ldr	r2, [pc, #360]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	4b58      	ldr	r3, [pc, #352]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a57      	ldr	r2, [pc, #348]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d015      	beq.n	800219a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7ff fbb9 	bl	80018e4 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7ff fbb5 	bl	80018e4 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0b1      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	4b4b      	ldr	r3, [pc, #300]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ee      	beq.n	8002176 <HAL_RCC_OscConfig+0x37e>
 8002198:	e014      	b.n	80021c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7ff fba3 	bl	80018e4 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7ff fb9f 	bl	80018e4 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e09b      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	4b40      	ldr	r3, [pc, #256]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ee      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d105      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ca:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a3b      	ldr	r2, [pc, #236]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8087 	beq.w	80022ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d061      	beq.n	80022b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d146      	bne.n	8002282 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f4:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <HAL_RCC_OscConfig+0x4cc>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7ff fb73 	bl	80018e4 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7ff fb6f 	bl	80018e4 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e06d      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002228:	d108      	bne.n	800223c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222a:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4921      	ldr	r1, [pc, #132]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223c:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a19      	ldr	r1, [r3, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	430b      	orrs	r3, r1
 800224e:	491b      	ldr	r1, [pc, #108]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff fb43 	bl	80018e4 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7ff fb3f 	bl	80018e4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e03d      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x46a>
 8002280:	e035      	b.n	80022ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_RCC_OscConfig+0x4cc>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fb2c 	bl	80018e4 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff fb28 	bl	80018e4 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e026      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x498>
 80022ae:	e01e      	b.n	80022ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e019      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40007000 	.word	0x40007000
 80022c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_OscConfig+0x500>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000

080022fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d0      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d910      	bls.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4965      	ldr	r1, [pc, #404]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002362:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800237a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d040      	beq.n	800241c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e073      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4936      	ldr	r1, [pc, #216]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7ff fa7a 	bl	80018e4 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7ff fa76 	bl	80018e4 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e053      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d210      	bcs.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0207 	bic.w	r2, r3, #7
 8002432:	4922      	ldr	r1, [pc, #136]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f821 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	490a      	ldr	r1, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	5ccb      	ldrb	r3, [r1, r3]
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1cc>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1d0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f9d8 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08007c14 	.word	0x08007c14
 80024c8:	20000004 	.word	0x20000004
 80024cc:	20000008 	.word	0x20000008

080024d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_GetSysClockFreq+0x94>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x30>
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x36>
 80024fe:	e027      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002502:	613b      	str	r3, [r7, #16]
      break;
 8002504:	e027      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	0c9b      	lsrs	r3, r3, #18
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	4a17      	ldr	r2, [pc, #92]	; (800256c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002510:	5cd3      	ldrb	r3, [r2, r3]
 8002512:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d010      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_RCC_GetSysClockFreq+0x94>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	0c5b      	lsrs	r3, r3, #17
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	4a11      	ldr	r2, [pc, #68]	; (8002570 <HAL_RCC_GetSysClockFreq+0xa0>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002532:	fb03 f202 	mul.w	r2, r3, r2
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e004      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002544:	fb02 f303 	mul.w	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	613b      	str	r3, [r7, #16]
      break;
 800254e:	e002      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002552:	613b      	str	r3, [r7, #16]
      break;
 8002554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002556:	693b      	ldr	r3, [r7, #16]
}
 8002558:	4618      	mov	r0, r3
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	007a1200 	.word	0x007a1200
 800256c:	08007c2c 	.word	0x08007c2c
 8002570:	08007c3c 	.word	0x08007c3c
 8002574:	003d0900 	.word	0x003d0900

08002578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800257c:	4b02      	ldr	r3, [pc, #8]	; (8002588 <HAL_RCC_GetHCLKFreq+0x10>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002590:	f7ff fff2 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4903      	ldr	r1, [pc, #12]	; (80025b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	08007c24 	.word	0x08007c24

080025b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025b8:	f7ff ffde 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	0adb      	lsrs	r3, r3, #11
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4903      	ldr	r1, [pc, #12]	; (80025d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	08007c24 	.word	0x08007c24

080025dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <RCC_Delay+0x34>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <RCC_Delay+0x38>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0a5b      	lsrs	r3, r3, #9
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025f8:	bf00      	nop
  }
  while (Delay --);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1e5a      	subs	r2, r3, #1
 80025fe:	60fa      	str	r2, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f9      	bne.n	80025f8 <RCC_Delay+0x1c>
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	20000004 	.word	0x20000004
 8002614:	10624dd3 	.word	0x10624dd3

08002618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e076      	b.n	8002718 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	d108      	bne.n	8002644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800263a:	d009      	beq.n	8002650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
 8002642:	e005      	b.n	8002650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe ff8c 	bl	8001588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002686:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	ea42 0103 	orr.w	r1, r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	0c1a      	lsrs	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f002 0204 	and.w	r2, r2, #4
 80026f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002706:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_SPI_Transmit+0x22>
 800273e:	2302      	movs	r3, #2
 8002740:	e12d      	b.n	800299e <HAL_SPI_Transmit+0x27e>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800274a:	f7ff f8cb 	bl	80018e4 <HAL_GetTick>
 800274e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d002      	beq.n	8002766 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002760:	2302      	movs	r3, #2
 8002762:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002764:	e116      	b.n	8002994 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_SPI_Transmit+0x52>
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002776:	e10d      	b.n	8002994 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2203      	movs	r2, #3
 800277c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	88fa      	ldrh	r2, [r7, #6]
 8002790:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	88fa      	ldrh	r2, [r7, #6]
 8002796:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027be:	d10f      	bne.n	80027e0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d007      	beq.n	80027fe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002806:	d14f      	bne.n	80028a8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_SPI_Transmit+0xf6>
 8002810:	8afb      	ldrh	r3, [r7, #22]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d142      	bne.n	800289c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	881a      	ldrh	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	1c9a      	adds	r2, r3, #2
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800283a:	e02f      	b.n	800289c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	d112      	bne.n	8002870 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	881a      	ldrh	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	1c9a      	adds	r2, r3, #2
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	86da      	strh	r2, [r3, #54]	; 0x36
 800286e:	e015      	b.n	800289c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002870:	f7ff f838 	bl	80018e4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d803      	bhi.n	8002888 <HAL_SPI_Transmit+0x168>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002886:	d102      	bne.n	800288e <HAL_SPI_Transmit+0x16e>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800289a:	e07b      	b.n	8002994 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1ca      	bne.n	800283c <HAL_SPI_Transmit+0x11c>
 80028a6:	e050      	b.n	800294a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_SPI_Transmit+0x196>
 80028b0:	8afb      	ldrh	r3, [r7, #22]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d144      	bne.n	8002940 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	330c      	adds	r3, #12
 80028c0:	7812      	ldrb	r2, [r2, #0]
 80028c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028dc:	e030      	b.n	8002940 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d113      	bne.n	8002914 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	7812      	ldrb	r2, [r2, #0]
 80028f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	86da      	strh	r2, [r3, #54]	; 0x36
 8002912:	e015      	b.n	8002940 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002914:	f7fe ffe6 	bl	80018e4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d803      	bhi.n	800292c <HAL_SPI_Transmit+0x20c>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292a:	d102      	bne.n	8002932 <HAL_SPI_Transmit+0x212>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800293e:	e029      	b.n	8002994 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1c9      	bne.n	80028de <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fa6e 	bl	8002e30 <SPI_EndRxTxTransaction>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	77fb      	strb	r3, [r7, #31]
 800298a:	e003      	b.n	8002994 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800299c:	7ffb      	ldrb	r3, [r7, #31]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b08c      	sub	sp, #48	; 0x30
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029b4:	2301      	movs	r3, #1
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_SPI_TransmitReceive+0x26>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e198      	b.n	8002cfe <HAL_SPI_TransmitReceive+0x358>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029d4:	f7fe ff86 	bl	80018e4 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d00f      	beq.n	8002a16 <HAL_SPI_TransmitReceive+0x70>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029fc:	d107      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d103      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x68>
 8002a06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d003      	beq.n	8002a16 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a14:	e16d      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_SPI_TransmitReceive+0x82>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_SPI_TransmitReceive+0x82>
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d103      	bne.n	8002a30 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a2e:	e160      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d003      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2205      	movs	r2, #5
 8002a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	887a      	ldrh	r2, [r7, #2]
 8002a5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	887a      	ldrh	r2, [r7, #2]
 8002a66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d007      	beq.n	8002a98 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa0:	d17c      	bne.n	8002b9c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_SPI_TransmitReceive+0x10a>
 8002aaa:	8b7b      	ldrh	r3, [r7, #26]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d16a      	bne.n	8002b86 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	881a      	ldrh	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	1c9a      	adds	r2, r3, #2
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ad4:	e057      	b.n	8002b86 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d11b      	bne.n	8002b1c <HAL_SPI_TransmitReceive+0x176>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d016      	beq.n	8002b1c <HAL_SPI_TransmitReceive+0x176>
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d113      	bne.n	8002b1c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	881a      	ldrh	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	1c9a      	adds	r2, r3, #2
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d119      	bne.n	8002b5e <HAL_SPI_TransmitReceive+0x1b8>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d014      	beq.n	8002b5e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	b292      	uxth	r2, r2
 8002b40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	1c9a      	adds	r2, r3, #2
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b5e:	f7fe fec1 	bl	80018e4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d80b      	bhi.n	8002b86 <HAL_SPI_TransmitReceive+0x1e0>
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d007      	beq.n	8002b86 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002b84:	e0b5      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1a2      	bne.n	8002ad6 <HAL_SPI_TransmitReceive+0x130>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d19d      	bne.n	8002ad6 <HAL_SPI_TransmitReceive+0x130>
 8002b9a:	e080      	b.n	8002c9e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_SPI_TransmitReceive+0x204>
 8002ba4:	8b7b      	ldrh	r3, [r7, #26]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d16f      	bne.n	8002c8a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	7812      	ldrb	r2, [r2, #0]
 8002bb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bd0:	e05b      	b.n	8002c8a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d11c      	bne.n	8002c1a <HAL_SPI_TransmitReceive+0x274>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d017      	beq.n	8002c1a <HAL_SPI_TransmitReceive+0x274>
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d114      	bne.n	8002c1a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	330c      	adds	r3, #12
 8002bfa:	7812      	ldrb	r2, [r2, #0]
 8002bfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d119      	bne.n	8002c5c <HAL_SPI_TransmitReceive+0x2b6>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d014      	beq.n	8002c5c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c5c:	f7fe fe42 	bl	80018e4 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d803      	bhi.n	8002c74 <HAL_SPI_TransmitReceive+0x2ce>
 8002c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c72:	d102      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x2d4>
 8002c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d107      	bne.n	8002c8a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002c88:	e033      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d19e      	bne.n	8002bd2 <HAL_SPI_TransmitReceive+0x22c>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d199      	bne.n	8002bd2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f8c4 	bl	8002e30 <SPI_EndRxTxTransaction>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cba:	e01a      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ce8:	e003      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3730      	adds	r7, #48	; 0x30
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d14:	b2db      	uxtb	r3, r3
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d30:	f7fe fdd8 	bl	80018e4 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d40:	f7fe fdd0 	bl	80018e4 <HAL_GetTick>
 8002d44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d46:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	015b      	lsls	r3, r3, #5
 8002d4c:	0d1b      	lsrs	r3, r3, #20
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d56:	e054      	b.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d050      	beq.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d60:	f7fe fdc0 	bl	80018e4 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d902      	bls.n	8002d76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d13d      	bne.n	8002df2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d8e:	d111      	bne.n	8002db4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d98:	d004      	beq.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da2:	d107      	bne.n	8002db4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dbc:	d10f      	bne.n	8002dde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ddc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e017      	b.n	8002e22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	bf0c      	ite	eq
 8002e12:	2301      	moveq	r3, #1
 8002e14:	2300      	movne	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d19b      	bne.n	8002d58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000004 	.word	0x20000004

08002e30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2200      	movs	r2, #0
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff ff6a 	bl	8002d20 <SPI_WaitFlagStateUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	f043 0220 	orr.w	r2, r3, #32
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e000      	b.n	8002e64 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e042      	b.n	8002f04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe fbc2 	bl	800161c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f91d 	bl	80030f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d16d      	bne.n	8003008 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_UART_Transmit+0x2c>
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e066      	b.n	800300a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2221      	movs	r2, #33	; 0x21
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4a:	f7fe fccb 	bl	80018e4 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	88fa      	ldrh	r2, [r7, #6]
 8002f5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f64:	d108      	bne.n	8002f78 <HAL_UART_Transmit+0x6c>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d104      	bne.n	8002f78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	e003      	b.n	8002f80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f80:	e02a      	b.n	8002fd8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f840 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e036      	b.n	800300a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	e007      	b.n	8002fca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1cf      	bne.n	8002f82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2140      	movs	r1, #64	; 0x40
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f810 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e006      	b.n	800300a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b090      	sub	sp, #64	; 0x40
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003022:	e050      	b.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d04c      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800302c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <UART_WaitOnFlagUntilTimeout+0x30>
 8003032:	f7fe fc57 	bl	80018e4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800303e:	429a      	cmp	r2, r3
 8003040:	d241      	bcs.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	330c      	adds	r3, #12
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	e853 3f00 	ldrex	r3, [r3]
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003062:	637a      	str	r2, [r7, #52]	; 0x34
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003066:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1e5      	bne.n	8003042 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3314      	adds	r3, #20
 800307c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	613b      	str	r3, [r7, #16]
   return(result);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	63bb      	str	r3, [r7, #56]	; 0x38
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3314      	adds	r3, #20
 8003094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003096:	623a      	str	r2, [r7, #32]
 8003098:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	69f9      	ldr	r1, [r7, #28]
 800309c:	6a3a      	ldr	r2, [r7, #32]
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e5      	bne.n	8003076 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e00f      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d09f      	beq.n	8003024 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3740      	adds	r7, #64	; 0x40
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800312a:	f023 030c 	bic.w	r3, r3, #12
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	430b      	orrs	r3, r1
 8003136:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a2c      	ldr	r2, [pc, #176]	; (8003204 <UART_SetConfig+0x114>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d103      	bne.n	8003160 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003158:	f7ff fa2c 	bl	80025b4 <HAL_RCC_GetPCLK2Freq>
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	e002      	b.n	8003166 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003160:	f7ff fa14 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 8003164:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	009a      	lsls	r2, r3, #2
 8003170:	441a      	add	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	4a22      	ldr	r2, [pc, #136]	; (8003208 <UART_SetConfig+0x118>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	0119      	lsls	r1, r3, #4
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009a      	lsls	r2, r3, #2
 8003190:	441a      	add	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	fbb2 f2f3 	udiv	r2, r2, r3
 800319c:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <UART_SetConfig+0x118>)
 800319e:	fba3 0302 	umull	r0, r3, r3, r2
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	2064      	movs	r0, #100	; 0x64
 80031a6:	fb00 f303 	mul.w	r3, r0, r3
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	3332      	adds	r3, #50	; 0x32
 80031b0:	4a15      	ldr	r2, [pc, #84]	; (8003208 <UART_SetConfig+0x118>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031bc:	4419      	add	r1, r3
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009a      	lsls	r2, r3, #2
 80031c8:	441a      	add	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <UART_SetConfig+0x118>)
 80031d6:	fba3 0302 	umull	r0, r3, r3, r2
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2064      	movs	r0, #100	; 0x64
 80031de:	fb00 f303 	mul.w	r3, r0, r3
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	3332      	adds	r3, #50	; 0x32
 80031e8:	4a07      	ldr	r2, [pc, #28]	; (8003208 <UART_SetConfig+0x118>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	f003 020f 	and.w	r2, r3, #15
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	440a      	add	r2, r1
 80031fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40013800 	.word	0x40013800
 8003208:	51eb851f 	.word	0x51eb851f

0800320c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003210:	4904      	ldr	r1, [pc, #16]	; (8003224 <MX_FATFS_Init+0x18>)
 8003212:	4805      	ldr	r0, [pc, #20]	; (8003228 <MX_FATFS_Init+0x1c>)
 8003214:	f003 ff1e 	bl	8007054 <FATFS_LinkDriver>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <MX_FATFS_Init+0x20>)
 800321e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}
 8003224:	200025b4 	.word	0x200025b4
 8003228:	20000010 	.word	0x20000010
 800322c:	200025b0 	.word	0x200025b0

08003230 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003234:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd fc44 	bl	8000ad8 <SD_disk_initialize>
 8003250:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	4603      	mov	r3, r0
 8003262:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fd20 	bl	8000cac <SD_disk_status>
 800326c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	4603      	mov	r3, r0
 8003284:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8003286:	7bf8      	ldrb	r0, [r7, #15]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	f7fd fd21 	bl	8000cd4 <SD_disk_read>
 8003292:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4603      	mov	r3, r0
 80032aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80032ac:	7bf8      	ldrb	r0, [r7, #15]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	f7fd fd78 	bl	8000da8 <SD_disk_write>
 80032b8:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	603a      	str	r2, [r7, #0]
 80032cc:	71fb      	strb	r3, [r7, #7]
 80032ce:	460b      	mov	r3, r1
 80032d0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80032d2:	79b9      	ldrb	r1, [r7, #6]
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd fde9 	bl	8000eb0 <SD_disk_ioctl>
 80032de:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	4a08      	ldr	r2, [pc, #32]	; (8003318 <disk_status+0x30>)
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	79fa      	ldrb	r2, [r7, #7]
 8003300:	4905      	ldr	r1, [pc, #20]	; (8003318 <disk_status+0x30>)
 8003302:	440a      	add	r2, r1
 8003304:	7a12      	ldrb	r2, [r2, #8]
 8003306:	4610      	mov	r0, r2
 8003308:	4798      	blx	r3
 800330a:	4603      	mov	r3, r0
 800330c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	200027d8 	.word	0x200027d8

0800331c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <disk_initialize+0x48>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d111      	bne.n	8003358 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <disk_initialize+0x48>)
 8003338:	2101      	movs	r1, #1
 800333a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	4a09      	ldr	r2, [pc, #36]	; (8003364 <disk_initialize+0x48>)
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	79fa      	ldrb	r2, [r7, #7]
 800334a:	4906      	ldr	r1, [pc, #24]	; (8003364 <disk_initialize+0x48>)
 800334c:	440a      	add	r2, r1
 800334e:	7a12      	ldrb	r2, [r2, #8]
 8003350:	4610      	mov	r0, r2
 8003352:	4798      	blx	r3
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200027d8 	.word	0x200027d8

08003368 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <disk_read+0x3c>)
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	689c      	ldr	r4, [r3, #8]
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <disk_read+0x3c>)
 8003388:	4413      	add	r3, r2
 800338a:	7a18      	ldrb	r0, [r3, #8]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	47a0      	blx	r4
 8003394:	4603      	mov	r3, r0
 8003396:	75fb      	strb	r3, [r7, #23]
  return res;
 8003398:	7dfb      	ldrb	r3, [r7, #23]
}
 800339a:	4618      	mov	r0, r3
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd90      	pop	{r4, r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200027d8 	.word	0x200027d8

080033a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	4603      	mov	r3, r0
 80033b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <disk_write+0x3c>)
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	68dc      	ldr	r4, [r3, #12]
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <disk_write+0x3c>)
 80033c8:	4413      	add	r3, r2
 80033ca:	7a18      	ldrb	r0, [r3, #8]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	47a0      	blx	r4
 80033d4:	4603      	mov	r3, r0
 80033d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd90      	pop	{r4, r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200027d8 	.word	0x200027d8

080033e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	603a      	str	r2, [r7, #0]
 80033f2:	71fb      	strb	r3, [r7, #7]
 80033f4:	460b      	mov	r3, r1
 80033f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <disk_ioctl+0x38>)
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	79fa      	ldrb	r2, [r7, #7]
 8003406:	4906      	ldr	r1, [pc, #24]	; (8003420 <disk_ioctl+0x38>)
 8003408:	440a      	add	r2, r1
 800340a:	7a10      	ldrb	r0, [r2, #8]
 800340c:	79b9      	ldrb	r1, [r7, #6]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	4798      	blx	r3
 8003412:	4603      	mov	r3, r0
 8003414:	73fb      	strb	r3, [r7, #15]
  return res;
 8003416:	7bfb      	ldrb	r3, [r7, #15]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	200027d8 	.word	0x200027d8

08003424 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003438:	e007      	b.n	800344a <mem_cpy+0x26>
		*d++ = *s++;
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	1c53      	adds	r3, r2, #1
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	1c59      	adds	r1, r3, #1
 8003444:	6179      	str	r1, [r7, #20]
 8003446:	7812      	ldrb	r2, [r2, #0]
 8003448:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	1e5a      	subs	r2, r3, #1
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f2      	bne.n	800343a <mem_cpy+0x16>
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003470:	e005      	b.n	800347e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	617a      	str	r2, [r7, #20]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	1e5a      	subs	r2, r3, #1
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f4      	bne.n	8003472 <mem_set+0x12>
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	; 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80034ac:	bf00      	nop
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	1e5a      	subs	r2, r3, #1
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <mem_cmp+0x40>
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	61fa      	str	r2, [r7, #28]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	4619      	mov	r1, r3
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	61ba      	str	r2, [r7, #24]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	1acb      	subs	r3, r1, r3
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ec      	beq.n	80034ae <mem_cmp+0x1a>
	return r;
 80034d4:	697b      	ldr	r3, [r7, #20]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3724      	adds	r7, #36	; 0x24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80034ea:	e002      	b.n	80034f2 <chk_chr+0x12>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3301      	adds	r3, #1
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <chk_chr+0x26>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	4293      	cmp	r3, r2
 8003504:	d1f2      	bne.n	80034ec <chk_chr+0xc>
	return *str;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	781b      	ldrb	r3, [r3, #0]
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e03b      	b.n	80035a0 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8003528:	4931      	ldr	r1, [pc, #196]	; (80035f0 <chk_lock+0xdc>)
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d02c      	beq.n	8003596 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800353c:	492c      	ldr	r1, [pc, #176]	; (80035f0 <chk_lock+0xdc>)
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d120      	bne.n	800359a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8003558:	4925      	ldr	r1, [pc, #148]	; (80035f0 <chk_lock+0xdc>)
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	3304      	adds	r3, #4
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003570:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003572:	429a      	cmp	r2, r3
 8003574:	d111      	bne.n	800359a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8003576:	491e      	ldr	r1, [pc, #120]	; (80035f0 <chk_lock+0xdc>)
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	3308      	adds	r3, #8
 8003586:	881a      	ldrh	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8003590:	429a      	cmp	r2, r3
 8003592:	d102      	bne.n	800359a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8003594:	e007      	b.n	80035a6 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3301      	adds	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d9c0      	bls.n	8003528 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d109      	bne.n	80035c0 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <chk_lock+0xa4>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d101      	bne.n	80035bc <chk_lock+0xa8>
 80035b8:	2300      	movs	r3, #0
 80035ba:	e013      	b.n	80035e4 <chk_lock+0xd0>
 80035bc:	2312      	movs	r3, #18
 80035be:	e011      	b.n	80035e4 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <chk_lock+0xca>
 80035c6:	490a      	ldr	r1, [pc, #40]	; (80035f0 <chk_lock+0xdc>)
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4613      	mov	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	330a      	adds	r3, #10
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035dc:	d101      	bne.n	80035e2 <chk_lock+0xce>
 80035de:	2310      	movs	r3, #16
 80035e0:	e000      	b.n	80035e4 <chk_lock+0xd0>
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	200025c0 	.word	0x200025c0

080035f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	e002      	b.n	8003606 <enq_lock+0x12>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3301      	adds	r3, #1
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d809      	bhi.n	8003620 <enq_lock+0x2c>
 800360c:	490a      	ldr	r1, [pc, #40]	; (8003638 <enq_lock+0x44>)
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1ef      	bne.n	8003600 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	bf14      	ite	ne
 8003626:	2301      	movne	r3, #1
 8003628:	2300      	moveq	r3, #0
 800362a:	b2db      	uxtb	r3, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	200025c0 	.word	0x200025c0

0800363c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e02e      	b.n	80036aa <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800364c:	4958      	ldr	r1, [pc, #352]	; (80037b0 <inc_lock+0x174>)
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d11d      	bne.n	80036a4 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8003668:	4951      	ldr	r1, [pc, #324]	; (80037b0 <inc_lock+0x174>)
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3304      	adds	r3, #4
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003680:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8003682:	429a      	cmp	r2, r3
 8003684:	d10e      	bne.n	80036a4 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8003686:	494a      	ldr	r1, [pc, #296]	; (80037b0 <inc_lock+0x174>)
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3308      	adds	r3, #8
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800369e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d006      	beq.n	80036b2 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3301      	adds	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d9cd      	bls.n	800364c <inc_lock+0x10>
 80036b0:	e000      	b.n	80036b4 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80036b2:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d148      	bne.n	800374c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	e002      	b.n	80036c6 <inc_lock+0x8a>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3301      	adds	r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d809      	bhi.n	80036e0 <inc_lock+0xa4>
 80036cc:	4938      	ldr	r1, [pc, #224]	; (80037b0 <inc_lock+0x174>)
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ef      	bne.n	80036c0 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d101      	bne.n	80036ea <inc_lock+0xae>
 80036e6:	2300      	movs	r3, #0
 80036e8:	e05d      	b.n	80037a6 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f0:	6819      	ldr	r1, [r3, #0]
 80036f2:	482f      	ldr	r0, [pc, #188]	; (80037b0 <inc_lock+0x174>)
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4403      	add	r3, r0
 8003700:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003708:	6899      	ldr	r1, [r3, #8]
 800370a:	4829      	ldr	r0, [pc, #164]	; (80037b0 <inc_lock+0x174>)
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4403      	add	r3, r0
 8003718:	3304      	adds	r3, #4
 800371a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003722:	88d8      	ldrh	r0, [r3, #6]
 8003724:	4922      	ldr	r1, [pc, #136]	; (80037b0 <inc_lock+0x174>)
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	3308      	adds	r3, #8
 8003734:	4602      	mov	r2, r0
 8003736:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003738:	491d      	ldr	r1, [pc, #116]	; (80037b0 <inc_lock+0x174>)
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	330a      	adds	r3, #10
 8003748:	2200      	movs	r2, #0
 800374a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <inc_lock+0x130>
 8003752:	4917      	ldr	r1, [pc, #92]	; (80037b0 <inc_lock+0x174>)
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	330a      	adds	r3, #10
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <inc_lock+0x130>
 8003768:	2300      	movs	r3, #0
 800376a:	e01c      	b.n	80037a6 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10b      	bne.n	800378a <inc_lock+0x14e>
 8003772:	490f      	ldr	r1, [pc, #60]	; (80037b0 <inc_lock+0x174>)
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	330a      	adds	r3, #10
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	b299      	uxth	r1, r3
 8003788:	e001      	b.n	800378e <inc_lock+0x152>
 800378a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800378e:	4808      	ldr	r0, [pc, #32]	; (80037b0 <inc_lock+0x174>)
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4403      	add	r3, r0
 800379c:	330a      	adds	r3, #10
 800379e:	460a      	mov	r2, r1
 80037a0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	3301      	adds	r3, #1
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	200025c0 	.word	0x200025c0

080037b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3b01      	subs	r3, #1
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d82e      	bhi.n	8003826 <dec_lock+0x72>
		n = Files[i].ctr;
 80037c8:	491b      	ldr	r1, [pc, #108]	; (8003838 <dec_lock+0x84>)
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	330a      	adds	r3, #10
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80037dc:	89fb      	ldrh	r3, [r7, #14]
 80037de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e2:	d101      	bne.n	80037e8 <dec_lock+0x34>
 80037e4:	2300      	movs	r3, #0
 80037e6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80037e8:	89fb      	ldrh	r3, [r7, #14]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <dec_lock+0x40>
 80037ee:	89fb      	ldrh	r3, [r7, #14]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80037f4:	4910      	ldr	r1, [pc, #64]	; (8003838 <dec_lock+0x84>)
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	330a      	adds	r3, #10
 8003804:	89fa      	ldrh	r2, [r7, #14]
 8003806:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003808:	89fb      	ldrh	r3, [r7, #14]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d108      	bne.n	8003820 <dec_lock+0x6c>
 800380e:	490a      	ldr	r1, [pc, #40]	; (8003838 <dec_lock+0x84>)
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	737b      	strb	r3, [r7, #13]
 8003824:	e001      	b.n	800382a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003826:	2302      	movs	r3, #2
 8003828:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800382a:	7b7b      	ldrb	r3, [r7, #13]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	200025c0 	.word	0x200025c0

0800383c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e016      	b.n	8003878 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800384a:	4910      	ldr	r1, [pc, #64]	; (800388c <clear_lock+0x50>)
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4613      	mov	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d108      	bne.n	8003872 <clear_lock+0x36>
 8003860:	490a      	ldr	r1, [pc, #40]	; (800388c <clear_lock+0x50>)
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4613      	mov	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3301      	adds	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d9e5      	bls.n	800384a <clear_lock+0xe>
	}
}
 800387e:	bf00      	nop
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	200025c0 	.word	0x200025c0

08003890 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a2:	791b      	ldrb	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d040      	beq.n	800392a <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b8:	7858      	ldrb	r0, [r3, #1]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	2301      	movs	r3, #1
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	f7ff fd72 	bl	80033a8 <disk_write>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <sync_window+0x40>
			res = FR_DISK_ERR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	e02c      	b.n	800392a <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d6:	2200      	movs	r2, #0
 80038d8:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	1ad2      	subs	r2, r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d21b      	bcs.n	800392a <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f8:	78db      	ldrb	r3, [r3, #3]
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	e012      	b.n	8003924 <sync_window+0x94>
					wsect += fs->fsize;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4413      	add	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003912:	7858      	ldrb	r0, [r3, #1]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	2301      	movs	r3, #1
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	f7ff fd45 	bl	80033a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	3b01      	subs	r3, #1
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d8e9      	bhi.n	80038fe <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d01e      	beq.n	800398e <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff9d 	bl	8003890 <sync_window>
 8003956:	4603      	mov	r3, r0
 8003958:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d116      	bne.n	800398e <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003966:	7858      	ldrb	r0, [r3, #1]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	2301      	movs	r3, #1
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	f7ff fcfb 	bl	8003368 <disk_read>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003978:	f04f 33ff 	mov.w	r3, #4294967295
 800397c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800397e:	2301      	movs	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003988:	461a      	mov	r2, r3
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ff75 	bl	8003890 <sync_window>
 80039a6:	4603      	mov	r3, r0
 80039a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f040 80ad 	bne.w	8003b0c <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	f040 8098 	bne.w	8003af0 <sync_fs+0x158>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c6:	795b      	ldrb	r3, [r3, #5]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	f040 8091 	bne.w	8003af0 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d6:	895b      	ldrh	r3, [r3, #10]
 80039d8:	461a      	mov	r2, r3
 80039da:	2100      	movs	r1, #0
 80039dc:	f7ff fd40 	bl	8003460 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2255      	movs	r2, #85	; 0x55
 80039e4:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	22aa      	movs	r2, #170	; 0xaa
 80039ec:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2252      	movs	r2, #82	; 0x52
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2252      	movs	r2, #82	; 0x52
 80039fa:	705a      	strb	r2, [r3, #1]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2261      	movs	r2, #97	; 0x61
 8003a00:	709a      	strb	r2, [r3, #2]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2241      	movs	r2, #65	; 0x41
 8003a06:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2272      	movs	r2, #114	; 0x72
 8003a0c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2272      	movs	r2, #114	; 0x72
 8003a14:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2241      	movs	r2, #65	; 0x41
 8003a1c:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2261      	movs	r2, #97	; 0x61
 8003a24:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	0c1b      	lsrs	r3, r3, #16
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	0e1b      	lsrs	r3, r3, #24
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	0a1b      	lsrs	r3, r3, #8
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	0e1b      	lsrs	r3, r3, #24
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003acc:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad4:	7858      	ldrb	r0, [r3, #1]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f7ff fc61 	bl	80033a8 <disk_write>
			fs->fsi_flag = 0;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aec:	2200      	movs	r2, #0
 8003aee:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af6:	785b      	ldrb	r3, [r3, #1]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fc73 	bl	80033e8 <disk_ioctl>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <sync_fs+0x174>
			res = FR_DISK_ERR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	3b02      	subs	r3, #2
 8003b24:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	3b02      	subs	r3, #2
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d301      	bcc.n	8003b3a <clust2sect+0x24>
 8003b36:	2300      	movs	r3, #0
 8003b38:	e00c      	b.n	8003b54 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b40:	789b      	ldrb	r3, [r3, #2]
 8003b42:	461a      	mov	r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	fb03 f202 	mul.w	r2, r3, r2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	4413      	add	r3, r2
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d906      	bls.n	8003b7c <get_fat+0x1e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d302      	bcc.n	8003b82 <get_fat+0x24>
		val = 1;	/* Internal error */
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	e0e4      	b.n	8003d4c <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	f000 8098 	beq.w	8003cc6 <get_fat+0x168>
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	f300 80ce 	bgt.w	8003d38 <get_fat+0x1da>
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d002      	beq.n	8003ba6 <get_fat+0x48>
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d05f      	beq.n	8003c64 <get_fat+0x106>
 8003ba4:	e0c8      	b.n	8003d38 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	085b      	lsrs	r3, r3, #1
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bba:	6a1a      	ldr	r2, [r3, #32]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc2:	895b      	ldrh	r3, [r3, #10]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bcc:	4413      	add	r3, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff feaf 	bl	8003934 <move_window>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f040 80b0 	bne.w	8003d3e <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	60fa      	str	r2, [r7, #12]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bea:	8952      	ldrh	r2, [r2, #10]
 8003bec:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bf0:	fb01 f202 	mul.w	r2, r1, r2
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	5cd3      	ldrb	r3, [r2, r3]
 8003bfa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c0a:	895b      	ldrh	r3, [r3, #10]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c14:	4413      	add	r3, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff fe8b 	bl	8003934 <move_window>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 808e 	bne.w	8003d42 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c2c:	895b      	ldrh	r3, [r3, #10]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c36:	fb01 f202 	mul.w	r2, r1, r2
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	5cd3      	ldrb	r3, [r2, r3]
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	461a      	mov	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <get_fat+0xfc>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	e002      	b.n	8003c60 <get_fat+0x102>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c60:	617b      	str	r3, [r7, #20]
			break;
 8003c62:	e073      	b.n	8003d4c <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c6a:	6a1a      	ldr	r2, [r3, #32]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c72:	895b      	ldrh	r3, [r3, #10]
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	4619      	mov	r1, r3
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c80:	4413      	add	r3, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff fe55 	bl	8003934 <move_window>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d15a      	bne.n	8003d46 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c9a:	8952      	ldrh	r2, [r2, #10]
 8003c9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ca0:	fb01 f202 	mul.w	r2, r1, r2
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	b21a      	sxth	r2, r3
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	b21b      	sxth	r3, r3
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	b21b      	sxth	r3, r3
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	617b      	str	r3, [r7, #20]
			break;
 8003cc4:	e042      	b.n	8003d4c <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ccc:	6a1a      	ldr	r2, [r3, #32]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd4:	895b      	ldrh	r3, [r3, #10]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	4619      	mov	r1, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fe24 	bl	8003934 <move_window>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d12b      	bne.n	8003d4a <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cfc:	8952      	ldrh	r2, [r2, #10]
 8003cfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d02:	fb01 f202 	mul.w	r2, r1, r2
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	3303      	adds	r3, #3
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	061a      	lsls	r2, r3, #24
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	3302      	adds	r3, #2
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	3201      	adds	r2, #1
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	0212      	lsls	r2, r2, #8
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d34:	617b      	str	r3, [r7, #20]
			break;
 8003d36:	e009      	b.n	8003d4c <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8003d38:	2301      	movs	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e006      	b.n	8003d4c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d3e:	bf00      	nop
 8003d40:	e004      	b.n	8003d4c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d42:	bf00      	nop
 8003d44:	e002      	b.n	8003d4c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d4a:	bf00      	nop
		}
	}

	return val;
 8003d4c:	697b      	ldr	r3, [r7, #20]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b088      	sub	sp, #32
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d906      	bls.n	8003d76 <put_fat+0x20>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <put_fat+0x26>
		res = FR_INT_ERR;
 8003d76:	2302      	movs	r3, #2
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e13a      	b.n	8003ff2 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	f000 80d0 	beq.w	8003f2a <put_fat+0x1d4>
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	f300 8127 	bgt.w	8003fde <put_fat+0x288>
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d003      	beq.n	8003d9c <put_fat+0x46>
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	f000 808f 	beq.w	8003eb8 <put_fat+0x162>
 8003d9a:	e120      	b.n	8003fde <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4413      	add	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db8:	895b      	ldrh	r3, [r3, #10]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7ff fdb4 	bl	8003934 <move_window>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003dd0:	7ffb      	ldrb	r3, [r7, #31]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f040 8106 	bne.w	8003fe4 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	617a      	str	r2, [r7, #20]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003de4:	8952      	ldrh	r2, [r2, #10]
 8003de6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dea:	fb01 f202 	mul.w	r2, r1, r2
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00d      	beq.n	8003e1c <put_fat+0xc6>
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b25b      	sxtb	r3, r3
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	b25a      	sxtb	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	b25b      	sxtb	r3, r3
 8003e14:	4313      	orrs	r3, r2
 8003e16:	b25b      	sxtb	r3, r3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	e001      	b.n	8003e20 <put_fat+0xca>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3c:	895b      	ldrh	r3, [r3, #10]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e46:	4413      	add	r3, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff fd72 	bl	8003934 <move_window>
 8003e50:	4603      	mov	r3, r0
 8003e52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e54:	7ffb      	ldrb	r3, [r7, #31]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 80c6 	bne.w	8003fe8 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e62:	895b      	ldrh	r3, [r3, #10]
 8003e64:	461a      	mov	r2, r3
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e6c:	fb01 f202 	mul.w	r2, r1, r2
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <put_fat+0x134>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e00e      	b.n	8003ea8 <put_fat+0x152>
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	b25b      	sxtb	r3, r3
 8003e90:	f023 030f 	bic.w	r3, r3, #15
 8003e94:	b25a      	sxtb	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	b25b      	sxtb	r3, r3
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	b25b      	sxtb	r3, r3
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	b25b      	sxtb	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	711a      	strb	r2, [r3, #4]
			break;
 8003eb6:	e09c      	b.n	8003ff2 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebe:	6a1a      	ldr	r2, [r3, #32]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec6:	895b      	ldrh	r3, [r3, #10]
 8003ec8:	085b      	lsrs	r3, r3, #1
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	4619      	mov	r1, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ed4:	4413      	add	r3, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff fd2b 	bl	8003934 <move_window>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ee2:	7ffb      	ldrb	r3, [r7, #31]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f040 8081 	bne.w	8003fec <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ef4:	8952      	ldrh	r2, [r2, #10]
 8003ef6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003efa:	fb01 f202 	mul.w	r2, r1, r2
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f24:	2201      	movs	r2, #1
 8003f26:	711a      	strb	r2, [r3, #4]
			break;
 8003f28:	e063      	b.n	8003ff2 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f30:	6a1a      	ldr	r2, [r3, #32]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f38:	895b      	ldrh	r3, [r3, #10]
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	4619      	mov	r1, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f46:	4413      	add	r3, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff fcf2 	bl	8003934 <move_window>
 8003f50:	4603      	mov	r3, r0
 8003f52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f54:	7ffb      	ldrb	r3, [r7, #31]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d14a      	bne.n	8003ff0 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f64:	8952      	ldrh	r2, [r2, #10]
 8003f66:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f6a:	fb01 f202 	mul.w	r2, r1, r2
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	3303      	adds	r3, #3
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	061a      	lsls	r2, r3, #24
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	3302      	adds	r3, #2
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	4313      	orrs	r3, r2
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	3201      	adds	r2, #1
 8003f8c:	7812      	ldrb	r2, [r2, #0]
 8003f8e:	0212      	lsls	r2, r2, #8
 8003f90:	4313      	orrs	r3, r2
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	7812      	ldrb	r2, [r2, #0]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	0c1a      	lsrs	r2, r3, #16
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0e1a      	lsrs	r2, r3, #24
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	3303      	adds	r3, #3
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd8:	2201      	movs	r2, #1
 8003fda:	711a      	strb	r2, [r3, #4]
			break;
 8003fdc:	e009      	b.n	8003ff2 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	77fb      	strb	r3, [r7, #31]
 8003fe2:	e006      	b.n	8003ff2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003fe4:	bf00      	nop
 8003fe6:	e004      	b.n	8003ff2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003fe8:	bf00      	nop
 8003fea:	e002      	b.n	8003ff2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003ff0:	bf00      	nop
		}
	}

	return res;
 8003ff2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d906      	bls.n	800401a <remove_chain+0x1e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <remove_chain+0x24>
		res = FR_INT_ERR;
 800401a:	2302      	movs	r3, #2
 800401c:	73fb      	strb	r3, [r7, #15]
 800401e:	e049      	b.n	80040b4 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004024:	e03b      	b.n	800409e <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004026:	6839      	ldr	r1, [r7, #0]
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fd98 	bl	8003b5e <get_fat>
 800402e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d03b      	beq.n	80040ae <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d102      	bne.n	8004042 <remove_chain+0x46>
 800403c:	2302      	movs	r3, #2
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e038      	b.n	80040b4 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d102      	bne.n	8004050 <remove_chain+0x54>
 800404a:	2301      	movs	r3, #1
 800404c:	73fb      	strb	r3, [r7, #15]
 800404e:	e031      	b.n	80040b4 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004050:	2200      	movs	r2, #0
 8004052:	6839      	ldr	r1, [r7, #0]
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff fe7e 	bl	8003d56 <put_fat>
 800405a:	4603      	mov	r3, r0
 800405c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d126      	bne.n	80040b2 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d013      	beq.n	800409a <remove_chain+0x9e>
				fs->free_clust++;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	3301      	adds	r3, #1
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004082:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408a:	795b      	ldrb	r3, [r3, #5]
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	b2da      	uxtb	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004098:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d3bc      	bcc.n	8004026 <remove_chain+0x2a>
 80040ac:	e002      	b.n	80040b4 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 80040ae:	bf00      	nop
 80040b0:	e000      	b.n	80040b4 <remove_chain+0xb8>
			if (res != FR_OK) break;
 80040b2:	bf00      	nop
		}
	}

	return res;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b086      	sub	sp, #24
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d111      	bne.n	80040f2 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d006      	beq.n	80040ec <create_chain+0x2e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d31d      	bcc.n	8004128 <create_chain+0x6a>
 80040ec:	2301      	movs	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e01a      	b.n	8004128 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80040f2:	6839      	ldr	r1, [r7, #0]
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fd32 	bl	8003b5e <get_fat>
 80040fa:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d801      	bhi.n	8004106 <create_chain+0x48>
 8004102:	2301      	movs	r3, #1
 8004104:	e07f      	b.n	8004206 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d101      	bne.n	8004112 <create_chain+0x54>
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	e079      	b.n	8004206 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	429a      	cmp	r2, r3
 800411e:	d201      	bcs.n	8004124 <create_chain+0x66>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	e070      	b.n	8004206 <create_chain+0x148>
		scl = clst;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3301      	adds	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	429a      	cmp	r2, r3
 800413e:	d307      	bcc.n	8004150 <create_chain+0x92>
			ncl = 2;
 8004140:	2302      	movs	r3, #2
 8004142:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	429a      	cmp	r2, r3
 800414a:	d901      	bls.n	8004150 <create_chain+0x92>
 800414c:	2300      	movs	r3, #0
 800414e:	e05a      	b.n	8004206 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004150:	6979      	ldr	r1, [r7, #20]
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fd03 	bl	8003b5e <get_fat>
 8004158:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00e      	beq.n	800417e <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004166:	d002      	beq.n	800416e <create_chain+0xb0>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <create_chain+0xb4>
			return cs;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	e049      	b.n	8004206 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	429a      	cmp	r2, r3
 8004178:	d1d8      	bne.n	800412c <create_chain+0x6e>
 800417a:	2300      	movs	r3, #0
 800417c:	e043      	b.n	8004206 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800417e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004180:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004184:	6979      	ldr	r1, [r7, #20]
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fde5 	bl	8003d56 <put_fat>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <create_chain+0xec>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d006      	beq.n	80041aa <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	6839      	ldr	r1, [r7, #0]
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fdd8 	bl	8003d56 <put_fat>
 80041a6:	4603      	mov	r3, r0
 80041a8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d121      	bne.n	80041f4 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b6:	461a      	mov	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d01c      	beq.n	8004204 <create_chain+0x146>
			fs->free_clust--;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041da:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	795b      	ldrb	r3, [r3, #5]
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f0:	715a      	strb	r2, [r3, #5]
 80041f2:	e007      	b.n	8004204 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d102      	bne.n	8004200 <create_chain+0x142>
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
 80041fe:	e000      	b.n	8004202 <create_chain+0x144>
 8004200:	2301      	movs	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004204:	697b      	ldr	r3, [r7, #20]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800420e:	b480      	push	{r7}
 8004210:	b087      	sub	sp, #28
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	3304      	adds	r3, #4
 8004222:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004230:	895b      	ldrh	r3, [r3, #10]
 8004232:	461a      	mov	r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	fbb3 f3f2 	udiv	r3, r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004246:	7892      	ldrb	r2, [r2, #2]
 8004248:	fbb3 f3f2 	udiv	r3, r3, r2
 800424c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1d1a      	adds	r2, r3, #4
 8004252:	613a      	str	r2, [r7, #16]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <clmt_clust+0x54>
 800425e:	2300      	movs	r3, #0
 8004260:	e010      	b.n	8004284 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	429a      	cmp	r2, r3
 8004268:	d307      	bcc.n	800427a <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3304      	adds	r3, #4
 8004276:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004278:	e7e9      	b.n	800424e <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800427a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	4413      	add	r3, r2
}
 8004284:	4618      	mov	r0, r3
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b086      	sub	sp, #24
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	b29a      	uxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a2:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d009      	beq.n	80042c8 <dir_sdi+0x3a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d301      	bcc.n	80042cc <dir_sdi+0x3e>
		return FR_INT_ERR;
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0aa      	b.n	8004422 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d110      	bne.n	80042f4 <dir_sdi+0x66>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d107      	bne.n	80042f4 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d115      	bne.n	8004326 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004306:	891b      	ldrh	r3, [r3, #8]
 8004308:	461a      	mov	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	4293      	cmp	r3, r2
 800430e:	d301      	bcc.n	8004314 <dir_sdi+0x86>
			return FR_INT_ERR;
 8004310:	2302      	movs	r3, #2
 8004312:	e086      	b.n	8004422 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	e043      	b.n	80043ae <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004332:	895b      	ldrh	r3, [r3, #10]
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	b29b      	uxth	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004346:	789b      	ldrb	r3, [r3, #2]
 8004348:	fb02 f303 	mul.w	r3, r2, r3
 800434c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800434e:	e021      	b.n	8004394 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6979      	ldr	r1, [r7, #20]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fbff 	bl	8003b5e <get_fat>
 8004360:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004368:	d101      	bne.n	800436e <dir_sdi+0xe0>
 800436a:	2301      	movs	r3, #1
 800436c:	e059      	b.n	8004422 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d909      	bls.n	8004388 <dir_sdi+0xfa>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	429a      	cmp	r2, r3
 8004386:	d301      	bcc.n	800438c <dir_sdi+0xfe>
				return FR_INT_ERR;
 8004388:	2302      	movs	r3, #2
 800438a:	e04a      	b.n	8004422 <dir_sdi+0x194>
			idx -= ic;
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	d2d9      	bcs.n	8004350 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6979      	ldr	r1, [r7, #20]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fbb5 	bl	8003b16 <clust2sect>
 80043ac:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b4:	461a      	mov	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <dir_sdi+0x136>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e02e      	b.n	8004422 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d0:	895b      	ldrh	r3, [r3, #10]
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	fbb3 f2f2 	udiv	r2, r3, r2
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4413      	add	r3, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043e8:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004400:	895b      	ldrh	r3, [r3, #10]
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	b29b      	uxth	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	fbb3 f1f2 	udiv	r1, r3, r2
 800440e:	fb01 f202 	mul.w	r2, r1, r2
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	015b      	lsls	r3, r3, #5
 8004416:	4403      	add	r3, r0
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800441e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800442a:	b590      	push	{r4, r7, lr}
 800442c:	b087      	sub	sp, #28
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443a:	88db      	ldrh	r3, [r3, #6]
 800443c:	3301      	adds	r3, #1
 800443e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <dir_next+0x2a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <dir_next+0x2e>
		return FR_NO_FILE;
 8004454:	2304      	movs	r3, #4
 8004456:	e12e      	b.n	80046b6 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004464:	895b      	ldrh	r3, [r3, #10]
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	b29b      	uxth	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004472:	fb01 f202 	mul.w	r2, r1, r2
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	f040 80fa 	bne.w	8004672 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	3301      	adds	r3, #1
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800448e:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10d      	bne.n	80044b8 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a8:	891b      	ldrh	r3, [r3, #8]
 80044aa:	461a      	mov	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4293      	cmp	r3, r2
 80044b0:	f0c0 80df 	bcc.w	8004672 <dir_next+0x248>
				return FR_NO_FILE;
 80044b4:	2304      	movs	r3, #4
 80044b6:	e0fe      	b.n	80046b6 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c4:	895b      	ldrh	r3, [r3, #10]
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044de:	7892      	ldrb	r2, [r2, #2]
 80044e0:	3a01      	subs	r2, #1
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 80c4 	bne.w	8004672 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f7ff fb2e 	bl	8003b5e <get_fat>
 8004502:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d801      	bhi.n	800450e <dir_next+0xe4>
 800450a:	2302      	movs	r3, #2
 800450c:	e0d3      	b.n	80046b6 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d101      	bne.n	800451a <dir_next+0xf0>
 8004516:	2301      	movs	r3, #1
 8004518:	e0cd      	b.n	80046b6 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	429a      	cmp	r2, r3
 800452c:	f0c0 808e 	bcc.w	800464c <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <dir_next+0x110>
 8004536:	2304      	movs	r3, #4
 8004538:	e0bd      	b.n	80046b6 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	4619      	mov	r1, r3
 800454c:	4610      	mov	r0, r2
 800454e:	f7ff fdb6 	bl	80040be <create_chain>
 8004552:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <dir_next+0x134>
 800455a:	2307      	movs	r3, #7
 800455c:	e0ab      	b.n	80046b6 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <dir_next+0x13e>
 8004564:	2302      	movs	r3, #2
 8004566:	e0a6      	b.n	80046b6 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d101      	bne.n	8004574 <dir_next+0x14a>
 8004570:	2301      	movs	r3, #1
 8004572:	e0a0      	b.n	80046b6 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff f987 	bl	8003890 <sync_window>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <dir_next+0x162>
 8004588:	2301      	movs	r3, #1
 800458a:	e094      	b.n	80046b6 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a2:	895b      	ldrh	r3, [r3, #10]
 80045a4:	461a      	mov	r2, r3
 80045a6:	2100      	movs	r1, #0
 80045a8:	f7fe ff5a 	bl	8003460 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ba:	681c      	ldr	r4, [r3, #0]
 80045bc:	6979      	ldr	r1, [r7, #20]
 80045be:	4610      	mov	r0, r2
 80045c0:	f7ff faa9 	bl	8003b16 <clust2sect>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80045ca:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e021      	b.n	8004616 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045de:	2201      	movs	r2, #1
 80045e0:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff f950 	bl	8003890 <sync_window>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <dir_next+0x1d0>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e05d      	b.n	80046b6 <dir_next+0x28c>
						dp->fs->winsect++;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8004606:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004608:	3201      	adds	r2, #1
 800460a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	3301      	adds	r3, #1
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004622:	789b      	ldrb	r3, [r3, #2]
 8004624:	461a      	mov	r2, r3
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4293      	cmp	r3, r2
 800462a:	d3d2      	bcc.n	80045d2 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004638:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1acb      	subs	r3, r1, r3
 8004646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800464a:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004652:	461a      	mov	r2, r3
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6979      	ldr	r1, [r7, #20]
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fa57 	bl	8003b16 <clust2sect>
 8004668:	4602      	mov	r2, r0
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004670:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	b29a      	uxth	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467c:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004694:	895b      	ldrh	r3, [r3, #10]
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	b29b      	uxth	r3, r3
 800469a:	461a      	mov	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	fbb3 f1f2 	udiv	r1, r3, r2
 80046a2:	fb01 f202 	mul.w	r2, r1, r2
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	015b      	lsls	r3, r3, #5
 80046aa:	4403      	add	r3, r0
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046b2:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd90      	pop	{r4, r7, pc}

080046be <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80046c8:	2100      	movs	r1, #0
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff fddf 	bl	800428e <dir_sdi>
 80046d0:	4603      	mov	r3, r0
 80046d2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d135      	bne.n	8004746 <dir_alloc+0x88>
		n = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f7ff f91f 	bl	8003934 <move_window>
 80046f6:	4603      	mov	r3, r0
 80046f8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d121      	bne.n	8004744 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2be5      	cmp	r3, #229	; 0xe5
 800470c:	d006      	beq.n	800471c <dir_alloc+0x5e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	3301      	adds	r3, #1
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d102      	bne.n	8004730 <dir_alloc+0x72>
 800472a:	e00c      	b.n	8004746 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800472c:	2300      	movs	r3, #0
 800472e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004730:	2101      	movs	r1, #1
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff fe79 	bl	800442a <dir_next>
 8004738:	4603      	mov	r3, r0
 800473a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0cd      	beq.n	80046de <dir_alloc+0x20>
 8004742:	e000      	b.n	8004746 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8004744:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b04      	cmp	r3, #4
 800474a:	d101      	bne.n	8004750 <dir_alloc+0x92>
 800474c:	2307      	movs	r3, #7
 800474e:	73fb      	strb	r3, [r7, #15]
	return res;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800475a:	b480      	push	{r7}
 800475c:	b085      	sub	sp, #20
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	331b      	adds	r3, #27
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	b21a      	sxth	r2, r3
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	331a      	adds	r3, #26
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b21b      	sxth	r3, r3
 8004776:	4313      	orrs	r3, r2
 8004778:	b21b      	sxth	r3, r3
 800477a:	b29b      	uxth	r3, r3
 800477c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d10f      	bne.n	80047aa <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	3315      	adds	r3, #21
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	b21a      	sxth	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	b21b      	sxth	r3, r3
 800479c:	4313      	orrs	r3, r2
 800479e:	b21b      	sxth	r3, r3
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

	return cl;
 80047aa:	68fb      	ldr	r3, [r7, #12]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	331a      	adds	r3, #26
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	331b      	adds	r3, #27
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	0c1a      	lsrs	r2, r3, #16
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3314      	adds	r3, #20
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	0c1b      	lsrs	r3, r3, #16
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	0a1b      	lsrs	r3, r3, #8
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3315      	adds	r3, #21
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	701a      	strb	r2, [r3, #0]
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
	...

08004804 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004816:	1e5a      	subs	r2, r3, #1
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	2301      	movs	r3, #1
 800482a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800482c:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <cmp_lfn+0xd8>)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4413      	add	r3, r2
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	4413      	add	r3, r2
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	b21a      	sxth	r2, r3
 8004840:	4926      	ldr	r1, [pc, #152]	; (80048dc <cmp_lfn+0xd8>)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	440b      	add	r3, r1
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	4619      	mov	r1, r3
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	440b      	add	r3, r1
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	b21b      	sxth	r3, r3
 8004852:	4313      	orrs	r3, r2
 8004854:	b21b      	sxth	r3, r3
 8004856:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8004858:	89fb      	ldrh	r3, [r7, #14]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d019      	beq.n	8004892 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800485e:	89bb      	ldrh	r3, [r7, #12]
 8004860:	4618      	mov	r0, r3
 8004862:	f002 fc41 	bl	80070e8 <ff_wtoupper>
 8004866:	4603      	mov	r3, r0
 8004868:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2bfe      	cmp	r3, #254	; 0xfe
 800486e:	d80e      	bhi.n	800488e <cmp_lfn+0x8a>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	617a      	str	r2, [r7, #20]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f002 fc32 	bl	80070e8 <ff_wtoupper>
 8004884:	4603      	mov	r3, r0
 8004886:	461a      	mov	r2, r3
 8004888:	89fb      	ldrh	r3, [r7, #14]
 800488a:	4293      	cmp	r3, r2
 800488c:	d008      	beq.n	80048a0 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800488e:	2300      	movs	r3, #0
 8004890:	e01f      	b.n	80048d2 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004892:	89bb      	ldrh	r3, [r7, #12]
 8004894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004898:	4293      	cmp	r3, r2
 800489a:	d001      	beq.n	80048a0 <cmp_lfn+0x9c>
 800489c:	2300      	movs	r3, #0
 800489e:	e018      	b.n	80048d2 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	3301      	adds	r3, #1
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b0c      	cmp	r3, #12
 80048aa:	d9bf      	bls.n	800482c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <cmp_lfn+0xcc>
 80048b8:	89fb      	ldrh	r3, [r7, #14]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <cmp_lfn+0xcc>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <cmp_lfn+0xcc>
		return 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e000      	b.n	80048d2 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80048d0:	2301      	movs	r3, #1
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	08007cc0 	.word	0x08007cc0

080048e0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b089      	sub	sp, #36	; 0x24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	4611      	mov	r1, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	460b      	mov	r3, r1
 80048f0:	71fb      	strb	r3, [r7, #7]
 80048f2:	4613      	mov	r3, r2
 80048f4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	330d      	adds	r3, #13
 80048fa:	79ba      	ldrb	r2, [r7, #6]
 80048fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	330b      	adds	r3, #11
 8004902:	220f      	movs	r2, #15
 8004904:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	330c      	adds	r3, #12
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	331a      	adds	r3, #26
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	331b      	adds	r3, #27
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	1e5a      	subs	r2, r3, #1
 8004922:	4613      	mov	r3, r2
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	82fb      	strh	r3, [r7, #22]
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8004936:	8afb      	ldrh	r3, [r7, #22]
 8004938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800493c:	4293      	cmp	r3, r2
 800493e:	d007      	beq.n	8004950 <fit_lfn+0x70>
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	61fa      	str	r2, [r7, #28]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004950:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <fit_lfn+0xe4>)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	4413      	add	r3, r2
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4413      	add	r3, r2
 800495e:	8afa      	ldrh	r2, [r7, #22]
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	8afb      	ldrh	r3, [r7, #22]
 8004966:	0a1b      	lsrs	r3, r3, #8
 8004968:	b299      	uxth	r1, r3
 800496a:	4a16      	ldr	r2, [pc, #88]	; (80049c4 <fit_lfn+0xe4>)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	4413      	add	r3, r2
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	3301      	adds	r3, #1
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	4413      	add	r3, r2
 8004978:	b2ca      	uxtb	r2, r1
 800497a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800497c:	8afb      	ldrh	r3, [r7, #22]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <fit_lfn+0xa8>
 8004982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004986:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	3301      	adds	r3, #1
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d9d0      	bls.n	8004936 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004994:	8afb      	ldrh	r3, [r7, #22]
 8004996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800499a:	4293      	cmp	r3, r2
 800499c:	d006      	beq.n	80049ac <fit_lfn+0xcc>
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d103      	bne.n	80049b4 <fit_lfn+0xd4>
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	79fa      	ldrb	r2, [r7, #7]
 80049b8:	701a      	strb	r2, [r3, #0]
}
 80049ba:	bf00      	nop
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	08007cc0 	.word	0x08007cc0

080049c8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08c      	sub	sp, #48	; 0x30
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80049d6:	220b      	movs	r2, #11
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7fe fd22 	bl	8003424 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d92b      	bls.n	8004a3e <gen_numname+0x76>
		sr = seq;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80049ea:	e022      	b.n	8004a32 <gen_numname+0x6a>
			wc = *lfn++;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	1c9a      	adds	r2, r3, #2
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80049f6:	2300      	movs	r3, #0
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fa:	e017      	b.n	8004a2c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	005a      	lsls	r2, r3, #1
 8004a00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004a0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <gen_numname+0x5e>
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004a20:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004a24:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	3301      	adds	r3, #1
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	2b0f      	cmp	r3, #15
 8004a30:	d9e4      	bls.n	80049fc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1d8      	bne.n	80049ec <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004a3e:	2307      	movs	r3, #7
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	3330      	adds	r3, #48	; 0x30
 8004a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a56:	2b39      	cmp	r3, #57	; 0x39
 8004a58:	d904      	bls.n	8004a64 <gen_numname+0x9c>
 8004a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a5e:	3307      	adds	r3, #7
 8004a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	1e5a      	subs	r2, r3, #1
 8004a68:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a6a:	3330      	adds	r3, #48	; 0x30
 8004a6c:	443b      	add	r3, r7
 8004a6e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004a72:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1df      	bne.n	8004a42 <gen_numname+0x7a>
	ns[i] = '~';
 8004a82:	f107 0214 	add.w	r2, r7, #20
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	4413      	add	r3, r2
 8004a8a:	227e      	movs	r2, #126	; 0x7e
 8004a8c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004a8e:	2300      	movs	r3, #0
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
 8004a92:	e002      	b.n	8004a9a <gen_numname+0xd2>
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	3301      	adds	r3, #1
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d205      	bcs.n	8004aae <gen_numname+0xe6>
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	4413      	add	r3, r2
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d1f2      	bne.n	8004a94 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	2b07      	cmp	r3, #7
 8004ab2:	d807      	bhi.n	8004ac4 <gen_numname+0xfc>
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	62ba      	str	r2, [r7, #40]	; 0x28
 8004aba:	3330      	adds	r3, #48	; 0x30
 8004abc:	443b      	add	r3, r7
 8004abe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004ac2:	e000      	b.n	8004ac6 <gen_numname+0xfe>
 8004ac4:	2120      	movs	r1, #32
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	627a      	str	r2, [r7, #36]	; 0x24
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	460a      	mov	r2, r1
 8004ad2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	2b07      	cmp	r3, #7
 8004ad8:	d9e9      	bls.n	8004aae <gen_numname+0xe6>
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	3730      	adds	r7, #48	; 0x30
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004af0:	230b      	movs	r3, #11
 8004af2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	0852      	lsrs	r2, r2, #1
 8004afa:	01db      	lsls	r3, r3, #7
 8004afc:	4313      	orrs	r3, r2
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	1c59      	adds	r1, r3, #1
 8004b04:	6079      	str	r1, [r7, #4]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	4413      	add	r3, r2
 8004b0a:	73fb      	strb	r3, [r7, #15]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ed      	bne.n	8004af4 <sum_sfn+0x10>
	return sum;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff fbad 	bl	800428e <dir_sdi>
 8004b34:	4603      	mov	r3, r0
 8004b36:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <dir_find+0x1e>
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	e0b8      	b.n	8004cb4 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004b42:	23ff      	movs	r3, #255	; 0xff
 8004b44:	753b      	strb	r3, [r7, #20]
 8004b46:	7d3b      	ldrb	r3, [r7, #20]
 8004b48:	757b      	strb	r3, [r7, #21]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b54:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	4619      	mov	r1, r3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f7fe fee3 	bl	8003934 <move_window>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f040 8097 	bne.w	8004ca8 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004b8a:	7dbb      	ldrb	r3, [r7, #22]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <dir_find+0x72>
 8004b90:	2304      	movs	r3, #4
 8004b92:	75fb      	strb	r3, [r7, #23]
 8004b94:	e08d      	b.n	8004cb2 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	330b      	adds	r3, #11
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba0:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004ba2:	7dbb      	ldrb	r3, [r7, #22]
 8004ba4:	2be5      	cmp	r3, #229	; 0xe5
 8004ba6:	d007      	beq.n	8004bb8 <dir_find+0x94>
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <dir_find+0xa6>
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	2b0f      	cmp	r3, #15
 8004bb6:	d008      	beq.n	8004bca <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004bb8:	23ff      	movs	r3, #255	; 0xff
 8004bba:	757b      	strb	r3, [r7, #21]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bc6:	849a      	strh	r2, [r3, #36]	; 0x24
 8004bc8:	e063      	b.n	8004c92 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b0f      	cmp	r3, #15
 8004bce:	d137      	bne.n	8004c40 <dir_find+0x11c>
				if (dp->lfn) {
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d05a      	beq.n	8004c92 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004bdc:	7dbb      	ldrb	r3, [r7, #22]
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d010      	beq.n	8004c08 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	7b5b      	ldrb	r3, [r3, #13]
 8004bea:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8004bec:	7dbb      	ldrb	r3, [r7, #22]
 8004bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf2:	75bb      	strb	r3, [r7, #22]
 8004bf4:	7dbb      	ldrb	r3, [r7, #22]
 8004bf6:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfe:	88da      	ldrh	r2, [r3, #6]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c06:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8004c08:	7dba      	ldrb	r2, [r7, #22]
 8004c0a:	7d7b      	ldrb	r3, [r7, #21]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d114      	bne.n	8004c3a <dir_find+0x116>
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	330d      	adds	r3, #13
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	7d3a      	ldrb	r2, [r7, #20]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d10e      	bne.n	8004c3a <dir_find+0x116>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	6939      	ldr	r1, [r7, #16]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fdec 	bl	8004804 <cmp_lfn>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <dir_find+0x116>
 8004c32:	7d7b      	ldrb	r3, [r7, #21]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	e000      	b.n	8004c3c <dir_find+0x118>
 8004c3a:	23ff      	movs	r3, #255	; 0xff
 8004c3c:	757b      	strb	r3, [r7, #21]
 8004c3e:	e028      	b.n	8004c92 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004c40:	7d7b      	ldrb	r3, [r7, #21]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d107      	bne.n	8004c56 <dir_find+0x132>
 8004c46:	6938      	ldr	r0, [r7, #16]
 8004c48:	f7ff ff4c 	bl	8004ae4 <sum_sfn>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	461a      	mov	r2, r3
 8004c50:	7d3b      	ldrb	r3, [r7, #20]
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d02a      	beq.n	8004cac <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	330b      	adds	r3, #11
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10b      	bne.n	8004c82 <dir_find+0x15e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	220b      	movs	r2, #11
 8004c74:	4619      	mov	r1, r3
 8004c76:	6938      	ldr	r0, [r7, #16]
 8004c78:	f7fe fc0c 	bl	8003494 <mem_cmp>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004c82:	23ff      	movs	r3, #255	; 0xff
 8004c84:	757b      	strb	r3, [r7, #21]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c90:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004c92:	2100      	movs	r1, #0
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fbc8 	bl	800442a <dir_next>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f43f af58 	beq.w	8004b56 <dir_find+0x32>
 8004ca6:	e004      	b.n	8004cb2 <dir_find+0x18e>
		if (res != FR_OK) break;
 8004ca8:	bf00      	nop
 8004caa:	e002      	b.n	8004cb2 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004cac:	bf00      	nop
 8004cae:	e000      	b.n	8004cb2 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004cb0:	bf00      	nop

	return res;
 8004cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08c      	sub	sp, #48	; 0x30
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	623b      	str	r3, [r7, #32]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8004cd8:	f107 030c 	add.w	r3, r7, #12
 8004cdc:	220c      	movs	r2, #12
 8004cde:	6a39      	ldr	r1, [r7, #32]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe fb9f 	bl	8003424 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004ce6:	7dfb      	ldrb	r3, [r7, #23]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d03b      	beq.n	8004d68 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	330b      	adds	r3, #11
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfe:	461a      	mov	r2, r3
 8004d00:	2300      	movs	r3, #0
 8004d02:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8004d04:	2301      	movs	r3, #1
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d08:	e013      	b.n	8004d32 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004d0a:	f107 010c 	add.w	r1, r7, #12
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	6a38      	ldr	r0, [r7, #32]
 8004d14:	f7ff fe58 	bl	80049c8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ff03 	bl	8004b24 <dir_find>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d106      	bne.n	8004d3a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	3301      	adds	r3, #1
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	2b63      	cmp	r3, #99	; 0x63
 8004d36:	d9e8      	bls.n	8004d0a <dir_register+0x4e>
 8004d38:	e000      	b.n	8004d3c <dir_register+0x80>
			if (res != FR_OK) break;
 8004d3a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	2b64      	cmp	r3, #100	; 0x64
 8004d40:	d101      	bne.n	8004d46 <dir_register+0x8a>
 8004d42:	2307      	movs	r3, #7
 8004d44:	e0d8      	b.n	8004ef8 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d002      	beq.n	8004d54 <dir_register+0x98>
 8004d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d52:	e0d1      	b.n	8004ef8 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	330b      	adds	r3, #11
 8004d58:	7dfa      	ldrb	r2, [r7, #23]
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d62:	461a      	mov	r2, r3
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d014      	beq.n	8004d9c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8004d72:	2300      	movs	r3, #0
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d76:	e002      	b.n	8004d7e <dir_register+0xc2>
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f5      	bne.n	8004d78 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	3319      	adds	r3, #25
 8004d90:	4a5b      	ldr	r2, [pc, #364]	; (8004f00 <dir_register+0x244>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	089b      	lsrs	r3, r3, #2
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9a:	e001      	b.n	8004da0 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fc8b 	bl	80046be <dir_alloc>
 8004da8:	4603      	mov	r3, r0
 8004daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d15b      	bne.n	8004e6e <dir_register+0x1b2>
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	3b01      	subs	r3, #1
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d055      	beq.n	8004e6e <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc8:	88db      	ldrh	r3, [r3, #6]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fa5b 	bl	800428e <dir_sdi>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004dde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d143      	bne.n	8004e6e <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fe78 	bl	8004ae4 <sum_sfn>
 8004df4:	4603      	mov	r3, r0
 8004df6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	f7fe fd92 	bl	8003934 <move_window>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004e16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d126      	bne.n	8004e6c <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e24:	6a18      	ldr	r0, [r3, #32]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e2c:	6959      	ldr	r1, [r3, #20]
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	7efb      	ldrb	r3, [r7, #27]
 8004e34:	f7ff fd54 	bl	80048e0 <fit_lfn>
				dp->fs->wflag = 1;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e44:	2201      	movs	r2, #1
 8004e46:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8004e48:	2100      	movs	r1, #0
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff faed 	bl	800442a <dir_next>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004e56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d107      	bne.n	8004e6e <dir_register+0x1b2>
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	3b01      	subs	r3, #1
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1c6      	bne.n	8004df8 <dir_register+0x13c>
 8004e6a:	e000      	b.n	8004e6e <dir_register+0x1b2>
				if (res != FR_OK) break;
 8004e6c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d13e      	bne.n	8004ef4 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f7fe fd53 	bl	8003934 <move_window>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004e94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d12b      	bne.n	8004ef4 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fe fad9 	bl	8003460 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb4:	6958      	ldr	r0, [r3, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	220b      	movs	r2, #11
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	f7fe faaf 	bl	8003424 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	330b      	adds	r3, #11
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	330c      	adds	r3, #12
 8004edc:	f002 0218 	and.w	r2, r2, #24
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8004ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3730      	adds	r7, #48	; 0x30
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	4ec4ec4f 	.word	0x4ec4ec4f

08004f04 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	; 0x28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e002      	b.n	8004f1c <create_name+0x18>
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b2f      	cmp	r3, #47	; 0x2f
 8004f22:	d0f8      	beq.n	8004f16 <create_name+0x12>
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b5c      	cmp	r3, #92	; 0x5c
 8004f2a:	d0f4      	beq.n	8004f16 <create_name+0x12>
	lfn = dp->lfn;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	61ba      	str	r2, [r7, #24]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4413      	add	r3, r2
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f4e:	2b1f      	cmp	r3, #31
 8004f50:	d92f      	bls.n	8004fb2 <create_name+0xae>
 8004f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f54:	2b2f      	cmp	r3, #47	; 0x2f
 8004f56:	d02c      	beq.n	8004fb2 <create_name+0xae>
 8004f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f5a:	2b5c      	cmp	r3, #92	; 0x5c
 8004f5c:	d029      	beq.n	8004fb2 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2bfe      	cmp	r3, #254	; 0xfe
 8004f62:	d901      	bls.n	8004f68 <create_name+0x64>
			return FR_INVALID_NAME;
 8004f64:	2306      	movs	r3, #6
 8004f66:	e186      	b.n	8005276 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f70:	2101      	movs	r1, #1
 8004f72:	4618      	mov	r0, r3
 8004f74:	f002 f87e 	bl	8007074 <ff_convert>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004f7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <create_name+0x82>
 8004f82:	2306      	movs	r3, #6
 8004f84:	e177      	b.n	8005276 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8004f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f88:	2b7f      	cmp	r3, #127	; 0x7f
 8004f8a:	d809      	bhi.n	8004fa0 <create_name+0x9c>
 8004f8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f8e:	4619      	mov	r1, r3
 8004f90:	488e      	ldr	r0, [pc, #568]	; (80051cc <create_name+0x2c8>)
 8004f92:	f7fe faa5 	bl	80034e0 <chk_chr>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <create_name+0x9c>
			return FR_INVALID_NAME;
 8004f9c:	2306      	movs	r3, #6
 8004f9e:	e16a      	b.n	8005276 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	617a      	str	r2, [r7, #20]
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fae:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004fb0:	e7c5      	b.n	8004f3e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	441a      	add	r2, r3
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004fbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fbe:	2b1f      	cmp	r3, #31
 8004fc0:	d801      	bhi.n	8004fc6 <create_name+0xc2>
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	e000      	b.n	8004fc8 <create_name+0xc4>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8004fcc:	e011      	b.n	8004ff2 <create_name+0xee>
		w = lfn[di - 1];
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d002      	beq.n	8004fec <create_name+0xe8>
 8004fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8004fea:	d106      	bne.n	8004ffa <create_name+0xf6>
		di--;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1ea      	bne.n	8004fce <create_name+0xca>
 8004ff8:	e000      	b.n	8004ffc <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8004ffa:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <create_name+0x102>
 8005002:	2306      	movs	r3, #6
 8005004:	e137      	b.n	8005276 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	2200      	movs	r2, #0
 8005010:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	220b      	movs	r2, #11
 800501c:	2120      	movs	r1, #32
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fa1e 	bl	8003460 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005024:	2300      	movs	r3, #0
 8005026:	61bb      	str	r3, [r7, #24]
 8005028:	e002      	b.n	8005030 <create_name+0x12c>
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	3301      	adds	r3, #1
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	2b20      	cmp	r3, #32
 800503c:	d0f5      	beq.n	800502a <create_name+0x126>
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	2b2e      	cmp	r3, #46	; 0x2e
 800504a:	d0ee      	beq.n	800502a <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <create_name+0x162>
 8005052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005056:	f043 0303 	orr.w	r3, r3, #3
 800505a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800505e:	e002      	b.n	8005066 <create_name+0x162>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3b01      	subs	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <create_name+0x17c>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005072:	3b01      	subs	r3, #1
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	2b2e      	cmp	r3, #46	; 0x2e
 800507e:	d1ef      	bne.n	8005060 <create_name+0x15c>

	b = i = 0; ni = 8;
 8005080:	2300      	movs	r3, #0
 8005082:	623b      	str	r3, [r7, #32]
 8005084:	2300      	movs	r3, #0
 8005086:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800508a:	2308      	movs	r3, #8
 800508c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	61ba      	str	r2, [r7, #24]
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4413      	add	r3, r2
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800509e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8091 	beq.w	80051c8 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80050a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d006      	beq.n	80050ba <create_name+0x1b6>
 80050ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050ae:	2b2e      	cmp	r3, #46	; 0x2e
 80050b0:	d10a      	bne.n	80050c8 <create_name+0x1c4>
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d006      	beq.n	80050c8 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 80050ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050be:	f043 0303 	orr.w	r3, r3, #3
 80050c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80050c6:	e07e      	b.n	80051c6 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d203      	bcs.n	80050d8 <create_name+0x1d4>
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d123      	bne.n	8005120 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b0b      	cmp	r3, #11
 80050dc:	d106      	bne.n	80050ec <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 80050de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050e2:	f043 0303 	orr.w	r3, r3, #3
 80050e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80050ea:	e076      	b.n	80051da <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d005      	beq.n	8005100 <create_name+0x1fc>
 80050f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050f8:	f043 0303 	orr.w	r3, r3, #3
 80050fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	429a      	cmp	r2, r3
 8005106:	d867      	bhi.n	80051d8 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	2308      	movs	r3, #8
 800510e:	623b      	str	r3, [r7, #32]
 8005110:	230b      	movs	r3, #11
 8005112:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005114:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800511e:	e052      	b.n	80051c6 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005122:	2b7f      	cmp	r3, #127	; 0x7f
 8005124:	d914      	bls.n	8005150 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005128:	2100      	movs	r1, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f001 ffa2 	bl	8007074 <ff_convert>
 8005130:	4603      	mov	r3, r0
 8005132:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <create_name+0x240>
 800513a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800513c:	3b80      	subs	r3, #128	; 0x80
 800513e:	4a24      	ldr	r2, [pc, #144]	; (80051d0 <create_name+0x2cc>)
 8005140:	5cd3      	ldrb	r3, [r2, r3]
 8005142:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005148:	f043 0302 	orr.w	r3, r3, #2
 800514c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <create_name+0x262>
 8005156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005158:	4619      	mov	r1, r3
 800515a:	481e      	ldr	r0, [pc, #120]	; (80051d4 <create_name+0x2d0>)
 800515c:	f7fe f9c0 	bl	80034e0 <chk_chr>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005166:	235f      	movs	r3, #95	; 0x5f
 8005168:	84bb      	strh	r3, [r7, #36]	; 0x24
 800516a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800516e:	f043 0303 	orr.w	r3, r3, #3
 8005172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005176:	e01b      	b.n	80051b0 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800517a:	2b40      	cmp	r3, #64	; 0x40
 800517c:	d909      	bls.n	8005192 <create_name+0x28e>
 800517e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005180:	2b5a      	cmp	r3, #90	; 0x5a
 8005182:	d806      	bhi.n	8005192 <create_name+0x28e>
					b |= 2;
 8005184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005188:	f043 0302 	orr.w	r3, r3, #2
 800518c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005190:	e00e      	b.n	80051b0 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005194:	2b60      	cmp	r3, #96	; 0x60
 8005196:	d90b      	bls.n	80051b0 <create_name+0x2ac>
 8005198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800519a:	2b7a      	cmp	r3, #122	; 0x7a
 800519c:	d808      	bhi.n	80051b0 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800519e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80051aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051ac:	3b20      	subs	r3, #32
 80051ae:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	1c59      	adds	r1, r3, #1
 80051bc:	6239      	str	r1, [r7, #32]
 80051be:	4413      	add	r3, r2
 80051c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80051c6:	e762      	b.n	800508e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 80051c8:	bf00      	nop
 80051ca:	e006      	b.n	80051da <create_name+0x2d6>
 80051cc:	08007bcc 	.word	0x08007bcc
 80051d0:	08007c40 	.word	0x08007c40
 80051d4:	08007bd8 	.word	0x08007bd8
			if (si > di) break;			/* No extension */
 80051d8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2be5      	cmp	r3, #229	; 0xe5
 80051e6:	d105      	bne.n	80051f4 <create_name+0x2f0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2205      	movs	r2, #5
 80051f2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d104      	bne.n	8005204 <create_name+0x300>
 80051fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005204:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005208:	f003 030c 	and.w	r3, r3, #12
 800520c:	2b0c      	cmp	r3, #12
 800520e:	d005      	beq.n	800521c <create_name+0x318>
 8005210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	2b03      	cmp	r3, #3
 800521a:	d105      	bne.n	8005228 <create_name+0x324>
		cf |= NS_LFN;
 800521c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005220:	f043 0302 	orr.w	r3, r3, #2
 8005224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d117      	bne.n	8005264 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005234:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	2b01      	cmp	r3, #1
 800523e:	d105      	bne.n	800524c <create_name+0x348>
 8005240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005244:	f043 0310 	orr.w	r3, r3, #16
 8005248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800524c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	2b04      	cmp	r3, #4
 8005256:	d105      	bne.n	8005264 <create_name+0x360>
 8005258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800525c:	f043 0308 	orr.w	r3, r3, #8
 8005260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	330b      	adds	r3, #11
 800526e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005272:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005274:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005276:	4618      	mov	r0, r3
 8005278:	3728      	adds	r7, #40	; 0x28
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop

08005280 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b2f      	cmp	r3, #47	; 0x2f
 8005290:	d003      	beq.n	800529a <follow_path+0x1a>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b5c      	cmp	r3, #92	; 0x5c
 8005298:	d102      	bne.n	80052a0 <follow_path+0x20>
		path++;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	3301      	adds	r3, #1
 800529e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a6:	461a      	mov	r2, r3
 80052a8:	2300      	movs	r3, #0
 80052aa:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b1f      	cmp	r3, #31
 80052b2:	d80c      	bhi.n	80052ce <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80052b4:	2100      	movs	r1, #0
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fe ffe9 	bl	800428e <dir_sdi>
 80052bc:	4603      	mov	r3, r0
 80052be:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c6:	461a      	mov	r2, r3
 80052c8:	2300      	movs	r3, #0
 80052ca:	6153      	str	r3, [r2, #20]
 80052cc:	e049      	b.n	8005362 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80052ce:	463b      	mov	r3, r7
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff fe16 	bl	8004f04 <create_name>
 80052d8:	4603      	mov	r3, r0
 80052da:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d13a      	bne.n	8005358 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fc1e 	bl	8004b24 <dir_find>
 80052e8:	4603      	mov	r3, r0
 80052ea:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	7adb      	ldrb	r3, [r3, #11]
 80052f6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	2b04      	cmp	r3, #4
 8005302:	d12b      	bne.n	800535c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005304:	7bbb      	ldrb	r3, [r7, #14]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d126      	bne.n	800535c <follow_path+0xdc>
 800530e:	2305      	movs	r3, #5
 8005310:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005312:	e023      	b.n	800535c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005314:	7bbb      	ldrb	r3, [r7, #14]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d120      	bne.n	8005360 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	330b      	adds	r3, #11
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8005336:	2305      	movs	r3, #5
 8005338:	73fb      	strb	r3, [r7, #15]
 800533a:	e012      	b.n	8005362 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fa07 	bl	800475a <ld_clust>
 800534c:	4602      	mov	r2, r0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005354:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005356:	e7ba      	b.n	80052ce <follow_path+0x4e>
			if (res != FR_OK) break;
 8005358:	bf00      	nop
 800535a:	e002      	b.n	8005362 <follow_path+0xe2>
				break;
 800535c:	bf00      	nop
 800535e:	e000      	b.n	8005362 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005360:	bf00      	nop
		}
	}

	return res;
 8005362:	7bfb      	ldrb	r3, [r7, #15]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005374:	f04f 33ff 	mov.w	r3, #4294967295
 8005378:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d031      	beq.n	80053e6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e002      	b.n	8005390 <get_ldnumber+0x24>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	3301      	adds	r3, #1
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b1f      	cmp	r3, #31
 8005396:	d903      	bls.n	80053a0 <get_ldnumber+0x34>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b3a      	cmp	r3, #58	; 0x3a
 800539e:	d1f4      	bne.n	800538a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b3a      	cmp	r3, #58	; 0x3a
 80053a6:	d11c      	bne.n	80053e2 <get_ldnumber+0x76>
			tp = *path;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	60fa      	str	r2, [r7, #12]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	3b30      	subs	r3, #48	; 0x30
 80053b8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b09      	cmp	r3, #9
 80053be:	d80e      	bhi.n	80053de <get_ldnumber+0x72>
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d10a      	bne.n	80053de <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d107      	bne.n	80053de <get_ldnumber+0x72>
					vol = (int)i;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	3301      	adds	r3, #1
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	e002      	b.n	80053e8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80053e2:	2300      	movs	r3, #0
 80053e4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80053e6:	693b      	ldr	r3, [r7, #16]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc80      	pop	{r7}
 80053f0:	4770      	bx	lr
	...

080053f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005404:	2200      	movs	r2, #0
 8005406:	711a      	strb	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800540e:	461a      	mov	r2, r3
 8005410:	f04f 33ff 	mov.w	r3, #4294967295
 8005414:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005416:	6839      	ldr	r1, [r7, #0]
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7fe fa8b 	bl	8003934 <move_window>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <check_fs+0x34>
		return 3;
 8005424:	2303      	movs	r3, #3
 8005426:	e04a      	b.n	80054be <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800542e:	3301      	adds	r3, #1
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	b21a      	sxth	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800543c:	b21b      	sxth	r3, r3
 800543e:	4313      	orrs	r3, r2
 8005440:	b21b      	sxth	r3, r3
 8005442:	4a21      	ldr	r2, [pc, #132]	; (80054c8 <check_fs+0xd4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d001      	beq.n	800544c <check_fs+0x58>
		return 2;
 8005448:	2302      	movs	r3, #2
 800544a:	e038      	b.n	80054be <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3336      	adds	r3, #54	; 0x36
 8005450:	3303      	adds	r3, #3
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	061a      	lsls	r2, r3, #24
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3336      	adds	r3, #54	; 0x36
 800545a:	3302      	adds	r3, #2
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	4313      	orrs	r3, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	3236      	adds	r2, #54	; 0x36
 8005466:	3201      	adds	r2, #1
 8005468:	7812      	ldrb	r2, [r2, #0]
 800546a:	0212      	lsls	r2, r2, #8
 800546c:	4313      	orrs	r3, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005474:	4313      	orrs	r3, r2
 8005476:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800547a:	4a14      	ldr	r2, [pc, #80]	; (80054cc <check_fs+0xd8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d101      	bne.n	8005484 <check_fs+0x90>
		return 0;
 8005480:	2300      	movs	r3, #0
 8005482:	e01c      	b.n	80054be <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3352      	adds	r3, #82	; 0x52
 8005488:	3303      	adds	r3, #3
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	061a      	lsls	r2, r3, #24
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3352      	adds	r3, #82	; 0x52
 8005492:	3302      	adds	r3, #2
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	4313      	orrs	r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	3252      	adds	r2, #82	; 0x52
 800549e:	3201      	adds	r2, #1
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	0212      	lsls	r2, r2, #8
 80054a4:	4313      	orrs	r3, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054b2:	4a06      	ldr	r2, [pc, #24]	; (80054cc <check_fs+0xd8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d101      	bne.n	80054bc <check_fs+0xc8>
		return 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e000      	b.n	80054be <check_fs+0xca>

	return 1;
 80054bc:	2301      	movs	r3, #1
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	ffffaa55 	.word	0xffffaa55
 80054cc:	00544146 	.word	0x00544146

080054d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b096      	sub	sp, #88	; 0x58
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	4613      	mov	r3, r2
 80054dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80054e4:	68b8      	ldr	r0, [r7, #8]
 80054e6:	f7ff ff41 	bl	800536c <get_ldnumber>
 80054ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80054ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da01      	bge.n	80054f6 <find_volume+0x26>
 80054f2:	230b      	movs	r3, #11
 80054f4:	e311      	b.n	8005b1a <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80054f6:	4a98      	ldr	r2, [pc, #608]	; (8005758 <find_volume+0x288>)
 80054f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <find_volume+0x3a>
 8005506:	230c      	movs	r3, #12
 8005508:	e307      	b.n	8005b1a <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800550e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01c      	beq.n	8005556 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	4618      	mov	r0, r3
 8005526:	f7fd fedf 	bl	80032e8 <disk_status>
 800552a:	4603      	mov	r3, r0
 800552c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005530:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10c      	bne.n	8005556 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <find_volume+0x82>
 8005542:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800554e:	230a      	movs	r3, #10
 8005550:	e2e3      	b.n	8005b1a <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8005552:	2300      	movs	r3, #0
 8005554:	e2e1      	b.n	8005b1a <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800555c:	2200      	movs	r2, #0
 800555e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005562:	b2da      	uxtb	r2, r3
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	4618      	mov	r0, r3
 8005576:	f7fd fed1 	bl	800331c <disk_initialize>
 800557a:	4603      	mov	r3, r0
 800557c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800558c:	2303      	movs	r3, #3
 800558e:	e2c4      	b.n	8005b1a <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d007      	beq.n	80055a6 <find_volume+0xd6>
 8005596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80055a2:	230a      	movs	r3, #10
 80055a4:	e2b9      	b.n	8005b1a <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ac:	7858      	ldrb	r0, [r3, #1]
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b4:	330a      	adds	r3, #10
 80055b6:	461a      	mov	r2, r3
 80055b8:	2102      	movs	r1, #2
 80055ba:	f7fd ff15 	bl	80033e8 <disk_ioctl>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10d      	bne.n	80055e0 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ca:	895b      	ldrh	r3, [r3, #10]
 80055cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d0:	d306      	bcc.n	80055e0 <find_volume+0x110>
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d8:	895b      	ldrh	r3, [r3, #10]
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055de:	d901      	bls.n	80055e4 <find_volume+0x114>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e29a      	b.n	8005b1a <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80055e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055ec:	f7ff ff02 	bl	80053f4 <check_fs>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80055f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d153      	bne.n	80056a6 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80055fe:	2300      	movs	r3, #0
 8005600:	643b      	str	r3, [r7, #64]	; 0x40
 8005602:	e028      	b.n	8005656 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800560e:	4413      	add	r3, r2
 8005610:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	3304      	adds	r3, #4
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d012      	beq.n	8005642 <find_volume+0x172>
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	330b      	adds	r3, #11
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	061a      	lsls	r2, r3, #24
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	330a      	adds	r3, #10
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	4313      	orrs	r3, r2
 800562e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005630:	3209      	adds	r2, #9
 8005632:	7812      	ldrb	r2, [r2, #0]
 8005634:	0212      	lsls	r2, r2, #8
 8005636:	4313      	orrs	r3, r2
 8005638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563a:	3208      	adds	r2, #8
 800563c:	7812      	ldrb	r2, [r2, #0]
 800563e:	431a      	orrs	r2, r3
 8005640:	e000      	b.n	8005644 <find_volume+0x174>
 8005642:	2200      	movs	r2, #0
 8005644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	3358      	adds	r3, #88	; 0x58
 800564a:	443b      	add	r3, r7
 800564c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005652:	3301      	adds	r3, #1
 8005654:	643b      	str	r3, [r7, #64]	; 0x40
 8005656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005658:	2b03      	cmp	r3, #3
 800565a:	d9d3      	bls.n	8005604 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800565c:	2300      	movs	r3, #0
 800565e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <find_volume+0x19c>
 8005666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005668:	3b01      	subs	r3, #1
 800566a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800566c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	3358      	adds	r3, #88	; 0x58
 8005672:	443b      	add	r3, r7
 8005674:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005678:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800567a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <find_volume+0x1bc>
 8005680:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005682:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005684:	f7ff feb6 	bl	80053f4 <check_fs>
 8005688:	4603      	mov	r3, r0
 800568a:	e000      	b.n	800568e <find_volume+0x1be>
 800568c:	2302      	movs	r3, #2
 800568e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005692:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <find_volume+0x1d6>
 800569a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800569c:	3301      	adds	r3, #1
 800569e:	643b      	str	r3, [r7, #64]	; 0x40
 80056a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d9e2      	bls.n	800566c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80056a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d101      	bne.n	80056b2 <find_volume+0x1e2>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e233      	b.n	8005b1a <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80056b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <find_volume+0x1ee>
 80056ba:	230d      	movs	r3, #13
 80056bc:	e22d      	b.n	8005b1a <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	7b1b      	ldrb	r3, [r3, #12]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	b21a      	sxth	r2, r3
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	7adb      	ldrb	r3, [r3, #11]
 80056ca:	b21b      	sxth	r3, r3
 80056cc:	4313      	orrs	r3, r2
 80056ce:	b21a      	sxth	r2, r3
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d6:	895b      	ldrh	r3, [r3, #10]
 80056d8:	b21b      	sxth	r3, r3
 80056da:	429a      	cmp	r2, r3
 80056dc:	d001      	beq.n	80056e2 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80056de:	230d      	movs	r3, #13
 80056e0:	e21b      	b.n	8005b1a <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	7ddb      	ldrb	r3, [r3, #23]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	b21a      	sxth	r2, r3
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	7d9b      	ldrb	r3, [r3, #22]
 80056ee:	b21b      	sxth	r3, r3
 80056f0:	4313      	orrs	r3, r2
 80056f2:	b21b      	sxth	r3, r3
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80056f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d112      	bne.n	8005724 <find_volume+0x254>
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005704:	061a      	lsls	r2, r3, #24
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	4313      	orrs	r3, r2
 8005710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005712:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005716:	0212      	lsls	r2, r2, #8
 8005718:	4313      	orrs	r3, r2
 800571a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800571c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005720:	4313      	orrs	r3, r2
 8005722:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800572a:	461a      	mov	r2, r3
 800572c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572e:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	7c1a      	ldrb	r2, [r3, #16]
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005742:	78db      	ldrb	r3, [r3, #3]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d009      	beq.n	800575c <find_volume+0x28c>
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574e:	78db      	ldrb	r3, [r3, #3]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d003      	beq.n	800575c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8005754:	230d      	movs	r3, #13
 8005756:	e1e0      	b.n	8005b1a <find_volume+0x64a>
 8005758:	200025b8 	.word	0x200025b8
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005762:	78db      	ldrb	r3, [r3, #3]
 8005764:	461a      	mov	r2, r3
 8005766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005768:	fb02 f303 	mul.w	r3, r2, r3
 800576c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	7b5a      	ldrb	r2, [r3, #13]
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005778:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005780:	789b      	ldrb	r3, [r3, #2]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00c      	beq.n	80057a0 <find_volume+0x2d0>
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578c:	789b      	ldrb	r3, [r3, #2]
 800578e:	461a      	mov	r2, r3
 8005790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005796:	789b      	ldrb	r3, [r3, #2]
 8005798:	3b01      	subs	r3, #1
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 80057a0:	230d      	movs	r3, #13
 80057a2:	e1ba      	b.n	8005b1a <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80057a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a6:	7c9b      	ldrb	r3, [r3, #18]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	b21a      	sxth	r2, r3
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	7c5b      	ldrb	r3, [r3, #17]
 80057b0:	b21b      	sxth	r3, r3
 80057b2:	4313      	orrs	r3, r2
 80057b4:	b21b      	sxth	r3, r3
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057be:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c6:	891b      	ldrh	r3, [r3, #8]
 80057c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057ce:	8952      	ldrh	r2, [r2, #10]
 80057d0:	0952      	lsrs	r2, r2, #5
 80057d2:	b292      	uxth	r2, r2
 80057d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80057d8:	fb01 f202 	mul.w	r2, r1, r2
 80057dc:	1a9b      	subs	r3, r3, r2
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80057e4:	230d      	movs	r3, #13
 80057e6:	e198      	b.n	8005b1a <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	7d1b      	ldrb	r3, [r3, #20]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	b21a      	sxth	r2, r3
 80057f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f2:	7cdb      	ldrb	r3, [r3, #19]
 80057f4:	b21b      	sxth	r3, r3
 80057f6:	4313      	orrs	r3, r2
 80057f8:	b21b      	sxth	r3, r3
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80057fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005800:	2b00      	cmp	r3, #0
 8005802:	d112      	bne.n	800582a <find_volume+0x35a>
 8005804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005806:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800580a:	061a      	lsls	r2, r3, #24
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	4313      	orrs	r3, r2
 8005816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005818:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800581c:	0212      	lsls	r2, r2, #8
 800581e:	4313      	orrs	r3, r2
 8005820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005822:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005826:	4313      	orrs	r3, r2
 8005828:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	7bdb      	ldrb	r3, [r3, #15]
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	b21a      	sxth	r2, r3
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	7b9b      	ldrb	r3, [r3, #14]
 8005836:	b21b      	sxth	r3, r3
 8005838:	4313      	orrs	r3, r2
 800583a:	b21b      	sxth	r3, r3
 800583c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800583e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <find_volume+0x378>
 8005844:	230d      	movs	r3, #13
 8005846:	e168      	b.n	8005b1a <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005848:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800584a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584c:	4413      	add	r3, r2
 800584e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005850:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005854:	8911      	ldrh	r1, [r2, #8]
 8005856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005858:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800585c:	8952      	ldrh	r2, [r2, #10]
 800585e:	0952      	lsrs	r2, r2, #5
 8005860:	b292      	uxth	r2, r2
 8005862:	fbb1 f2f2 	udiv	r2, r1, r2
 8005866:	b292      	uxth	r2, r2
 8005868:	4413      	add	r3, r2
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800586c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	429a      	cmp	r2, r3
 8005872:	d201      	bcs.n	8005878 <find_volume+0x3a8>
 8005874:	230d      	movs	r3, #13
 8005876:	e150      	b.n	8005b1a <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005880:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005884:	7892      	ldrb	r2, [r2, #2]
 8005886:	fbb3 f3f2 	udiv	r3, r3, r2
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <find_volume+0x3c6>
 8005892:	230d      	movs	r3, #13
 8005894:	e141      	b.n	8005b1a <find_volume+0x64a>
	fmt = FS_FAT12;
 8005896:	2301      	movs	r3, #1
 8005898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	f640 72f5 	movw	r2, #4085	; 0xff5
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d902      	bls.n	80058ac <find_volume+0x3dc>
 80058a6:	2302      	movs	r3, #2
 80058a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d902      	bls.n	80058bc <find_volume+0x3ec>
 80058b6:	2303      	movs	r3, #3
 80058b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	3302      	adds	r3, #2
 80058c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058c6:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ce:	461a      	mov	r2, r3
 80058d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d2:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80058d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d8:	4413      	add	r3, r2
 80058da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058e0:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80058e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	4413      	add	r3, r2
 80058e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058ee:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 80058f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d124      	bne.n	8005942 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058fe:	891b      	ldrh	r3, [r3, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <find_volume+0x438>
 8005904:	230d      	movs	r3, #13
 8005906:	e108      	b.n	8005b1a <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800590e:	061a      	lsls	r2, r3, #24
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005916:	041b      	lsls	r3, r3, #16
 8005918:	4313      	orrs	r3, r2
 800591a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800591c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005920:	0212      	lsls	r2, r2, #8
 8005922:	4313      	orrs	r3, r2
 8005924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005926:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800592a:	4313      	orrs	r3, r2
 800592c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800592e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005932:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	647b      	str	r3, [r7, #68]	; 0x44
 8005940:	e02b      	b.n	800599a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005948:	891b      	ldrh	r3, [r3, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <find_volume+0x482>
 800594e:	230d      	movs	r3, #13
 8005950:	e0e3      	b.n	8005b1a <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005958:	6a1a      	ldr	r2, [r3, #32]
 800595a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595c:	4413      	add	r3, r2
 800595e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005960:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005964:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005966:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800596a:	2b02      	cmp	r3, #2
 800596c:	d105      	bne.n	800597a <find_volume+0x4aa>
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	e00e      	b.n	8005998 <find_volume+0x4c8>
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	4613      	mov	r3, r2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	4413      	add	r3, r2
 8005988:	085a      	lsrs	r2, r3, #1
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005998:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a8:	895b      	ldrh	r3, [r3, #10]
 80059aa:	4619      	mov	r1, r3
 80059ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ae:	440b      	add	r3, r1
 80059b0:	3b01      	subs	r3, #1
 80059b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059b4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80059b8:	8949      	ldrh	r1, [r1, #10]
 80059ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80059be:	429a      	cmp	r2, r3
 80059c0:	d201      	bcs.n	80059c6 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 80059c2:	230d      	movs	r3, #13
 80059c4:	e0a9      	b.n	8005b1a <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059cc:	461a      	mov	r2, r3
 80059ce:	f04f 33ff 	mov.w	r3, #4294967295
 80059d2:	6113      	str	r3, [r2, #16]
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80059e2:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ea:	2280      	movs	r2, #128	; 0x80
 80059ec:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80059ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d17a      	bne.n	8005aec <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	b21a      	sxth	r2, r3
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a06:	b21b      	sxth	r3, r3
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	b21b      	sxth	r3, r3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d16d      	bne.n	8005aec <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a12:	3301      	adds	r3, #1
 8005a14:	4619      	mov	r1, r3
 8005a16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a18:	f7fd ff8c 	bl	8003934 <move_window>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d164      	bne.n	8005aec <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a28:	2200      	movs	r2, #0
 8005a2a:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8005a32:	021b      	lsls	r3, r3, #8
 8005a34:	b21a      	sxth	r2, r3
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005a3c:	b21b      	sxth	r3, r3
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	b21b      	sxth	r3, r3
 8005a42:	4a38      	ldr	r2, [pc, #224]	; (8005b24 <find_volume+0x654>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d151      	bne.n	8005aec <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	78db      	ldrb	r3, [r3, #3]
 8005a4c:	061a      	lsls	r2, r3, #24
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	789b      	ldrb	r3, [r3, #2]
 8005a52:	041b      	lsls	r3, r3, #16
 8005a54:	4313      	orrs	r3, r2
 8005a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a58:	7852      	ldrb	r2, [r2, #1]
 8005a5a:	0212      	lsls	r2, r2, #8
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a60:	7812      	ldrb	r2, [r2, #0]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	4a30      	ldr	r2, [pc, #192]	; (8005b28 <find_volume+0x658>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d140      	bne.n	8005aec <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005a70:	061a      	lsls	r2, r3, #24
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005a78:	041b      	lsls	r3, r3, #16
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a7e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005a82:	0212      	lsls	r2, r2, #8
 8005a84:	4313      	orrs	r3, r2
 8005a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a88:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	4a27      	ldr	r2, [pc, #156]	; (8005b2c <find_volume+0x65c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d12b      	bne.n	8005aec <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005a9a:	061a      	lsls	r2, r3, #24
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8005aa2:	041b      	lsls	r3, r3, #16
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aa8:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005aac:	0212      	lsls	r2, r2, #8
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ab2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005abe:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005ac6:	061a      	lsls	r2, r3, #24
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ad4:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8005ad8:	0212      	lsls	r2, r2, #8
 8005ada:	4313      	orrs	r3, r2
 8005adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ade:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ae6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005aea:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af2:	461a      	mov	r2, r3
 8005af4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005af8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8005afa:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <find_volume+0x660>)
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	3301      	adds	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <find_volume+0x660>)
 8005b04:	801a      	strh	r2, [r3, #0]
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <find_volume+0x660>)
 8005b08:	881a      	ldrh	r2, [r3, #0]
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b10:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005b12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b14:	f7fd fe92 	bl	800383c <clear_lock>
#endif

	return FR_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3758      	adds	r7, #88	; 0x58
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	ffffaa55 	.word	0xffffaa55
 8005b28:	41615252 	.word	0x41615252
 8005b2c:	61417272 	.word	0x61417272
 8005b30:	200025bc 	.word	0x200025bc

08005b34 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d02a      	beq.n	8005b9c <validate+0x68>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d024      	beq.n	8005b9c <validate+0x68>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01b      	beq.n	8005b9c <validate+0x68>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b70:	88da      	ldrh	r2, [r3, #6]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b78:	889b      	ldrh	r3, [r3, #4]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d10e      	bne.n	8005b9c <validate+0x68>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fd fbab 	bl	80032e8 <disk_status>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8005b9c:	2309      	movs	r3, #9
 8005b9e:	e000      	b.n	8005ba2 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005bbe:	f107 0310 	add.w	r3, r7, #16
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff fbd2 	bl	800536c <get_ldnumber>
 8005bc8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	da01      	bge.n	8005bd4 <f_mount+0x28>
 8005bd0:	230b      	movs	r3, #11
 8005bd2:	e02f      	b.n	8005c34 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005bd4:	4a19      	ldr	r2, [pc, #100]	; (8005c3c <f_mount+0x90>)
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bdc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d007      	beq.n	8005bf4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8005be4:	69b8      	ldr	r0, [r7, #24]
 8005be6:	f7fd fe29 	bl	800383c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	490d      	ldr	r1, [pc, #52]	; (8005c3c <f_mount+0x90>)
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <f_mount+0x6e>
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d001      	beq.n	8005c1e <f_mount+0x72>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e00a      	b.n	8005c34 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005c1e:	f107 0108 	add.w	r1, r7, #8
 8005c22:	f107 030c 	add.w	r3, r7, #12
 8005c26:	2200      	movs	r2, #0
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff fc51 	bl	80054d0 <find_volume>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	200025b8 	.word	0x200025b8

08005c40 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c4e:	f843 0c4c 	str.w	r0, [r3, #-76]
 8005c52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c56:	f843 1c50 	str.w	r1, [r3, #-80]
 8005c5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c5e:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005c62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c66:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <f_open+0x32>
 8005c6e:	2309      	movs	r3, #9
 8005c70:	e2f7      	b.n	8006262 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8005c72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c76:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c7e:	461a      	mov	r2, r3
 8005c80:	2300      	movs	r3, #0
 8005c82:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005c84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c8e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005c92:	f003 031f 	and.w	r3, r3, #31
 8005c96:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005c9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c9e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	f107 0118 	add.w	r1, r7, #24
 8005cac:	3910      	subs	r1, #16
 8005cae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005cb2:	3b18      	subs	r3, #24
 8005cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff fc09 	bl	80054d0 <find_volume>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005cc4:	f102 0217 	add.w	r2, r2, #23
 8005cc8:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005cca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005cce:	f103 0317 	add.w	r3, r3, #23
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 82bf 	bne.w	8006258 <f_open+0x618>
		INIT_BUF(dj);
 8005cda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f107 0318 	add.w	r3, r7, #24
 8005ce4:	3b04      	subs	r3, #4
 8005ce6:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 8005cea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cee:	461a      	mov	r2, r3
 8005cf0:	4bd4      	ldr	r3, [pc, #848]	; (8006044 <f_open+0x404>)
 8005cf2:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8005cf6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cfa:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8005cfe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d02:	3b18      	subs	r3, #24
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff faba 	bl	8005280 <follow_path>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d12:	f102 0217 	add.w	r2, r2, #23
 8005d16:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8005d18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d1c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8005d20:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d24:	f102 0210 	add.w	r2, r2, #16
 8005d28:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005d2a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005d2e:	f103 0317 	add.w	r3, r3, #23
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d126      	bne.n	8005d86 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8005d38:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005d3c:	f103 0310 	add.w	r3, r3, #16
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <f_open+0x114>
				res = FR_INVALID_NAME;
 8005d46:	2306      	movs	r3, #6
 8005d48:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d4c:	f102 0217 	add.w	r2, r2, #23
 8005d50:	7013      	strb	r3, [r2, #0]
 8005d52:	e018      	b.n	8005d86 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d58:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf14      	ite	ne
 8005d64:	2301      	movne	r3, #1
 8005d66:	2300      	moveq	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d70:	3b18      	subs	r3, #24
 8005d72:	4611      	mov	r1, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fd fbcd 	bl	8003514 <chk_lock>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d80:	f102 0217 	add.w	r2, r2, #23
 8005d84:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005d86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d8a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005d8e:	f003 031c 	and.w	r3, r3, #28
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 813c 	beq.w	8006010 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8005d98:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005d9c:	f103 0317 	add.w	r3, r3, #23
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d02e      	beq.n	8005e04 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005da6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005daa:	f103 0317 	add.w	r3, r3, #23
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d112      	bne.n	8005dda <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005db4:	f7fd fc1e 	bl	80035f4 <enq_lock>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <f_open+0x18e>
 8005dbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005dc2:	3b18      	subs	r3, #24
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fe ff79 	bl	8004cbc <dir_register>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	e000      	b.n	8005dd0 <f_open+0x190>
 8005dce:	2312      	movs	r3, #18
 8005dd0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005dd4:	f102 0217 	add.w	r2, r2, #23
 8005dd8:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005dda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005dde:	461a      	mov	r2, r3
 8005de0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005de4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005de8:	f043 0308 	orr.w	r3, r3, #8
 8005dec:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8005df0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005df4:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8005df8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005dfc:	f102 0210 	add.w	r2, r2, #16
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e01f      	b.n	8005e44 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005e04:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e08:	f103 0310 	add.w	r3, r3, #16
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330b      	adds	r3, #11
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	f003 0311 	and.w	r3, r3, #17
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d006      	beq.n	8005e28 <f_open+0x1e8>
					res = FR_DENIED;
 8005e1a:	2307      	movs	r3, #7
 8005e1c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e20:	f102 0217 	add.w	r2, r2, #23
 8005e24:	7013      	strb	r3, [r2, #0]
 8005e26:	e00d      	b.n	8005e44 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005e28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e2c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <f_open+0x204>
						res = FR_EXIST;
 8005e38:	2308      	movs	r3, #8
 8005e3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e3e:	f102 0217 	add.w	r2, r2, #23
 8005e42:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005e44:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e48:	f103 0317 	add.w	r3, r3, #23
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f040 8113 	bne.w	800607a <f_open+0x43a>
 8005e54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e58:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 810a 	beq.w	800607a <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8005e66:	f7fd f9e3 	bl	8003230 <get_fattime>
 8005e6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e6e:	f103 030c 	add.w	r3, r3, #12
 8005e72:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005e74:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e78:	f103 0310 	add.w	r3, r3, #16
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	330e      	adds	r3, #14
 8005e80:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e84:	f102 020c 	add.w	r2, r2, #12
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e92:	f103 030c 	add.w	r3, r3, #12
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ea2:	f103 0310 	add.w	r3, r3, #16
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330f      	adds	r3, #15
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005eb2:	f103 030c 	add.w	r3, r3, #12
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	0c1a      	lsrs	r2, r3, #16
 8005eba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ebe:	f103 0310 	add.w	r3, r3, #16
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3310      	adds	r3, #16
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ece:	f103 030c 	add.w	r3, r3, #12
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	0e1a      	lsrs	r2, r3, #24
 8005ed6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005eda:	f103 0310 	add.w	r3, r3, #16
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3311      	adds	r3, #17
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005ee6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005eea:	f103 0310 	add.w	r3, r3, #16
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	330b      	adds	r3, #11
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005ef6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005efa:	f103 0310 	add.w	r3, r3, #16
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	331c      	adds	r3, #28
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f0a:	f103 0310 	add.w	r3, r3, #16
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	331d      	adds	r3, #29
 8005f12:	2200      	movs	r2, #0
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f1a:	f103 0310 	add.w	r3, r3, #16
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	331e      	adds	r3, #30
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f2a:	f103 0310 	add.w	r3, r3, #16
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	331f      	adds	r3, #31
 8005f32:	2200      	movs	r2, #0
 8005f34:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005f36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f3a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005f3e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f42:	f102 0210 	add.w	r2, r2, #16
 8005f46:	6811      	ldr	r1, [r2, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe fc06 	bl	800475a <ld_clust>
 8005f4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f52:	f103 0308 	add.w	r3, r3, #8
 8005f56:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8005f58:	2100      	movs	r1, #0
 8005f5a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f5e:	f103 0310 	add.w	r3, r3, #16
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	f7fe fc27 	bl	80047b6 <st_clust>
				dj.fs->wflag = 1;
 8005f68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f6c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f74:	2201      	movs	r2, #1
 8005f76:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8005f78:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f7c:	f103 0308 	add.w	r3, r3, #8
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d079      	beq.n	800607a <f_open+0x43a>
					dw = dj.fs->winsect;
 8005f86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f8a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f98:	f102 020c 	add.w	r2, r2, #12
 8005f9c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8005f9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fa2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005fa6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005faa:	f102 0208 	add.w	r2, r2, #8
 8005fae:	6811      	ldr	r1, [r2, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe f823 	bl	8003ffc <remove_chain>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005fbc:	f102 0217 	add.w	r2, r2, #23
 8005fc0:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8005fc2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005fc6:	f103 0317 	add.w	r3, r3, #23
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d154      	bne.n	800607a <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005fd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fd4:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8005fd8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005fdc:	f103 0308 	add.w	r3, r3, #8
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fe8:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8005fea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fee:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8005ff2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005ff6:	f102 020c 	add.w	r2, r2, #12
 8005ffa:	6811      	ldr	r1, [r2, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fd fc99 	bl	8003934 <move_window>
 8006002:	4603      	mov	r3, r0
 8006004:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006008:	f102 0217 	add.w	r2, r2, #23
 800600c:	7013      	strb	r3, [r2, #0]
 800600e:	e034      	b.n	800607a <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006010:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006014:	f103 0317 	add.w	r3, r3, #23
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d12d      	bne.n	800607a <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800601e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006022:	f103 0310 	add.w	r3, r3, #16
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330b      	adds	r3, #11
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b00      	cmp	r3, #0
 8006032:	d009      	beq.n	8006048 <f_open+0x408>
					res = FR_NO_FILE;
 8006034:	2304      	movs	r3, #4
 8006036:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800603a:	f102 0217 	add.w	r2, r2, #23
 800603e:	7013      	strb	r3, [r2, #0]
 8006040:	e01b      	b.n	800607a <f_open+0x43a>
 8006042:	bf00      	nop
 8006044:	200025d8 	.word	0x200025d8
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006048:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800604c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d010      	beq.n	800607a <f_open+0x43a>
 8006058:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800605c:	f103 0310 	add.w	r3, r3, #16
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	330b      	adds	r3, #11
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <f_open+0x43a>
						res = FR_DENIED;
 800606e:	2307      	movs	r3, #7
 8006070:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006074:	f102 0217 	add.w	r2, r2, #23
 8006078:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800607a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800607e:	f103 0317 	add.w	r3, r3, #23
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d157      	bne.n	8006138 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006088:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800608c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006090:	f003 0308 	and.w	r3, r3, #8
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <f_open+0x46e>
				mode |= FA__WRITTEN;
 8006098:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800609c:	461a      	mov	r2, r3
 800609e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060a2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80060a6:	f043 0320 	orr.w	r3, r3, #32
 80060aa:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80060ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060b2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80060b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80060c0:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80060c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060c8:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 80060ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060ce:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80060d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d6:	461a      	mov	r2, r3
 80060d8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80060dc:	f103 0310 	add.w	r3, r3, #16
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060e8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	bf14      	ite	ne
 80060f4:	2301      	movne	r3, #1
 80060f6:	2300      	moveq	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006100:	3b18      	subs	r3, #24
 8006102:	4611      	mov	r1, r2
 8006104:	4618      	mov	r0, r3
 8006106:	f7fd fa99 	bl	800363c <inc_lock>
 800610a:	4602      	mov	r2, r0
 800610c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006110:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006118:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800611a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800611e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006128:	2b00      	cmp	r3, #0
 800612a:	d105      	bne.n	8006138 <f_open+0x4f8>
 800612c:	2302      	movs	r3, #2
 800612e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006132:	f102 0217 	add.w	r2, r2, #23
 8006136:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006138:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800613c:	f103 0317 	add.w	r3, r3, #23
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	f040 8088 	bne.w	8006258 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8006148:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800614c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006154:	461a      	mov	r2, r3
 8006156:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800615a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800615e:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8006160:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006164:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616c:	2200      	movs	r2, #0
 800616e:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006170:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006174:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006178:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800617c:	f102 0210 	add.w	r2, r2, #16
 8006180:	6811      	ldr	r1, [r2, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe fae9 	bl	800475a <ld_clust>
 8006188:	4602      	mov	r2, r0
 800618a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800618e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006196:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006198:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800619c:	f103 0310 	add.w	r3, r3, #16
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	331f      	adds	r3, #31
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	061a      	lsls	r2, r3, #24
 80061a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80061ac:	f103 0310 	add.w	r3, r3, #16
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	331e      	adds	r3, #30
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	041b      	lsls	r3, r3, #16
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80061be:	f102 0210 	add.w	r2, r2, #16
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	321d      	adds	r2, #29
 80061c6:	7812      	ldrb	r2, [r2, #0]
 80061c8:	0212      	lsls	r2, r2, #8
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80061d0:	f102 0210 	add.w	r2, r2, #16
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	321c      	adds	r2, #28
 80061d8:	7812      	ldrb	r2, [r2, #0]
 80061da:	4313      	orrs	r3, r2
 80061dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80061e0:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80061e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061e8:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80061ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061ee:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80061f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061f6:	461a      	mov	r2, r3
 80061f8:	2300      	movs	r3, #0
 80061fa:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80061fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006200:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006208:	461a      	mov	r2, r3
 800620a:	2300      	movs	r3, #0
 800620c:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800620e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006212:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621a:	461a      	mov	r2, r3
 800621c:	2300      	movs	r3, #0
 800621e:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006220:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006224:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8006228:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800622c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006230:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006234:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8006236:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800623a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800623e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006248:	88da      	ldrh	r2, [r3, #6]
 800624a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800624e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006256:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006258:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800625c:	f103 0317 	add.w	r3, r3, #23
 8006260:	781b      	ldrb	r3, [r3, #0]
}
 8006262:	4618      	mov	r0, r3
 8006264:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop

08006270 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08c      	sub	sp, #48	; 0x30
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff fc53 	bl	8005b34 <validate>
 800628e:	4603      	mov	r3, r0
 8006290:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006292:	7ffb      	ldrb	r3, [r7, #31]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <f_read+0x2c>
 8006298:	7ffb      	ldrb	r3, [r7, #31]
 800629a:	e1cd      	b.n	8006638 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a2:	79db      	ldrb	r3, [r3, #7]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d004      	beq.n	80062b2 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ae:	79db      	ldrb	r3, [r3, #7]
 80062b0:	e1c2      	b.n	8006638 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b8:	799b      	ldrb	r3, [r3, #6]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80062c2:	2307      	movs	r3, #7
 80062c4:	e1b8      	b.n	8006638 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	429a      	cmp	r2, r3
 80062e0:	f240 81a5 	bls.w	800662e <f_read+0x3be>
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80062e8:	e1a1      	b.n	800662e <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062fe:	8952      	ldrh	r2, [r2, #10]
 8006300:	fbb3 f1f2 	udiv	r1, r3, r2
 8006304:	fb01 f202 	mul.w	r2, r1, r2
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	2b00      	cmp	r3, #0
 800630c:	f040 8140 	bne.w	8006590 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006324:	8952      	ldrh	r2, [r2, #10]
 8006326:	fbb3 f3f2 	udiv	r3, r3, r2
 800632a:	b2da      	uxtb	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006338:	789b      	ldrb	r3, [r3, #2]
 800633a:	3b01      	subs	r3, #1
 800633c:	b2db      	uxtb	r3, r3
 800633e:	4013      	ands	r3, r2
 8006340:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006342:	7dfb      	ldrb	r3, [r7, #23]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d143      	bne.n	80063d0 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d105      	bne.n	8006360 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800635e:	e01c      	b.n	800639a <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d009      	beq.n	8006380 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	4619      	mov	r1, r3
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7fd ff49 	bl	800420e <clmt_clust>
 800637c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800637e:	e00c      	b.n	800639a <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	4619      	mov	r1, r3
 8006392:	4610      	mov	r0, r2
 8006394:	f7fd fbe3 	bl	8003b5e <get_fat>
 8006398:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	2b01      	cmp	r3, #1
 800639e:	d806      	bhi.n	80063ae <f_read+0x13e>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a6:	2202      	movs	r2, #2
 80063a8:	71da      	strb	r2, [r3, #7]
 80063aa:	2302      	movs	r3, #2
 80063ac:	e144      	b.n	8006638 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d106      	bne.n	80063c4 <f_read+0x154>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063bc:	2201      	movs	r2, #1
 80063be:	71da      	strb	r2, [r3, #7]
 80063c0:	2301      	movs	r3, #1
 80063c2:	e139      	b.n	8006638 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ca:	461a      	mov	r2, r3
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	4619      	mov	r1, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	f7fd fb97 	bl	8003b16 <clust2sect>
 80063e8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <f_read+0x18e>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063f6:	2202      	movs	r2, #2
 80063f8:	71da      	strb	r2, [r3, #7]
 80063fa:	2302      	movs	r3, #2
 80063fc:	e11c      	b.n	8006638 <f_read+0x3c8>
			sect += csect;
 80063fe:	7dfb      	ldrb	r3, [r7, #23]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4413      	add	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006412:	895b      	ldrh	r3, [r3, #10]
 8006414:	461a      	mov	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	fbb3 f3f2 	udiv	r3, r3, r2
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d066      	beq.n	80064f2 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006424:	7dfa      	ldrb	r2, [r7, #23]
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	4413      	add	r3, r2
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006436:	7892      	ldrb	r2, [r2, #2]
 8006438:	4293      	cmp	r3, r2
 800643a:	d90a      	bls.n	8006452 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006448:	789b      	ldrb	r3, [r3, #2]
 800644a:	461a      	mov	r2, r3
 800644c:	7dfb      	ldrb	r3, [r7, #23]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800645e:	7858      	ldrb	r0, [r3, #1]
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	6a39      	ldr	r1, [r7, #32]
 8006466:	f7fc ff7f 	bl	8003368 <disk_read>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d006      	beq.n	800647e <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006476:	2201      	movs	r2, #1
 8006478:	71da      	strb	r2, [r3, #7]
 800647a:	2301      	movs	r3, #1
 800647c:	e0dc      	b.n	8006638 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006484:	799b      	ldrb	r3, [r3, #6]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d024      	beq.n	80064d8 <f_read+0x268>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649c:	429a      	cmp	r2, r3
 800649e:	d91b      	bls.n	80064d8 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064b8:	8952      	ldrh	r2, [r2, #10]
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	6a3a      	ldr	r2, [r7, #32]
 80064c0:	18d0      	adds	r0, r2, r3
 80064c2:	68f9      	ldr	r1, [r7, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d0:	895b      	ldrh	r3, [r3, #10]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f7fc ffa6 	bl	8003424 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e4:	895b      	ldrh	r3, [r3, #10]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	fb02 f303 	mul.w	r3, r2, r3
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80064f0:	e085      	b.n	80065fe <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d041      	beq.n	8006584 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006506:	799b      	ldrb	r3, [r3, #6]
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	d023      	beq.n	8006558 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800651c:	7858      	ldrb	r0, [r3, #1]
 800651e:	68f9      	ldr	r1, [r7, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006526:	699a      	ldr	r2, [r3, #24]
 8006528:	2301      	movs	r3, #1
 800652a:	f7fc ff3d 	bl	80033a8 <disk_write>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d006      	beq.n	8006542 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800653a:	2201      	movs	r2, #1
 800653c:	71da      	strb	r2, [r3, #7]
 800653e:	2301      	movs	r3, #1
 8006540:	e07a      	b.n	8006638 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006548:	799b      	ldrb	r3, [r3, #6]
 800654a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800654e:	b2da      	uxtb	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006556:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006564:	7858      	ldrb	r0, [r3, #1]
 8006566:	68f9      	ldr	r1, [r7, #12]
 8006568:	2301      	movs	r3, #1
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	f7fc fefc 	bl	8003368 <disk_read>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d006      	beq.n	8006584 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800657c:	2201      	movs	r2, #1
 800657e:	71da      	strb	r2, [r3, #7]
 8006580:	2301      	movs	r3, #1
 8006582:	e059      	b.n	8006638 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800658a:	461a      	mov	r2, r3
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659c:	895b      	ldrh	r3, [r3, #10]
 800659e:	4618      	mov	r0, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065b4:	8952      	ldrh	r2, [r2, #10]
 80065b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80065ba:	fb01 f202 	mul.w	r2, r1, r2
 80065be:	1a9b      	subs	r3, r3, r2
 80065c0:	1ac3      	subs	r3, r0, r3
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80065c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d901      	bls.n	80065d0 <f_read+0x360>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065de:	6812      	ldr	r2, [r2, #0]
 80065e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065e4:	8952      	ldrh	r2, [r2, #10]
 80065e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80065ea:	fb01 f202 	mul.w	r2, r1, r2
 80065ee:	1a9b      	subs	r3, r3, r2
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f6:	4619      	mov	r1, r3
 80065f8:	6a38      	ldr	r0, [r7, #32]
 80065fa:	f7fc ff13 	bl	8003424 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80065fe:	6a3a      	ldr	r2, [r7, #32]
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	4413      	add	r3, r2
 8006604:	623b      	str	r3, [r7, #32]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	4413      	add	r3, r2
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006618:	6093      	str	r3, [r2, #8]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	441a      	add	r2, r3
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f47f ae5a 	bne.w	80062ea <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3730      	adds	r7, #48	; 0x30
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	; 0x28
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff fa6b 	bl	8005b34 <validate>
 800665e:	4603      	mov	r3, r0
 8006660:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006662:	7dfb      	ldrb	r3, [r7, #23]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <f_write+0x2c>
 8006668:	7dfb      	ldrb	r3, [r7, #23]
 800666a:	e21e      	b.n	8006aaa <f_write+0x46a>
	if (fp->err)							/* Check error */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006672:	79db      	ldrb	r3, [r3, #7]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d004      	beq.n	8006682 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800667e:	79db      	ldrb	r3, [r3, #7]
 8006680:	e213      	b.n	8006aaa <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006688:	799b      	ldrb	r3, [r3, #6]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006692:	2307      	movs	r3, #7
 8006694:	e209      	b.n	8006aaa <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	441a      	add	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	f080 81d9 	bcs.w	8006a62 <f_write+0x422>
 80066b0:	2300      	movs	r3, #0
 80066b2:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80066b4:	e1d5      	b.n	8006a62 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066c4:	6812      	ldr	r2, [r2, #0]
 80066c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066ca:	8952      	ldrh	r2, [r2, #10]
 80066cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80066d0:	fb01 f202 	mul.w	r2, r1, r2
 80066d4:	1a9b      	subs	r3, r3, r2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f040 8169 	bne.w	80069ae <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066f0:	8952      	ldrh	r2, [r2, #10]
 80066f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006704:	789b      	ldrb	r3, [r3, #2]
 8006706:	3b01      	subs	r3, #1
 8006708:	b2db      	uxtb	r3, r3
 800670a:	4013      	ands	r3, r2
 800670c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800670e:	7dbb      	ldrb	r3, [r7, #22]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d15f      	bne.n	80067d4 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d111      	bne.n	8006744 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	2b00      	cmp	r3, #0
 800672e:	d126      	bne.n	800677e <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f7fd fcbf 	bl	80040be <create_chain>
 8006740:	6278      	str	r0, [r7, #36]	; 0x24
 8006742:	e01c      	b.n	800677e <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d009      	beq.n	8006764 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	4619      	mov	r1, r3
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f7fd fd57 	bl	800420e <clmt_clust>
 8006760:	6278      	str	r0, [r7, #36]	; 0x24
 8006762:	e00c      	b.n	800677e <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f7fd fca1 	bl	80040be <create_chain>
 800677c:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8173 	beq.w	8006a6c <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	2b01      	cmp	r3, #1
 800678a:	d106      	bne.n	800679a <f_write+0x15a>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006792:	2202      	movs	r2, #2
 8006794:	71da      	strb	r2, [r3, #7]
 8006796:	2302      	movs	r3, #2
 8006798:	e187      	b.n	8006aaa <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a0:	d106      	bne.n	80067b0 <f_write+0x170>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a8:	2201      	movs	r2, #1
 80067aa:	71da      	strb	r2, [r3, #7]
 80067ac:	2301      	movs	r3, #1
 80067ae:	e17c      	b.n	8006aaa <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b6:	461a      	mov	r2, r3
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d105      	bne.n	80067d4 <f_write+0x194>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ce:	461a      	mov	r2, r3
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067da:	799b      	ldrb	r3, [r3, #6]
 80067dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d023      	beq.n	800682c <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f0:	7858      	ldrb	r0, [r3, #1]
 80067f2:	68f9      	ldr	r1, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067fa:	699a      	ldr	r2, [r3, #24]
 80067fc:	2301      	movs	r3, #1
 80067fe:	f7fc fdd3 	bl	80033a8 <disk_write>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d006      	beq.n	8006816 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680e:	2201      	movs	r2, #1
 8006810:	71da      	strb	r2, [r3, #7]
 8006812:	2301      	movs	r3, #1
 8006814:	e149      	b.n	8006aaa <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800681c:	799b      	ldrb	r3, [r3, #6]
 800681e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006822:	b2da      	uxtb	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800682a:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	4619      	mov	r1, r3
 800683e:	4610      	mov	r0, r2
 8006840:	f7fd f969 	bl	8003b16 <clust2sect>
 8006844:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d106      	bne.n	800685a <f_write+0x21a>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006852:	2202      	movs	r2, #2
 8006854:	71da      	strb	r2, [r3, #7]
 8006856:	2302      	movs	r3, #2
 8006858:	e127      	b.n	8006aaa <f_write+0x46a>
			sect += csect;
 800685a:	7dbb      	ldrb	r3, [r7, #22]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	4413      	add	r3, r2
 8006860:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686e:	895b      	ldrh	r3, [r3, #10]
 8006870:	461a      	mov	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	fbb3 f3f2 	udiv	r3, r3, r2
 8006878:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d069      	beq.n	8006954 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006880:	7dba      	ldrb	r2, [r7, #22]
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800688c:	6812      	ldr	r2, [r2, #0]
 800688e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006892:	7892      	ldrb	r2, [r2, #2]
 8006894:	4293      	cmp	r3, r2
 8006896:	d90a      	bls.n	80068ae <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a4:	789b      	ldrb	r3, [r3, #2]
 80068a6:	461a      	mov	r2, r3
 80068a8:	7dbb      	ldrb	r3, [r7, #22]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ba:	7858      	ldrb	r0, [r3, #1]
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	69b9      	ldr	r1, [r7, #24]
 80068c2:	f7fc fd71 	bl	80033a8 <disk_write>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d006      	beq.n	80068da <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d2:	2201      	movs	r2, #1
 80068d4:	71da      	strb	r2, [r3, #7]
 80068d6:	2301      	movs	r3, #1
 80068d8:	e0e7      	b.n	8006aaa <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d926      	bls.n	800693a <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006900:	6812      	ldr	r2, [r2, #0]
 8006902:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006906:	8952      	ldrh	r2, [r2, #10]
 8006908:	fb02 f303 	mul.w	r3, r2, r3
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	18d1      	adds	r1, r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800691c:	895b      	ldrh	r3, [r3, #10]
 800691e:	461a      	mov	r2, r3
 8006920:	f7fc fd80 	bl	8003424 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800692a:	799b      	ldrb	r3, [r3, #6]
 800692c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006930:	b2da      	uxtb	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006938:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006946:	895b      	ldrh	r3, [r3, #10]
 8006948:	461a      	mov	r2, r3
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	fb02 f303 	mul.w	r3, r2, r3
 8006950:	623b      	str	r3, [r7, #32]
				continue;
 8006952:	e06e      	b.n	8006a32 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	429a      	cmp	r2, r3
 8006960:	d01f      	beq.n	80069a2 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	429a      	cmp	r2, r3
 8006974:	d215      	bcs.n	80069a2 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006982:	7858      	ldrb	r0, [r3, #1]
 8006984:	68f9      	ldr	r1, [r7, #12]
 8006986:	2301      	movs	r3, #1
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	f7fc fced 	bl	8003368 <disk_read>
 800698e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8006990:	2b00      	cmp	r3, #0
 8006992:	d006      	beq.n	80069a2 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699a:	2201      	movs	r2, #1
 800699c:	71da      	strb	r2, [r3, #7]
 800699e:	2301      	movs	r3, #1
 80069a0:	e083      	b.n	8006aaa <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a8:	461a      	mov	r2, r3
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ba:	895b      	ldrh	r3, [r3, #10]
 80069bc:	4618      	mov	r0, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069d2:	8952      	ldrh	r2, [r2, #10]
 80069d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80069d8:	fb01 f202 	mul.w	r2, r1, r2
 80069dc:	1a9b      	subs	r3, r3, r2
 80069de:	1ac3      	subs	r3, r0, r3
 80069e0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80069e2:	6a3a      	ldr	r2, [r7, #32]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d901      	bls.n	80069ee <f_write+0x3ae>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a02:	8952      	ldrh	r2, [r2, #10]
 8006a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a08:	fb01 f202 	mul.w	r2, r1, r2
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4413      	add	r3, r2
 8006a12:	6a3a      	ldr	r2, [r7, #32]
 8006a14:	69b9      	ldr	r1, [r7, #24]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fc fd04 	bl	8003424 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a22:	799b      	ldrb	r3, [r3, #6]
 8006a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a30:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	4413      	add	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	4413      	add	r3, r2
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a4c:	6093      	str	r3, [r2, #8]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	441a      	add	r2, r3
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f47f ae26 	bne.w	80066b6 <f_write+0x76>
 8006a6a:	e000      	b.n	8006a6e <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006a6c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d907      	bls.n	8006a92 <f_write+0x452>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a90:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a98:	799b      	ldrb	r3, [r3, #6]
 8006a9a:	f043 0320 	orr.w	r3, r3, #32
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa6:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3728      	adds	r7, #40	; 0x28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b086      	sub	sp, #24
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff f83a 	bl	8005b34 <validate>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f040 80bc 	bne.w	8006c44 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad2:	799b      	ldrb	r3, [r3, #6]
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80b3 	beq.w	8006c44 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae4:	799b      	ldrb	r3, [r3, #6]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d01e      	beq.n	8006b2c <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afa:	7858      	ldrb	r0, [r3, #1]
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	2301      	movs	r3, #1
 8006b08:	f7fc fc4e 	bl	80033a8 <disk_write>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006b12:	2301      	movs	r3, #1
 8006b14:	e097      	b.n	8006c46 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b1c:	799b      	ldrb	r3, [r3, #6]
 8006b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f7fc fef8 	bl	8003934 <move_window>
 8006b44:	4603      	mov	r3, r0
 8006b46:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d17a      	bne.n	8006c44 <f_sync+0x192>
				dir = fp->dir_ptr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	330b      	adds	r3, #11
 8006b5c:	781a      	ldrb	r2, [r3, #0]
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	330b      	adds	r3, #11
 8006b62:	f042 0220 	orr.w	r2, r2, #32
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	331c      	adds	r3, #28
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	0a1b      	lsrs	r3, r3, #8
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	331d      	adds	r3, #29
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	0c1a      	lsrs	r2, r3, #16
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	331e      	adds	r3, #30
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	0e1a      	lsrs	r2, r3, #24
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	331f      	adds	r3, #31
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6938      	ldr	r0, [r7, #16]
 8006bc0:	f7fd fdf9 	bl	80047b6 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006bc4:	f7fc fb34 	bl	8003230 <get_fattime>
 8006bc8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	3316      	adds	r3, #22
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	3317      	adds	r3, #23
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	0c1a      	lsrs	r2, r3, #16
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	3318      	adds	r3, #24
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	0e1a      	lsrs	r2, r3, #24
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	3319      	adds	r3, #25
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	3312      	adds	r3, #18
 8006c00:	2200      	movs	r2, #0
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	3313      	adds	r3, #19
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c12:	799b      	ldrb	r3, [r3, #6]
 8006c14:	f023 0320 	bic.w	r3, r3, #32
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c20:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2e:	2201      	movs	r2, #1
 8006c30:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fc feac 	bl	8003998 <sync_fs>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff ff2b 	bl	8006ab2 <f_sync>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d119      	bne.n	8006c9a <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fe ff64 	bl	8005b34 <validate>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d111      	bne.n	8006c9a <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fc fd98 	bl	80037b4 <dec_lock>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d105      	bne.n	8006c9a <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c94:	461a      	mov	r2, r3
 8006c96:	2300      	movs	r3, #0
 8006c98:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08e      	sub	sp, #56	; 0x38
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006cb0:	f107 030c 	add.w	r3, r7, #12
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fe fc09 	bl	80054d0 <find_volume>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8006cca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f040 80bc 	bne.w	8006e4c <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	3b02      	subs	r3, #2
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d806      	bhi.n	8006cf8 <f_getfree+0x54>
			*nclst = fs->free_clust;
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf0:	691a      	ldr	r2, [r3, #16]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	e0a9      	b.n	8006e4c <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8006d06:	7efb      	ldrb	r3, [r7, #27]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d126      	bne.n	8006d5a <f_getfree+0xb6>
				clst = 2;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8006d10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d12:	69f8      	ldr	r0, [r7, #28]
 8006d14:	f7fc ff23 	bl	8003b5e <get_fat>
 8006d18:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d20:	d103      	bne.n	8006d2a <f_getfree+0x86>
 8006d22:	2301      	movs	r3, #1
 8006d24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006d28:	e07c      	b.n	8006e24 <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d103      	bne.n	8006d38 <f_getfree+0x94>
 8006d30:	2302      	movs	r3, #2
 8006d32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006d36:	e075      	b.n	8006e24 <f_getfree+0x180>
					if (stat == 0) n++;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d102      	bne.n	8006d44 <f_getfree+0xa0>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	3301      	adds	r3, #1
 8006d42:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	3301      	adds	r3, #1
 8006d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d3db      	bcc.n	8006d10 <f_getfree+0x6c>
 8006d58:	e064      	b.n	8006e24 <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
 8006d72:	2300      	movs	r3, #0
 8006d74:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d114      	bne.n	8006da6 <f_getfree+0x102>
						res = move_window(fs, sect++);
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	62ba      	str	r2, [r7, #40]	; 0x28
 8006d82:	4619      	mov	r1, r3
 8006d84:	69f8      	ldr	r0, [r7, #28]
 8006d86:	f7fc fdd5 	bl	8003934 <move_window>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8006d90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d144      	bne.n	8006e22 <f_getfree+0x17e>
						p = fs->win.d8;
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da2:	895b      	ldrh	r3, [r3, #10]
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8006da6:	7efb      	ldrb	r3, [r7, #27]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d115      	bne.n	8006dd8 <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	3301      	adds	r3, #1
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	b21a      	sxth	r2, r3
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	b21b      	sxth	r3, r3
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	b21b      	sxth	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <f_getfree+0x126>
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	3302      	adds	r3, #2
 8006dce:	623b      	str	r3, [r7, #32]
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	3b02      	subs	r3, #2
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd6:	e01d      	b.n	8006e14 <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	3303      	adds	r3, #3
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	061a      	lsls	r2, r3, #24
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	3302      	adds	r3, #2
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	041b      	lsls	r3, r3, #16
 8006de8:	4313      	orrs	r3, r2
 8006dea:	6a3a      	ldr	r2, [r7, #32]
 8006dec:	3201      	adds	r2, #1
 8006dee:	7812      	ldrb	r2, [r2, #0]
 8006df0:	0212      	lsls	r2, r2, #8
 8006df2:	4313      	orrs	r3, r2
 8006df4:	6a3a      	ldr	r2, [r7, #32]
 8006df6:	7812      	ldrb	r2, [r2, #0]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d102      	bne.n	8006e08 <f_getfree+0x164>
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	3301      	adds	r3, #1
 8006e06:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	623b      	str	r3, [r7, #32]
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	3b04      	subs	r3, #4
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	3b01      	subs	r3, #1
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1aa      	bne.n	8006d76 <f_getfree+0xd2>
 8006e20:	e000      	b.n	8006e24 <f_getfree+0x180>
						if (res != FR_OK) break;
 8006e22:	bf00      	nop
			}
			fs->free_clust = n;
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e36:	795b      	ldrb	r3, [r3, #5]
 8006e38:	f043 0301 	orr.w	r3, r3, #1
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e44:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e4a:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8006e4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3738      	adds	r7, #56	; 0x38
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006e6c:	e01b      	b.n	8006ea6 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006e6e:	f107 0310 	add.w	r3, r7, #16
 8006e72:	f107 0114 	add.w	r1, r7, #20
 8006e76:	2201      	movs	r2, #1
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7ff f9f9 	bl	8006270 <f_read>
		if (rc != 1) break;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d116      	bne.n	8006eb2 <f_gets+0x5a>
		c = s[0];
 8006e84:	7d3b      	ldrb	r3, [r7, #20]
 8006e86:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	2b0d      	cmp	r3, #13
 8006e8c:	d100      	bne.n	8006e90 <f_gets+0x38>
 8006e8e:	e00a      	b.n	8006ea6 <f_gets+0x4e>
		*p++ = c;
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	61ba      	str	r2, [r7, #24]
 8006e96:	7dfa      	ldrb	r2, [r7, #23]
 8006e98:	701a      	strb	r2, [r3, #0]
		n++;
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	2b0a      	cmp	r3, #10
 8006ea4:	d007      	beq.n	8006eb6 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	dbde      	blt.n	8006e6e <f_gets+0x16>
 8006eb0:	e002      	b.n	8006eb8 <f_gets+0x60>
		if (rc != 1) break;
 8006eb2:	bf00      	nop
 8006eb4:	e000      	b.n	8006eb8 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006eb6:	bf00      	nop
	}
	*p = 0;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <f_gets+0x70>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	e000      	b.n	8006eca <f_gets+0x72>
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3720      	adds	r7, #32
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	460b      	mov	r3, r1
 8006edc:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	2b0a      	cmp	r3, #10
 8006ee2:	d103      	bne.n	8006eec <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006ee4:	210d      	movs	r1, #13
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff fff3 	bl	8006ed2 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	db25      	blt.n	8006f44 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	60fa      	str	r2, [r7, #12]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	4413      	add	r3, r2
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b3c      	cmp	r3, #60	; 0x3c
 8006f0a:	dd12      	ble.n	8006f32 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f103 010c 	add.w	r1, r3, #12
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	f107 0308 	add.w	r3, r7, #8
 8006f1c:	f7ff fb90 	bl	8006640 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d101      	bne.n	8006f2c <putc_bfd+0x5a>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e001      	b.n	8006f30 <putc_bfd+0x5e>
 8006f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f30:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	609a      	str	r2, [r3, #8]
 8006f42:	e000      	b.n	8006f46 <putc_bfd+0x74>
	if (i < 0) return;
 8006f44:	bf00      	nop
}
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006f4c:	b590      	push	{r4, r7, lr}
 8006f4e:	b097      	sub	sp, #92	; 0x5c
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	613b      	str	r3, [r7, #16]
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8006f62:	e009      	b.n	8006f78 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	781a      	ldrb	r2, [r3, #0]
 8006f6c:	f107 030c 	add.w	r3, r7, #12
 8006f70:	4611      	mov	r1, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff ffad 	bl	8006ed2 <putc_bfd>
	while (*str)			/* Put the string */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1f1      	bne.n	8006f64 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	db15      	blt.n	8006fb2 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	461c      	mov	r4, r3
 8006f8c:	f107 0208 	add.w	r2, r7, #8
 8006f90:	f107 030c 	add.w	r3, r7, #12
 8006f94:	f103 010c 	add.w	r1, r3, #12
 8006f98:	4613      	mov	r3, r2
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	f7ff fb50 	bl	8006640 <f_write>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d105      	bne.n	8006fb2 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d101      	bne.n	8006fb2 <f_puts+0x66>
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	e001      	b.n	8006fb6 <f_puts+0x6a>
	return EOF;
 8006fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	375c      	adds	r7, #92	; 0x5c
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd90      	pop	{r4, r7, pc}
	...

08006fc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006fd6:	4b1e      	ldr	r3, [pc, #120]	; (8007050 <FATFS_LinkDriverEx+0x90>)
 8006fd8:	7a5b      	ldrb	r3, [r3, #9]
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d831      	bhi.n	8007044 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006fe0:	4b1b      	ldr	r3, [pc, #108]	; (8007050 <FATFS_LinkDriverEx+0x90>)
 8006fe2:	7a5b      	ldrb	r3, [r3, #9]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	4b19      	ldr	r3, [pc, #100]	; (8007050 <FATFS_LinkDriverEx+0x90>)
 8006fea:	2100      	movs	r1, #0
 8006fec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006fee:	4b18      	ldr	r3, [pc, #96]	; (8007050 <FATFS_LinkDriverEx+0x90>)
 8006ff0:	7a5b      	ldrb	r3, [r3, #9]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	4a16      	ldr	r2, [pc, #88]	; (8007050 <FATFS_LinkDriverEx+0x90>)
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006ffe:	4b14      	ldr	r3, [pc, #80]	; (8007050 <FATFS_LinkDriverEx+0x90>)
 8007000:	7a5b      	ldrb	r3, [r3, #9]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	4b12      	ldr	r3, [pc, #72]	; (8007050 <FATFS_LinkDriverEx+0x90>)
 8007008:	4413      	add	r3, r2
 800700a:	79fa      	ldrb	r2, [r7, #7]
 800700c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800700e:	4b10      	ldr	r3, [pc, #64]	; (8007050 <FATFS_LinkDriverEx+0x90>)
 8007010:	7a5b      	ldrb	r3, [r3, #9]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	b2d1      	uxtb	r1, r2
 8007018:	4a0d      	ldr	r2, [pc, #52]	; (8007050 <FATFS_LinkDriverEx+0x90>)
 800701a:	7251      	strb	r1, [r2, #9]
 800701c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800701e:	7dbb      	ldrb	r3, [r7, #22]
 8007020:	3330      	adds	r3, #48	; 0x30
 8007022:	b2da      	uxtb	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	3301      	adds	r3, #1
 800702c:	223a      	movs	r2, #58	; 0x3a
 800702e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	3302      	adds	r3, #2
 8007034:	222f      	movs	r2, #47	; 0x2f
 8007036:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	3303      	adds	r3, #3
 800703c:	2200      	movs	r2, #0
 800703e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007044:	7dfb      	ldrb	r3, [r7, #23]
}
 8007046:	4618      	mov	r0, r3
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr
 8007050:	200027d8 	.word	0x200027d8

08007054 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800705e:	2200      	movs	r2, #0
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff ffac 	bl	8006fc0 <FATFS_LinkDriverEx>
 8007068:	4603      	mov	r3, r0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	6039      	str	r1, [r7, #0]
 800707e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	2b7f      	cmp	r3, #127	; 0x7f
 8007084:	d802      	bhi.n	800708c <ff_convert+0x18>
		c = chr;
 8007086:	88fb      	ldrh	r3, [r7, #6]
 8007088:	81fb      	strh	r3, [r7, #14]
 800708a:	e025      	b.n	80070d8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00b      	beq.n	80070aa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	2bff      	cmp	r3, #255	; 0xff
 8007096:	d805      	bhi.n	80070a4 <ff_convert+0x30>
 8007098:	88fb      	ldrh	r3, [r7, #6]
 800709a:	3b80      	subs	r3, #128	; 0x80
 800709c:	4a11      	ldr	r2, [pc, #68]	; (80070e4 <ff_convert+0x70>)
 800709e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a2:	e000      	b.n	80070a6 <ff_convert+0x32>
 80070a4:	2300      	movs	r3, #0
 80070a6:	81fb      	strh	r3, [r7, #14]
 80070a8:	e016      	b.n	80070d8 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80070aa:	2300      	movs	r3, #0
 80070ac:	81fb      	strh	r3, [r7, #14]
 80070ae:	e009      	b.n	80070c4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80070b0:	89fb      	ldrh	r3, [r7, #14]
 80070b2:	4a0c      	ldr	r2, [pc, #48]	; (80070e4 <ff_convert+0x70>)
 80070b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b8:	88fa      	ldrh	r2, [r7, #6]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d006      	beq.n	80070cc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80070be:	89fb      	ldrh	r3, [r7, #14]
 80070c0:	3301      	adds	r3, #1
 80070c2:	81fb      	strh	r3, [r7, #14]
 80070c4:	89fb      	ldrh	r3, [r7, #14]
 80070c6:	2b7f      	cmp	r3, #127	; 0x7f
 80070c8:	d9f2      	bls.n	80070b0 <ff_convert+0x3c>
 80070ca:	e000      	b.n	80070ce <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80070cc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80070ce:	89fb      	ldrh	r3, [r7, #14]
 80070d0:	3380      	adds	r3, #128	; 0x80
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80070d8:	89fb      	ldrh	r3, [r7, #14]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	bc80      	pop	{r7}
 80070e2:	4770      	bx	lr
 80070e4:	08007cd0 	.word	0x08007cd0

080070e8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	e002      	b.n	80070fe <ff_wtoupper+0x16>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3301      	adds	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	4a0f      	ldr	r2, [pc, #60]	; (800713c <ff_wtoupper+0x54>)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d006      	beq.n	8007118 <ff_wtoupper+0x30>
 800710a:	4a0c      	ldr	r2, [pc, #48]	; (800713c <ff_wtoupper+0x54>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007112:	88fa      	ldrh	r2, [r7, #6]
 8007114:	429a      	cmp	r2, r3
 8007116:	d1ef      	bne.n	80070f8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007118:	4a08      	ldr	r2, [pc, #32]	; (800713c <ff_wtoupper+0x54>)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <ff_wtoupper+0x46>
 8007124:	4a06      	ldr	r2, [pc, #24]	; (8007140 <ff_wtoupper+0x58>)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800712c:	e000      	b.n	8007130 <ff_wtoupper+0x48>
 800712e:	88fb      	ldrh	r3, [r7, #6]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	bc80      	pop	{r7}
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	08007dd0 	.word	0x08007dd0
 8007140:	08007fb0 	.word	0x08007fb0

08007144 <siprintf>:
 8007144:	b40e      	push	{r1, r2, r3}
 8007146:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800714a:	b500      	push	{lr}
 800714c:	b09c      	sub	sp, #112	; 0x70
 800714e:	ab1d      	add	r3, sp, #116	; 0x74
 8007150:	9002      	str	r0, [sp, #8]
 8007152:	9006      	str	r0, [sp, #24]
 8007154:	9107      	str	r1, [sp, #28]
 8007156:	9104      	str	r1, [sp, #16]
 8007158:	4808      	ldr	r0, [pc, #32]	; (800717c <siprintf+0x38>)
 800715a:	4909      	ldr	r1, [pc, #36]	; (8007180 <siprintf+0x3c>)
 800715c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007160:	9105      	str	r1, [sp, #20]
 8007162:	6800      	ldr	r0, [r0, #0]
 8007164:	a902      	add	r1, sp, #8
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	f000 f98e 	bl	8007488 <_svfiprintf_r>
 800716c:	2200      	movs	r2, #0
 800716e:	9b02      	ldr	r3, [sp, #8]
 8007170:	701a      	strb	r2, [r3, #0]
 8007172:	b01c      	add	sp, #112	; 0x70
 8007174:	f85d eb04 	ldr.w	lr, [sp], #4
 8007178:	b003      	add	sp, #12
 800717a:	4770      	bx	lr
 800717c:	20000070 	.word	0x20000070
 8007180:	ffff0208 	.word	0xffff0208

08007184 <memset>:
 8007184:	4603      	mov	r3, r0
 8007186:	4402      	add	r2, r0
 8007188:	4293      	cmp	r3, r2
 800718a:	d100      	bne.n	800718e <memset+0xa>
 800718c:	4770      	bx	lr
 800718e:	f803 1b01 	strb.w	r1, [r3], #1
 8007192:	e7f9      	b.n	8007188 <memset+0x4>

08007194 <__errno>:
 8007194:	4b01      	ldr	r3, [pc, #4]	; (800719c <__errno+0x8>)
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	20000070 	.word	0x20000070

080071a0 <__libc_init_array>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	2600      	movs	r6, #0
 80071a4:	4d0c      	ldr	r5, [pc, #48]	; (80071d8 <__libc_init_array+0x38>)
 80071a6:	4c0d      	ldr	r4, [pc, #52]	; (80071dc <__libc_init_array+0x3c>)
 80071a8:	1b64      	subs	r4, r4, r5
 80071aa:	10a4      	asrs	r4, r4, #2
 80071ac:	42a6      	cmp	r6, r4
 80071ae:	d109      	bne.n	80071c4 <__libc_init_array+0x24>
 80071b0:	f000 fc7a 	bl	8007aa8 <_init>
 80071b4:	2600      	movs	r6, #0
 80071b6:	4d0a      	ldr	r5, [pc, #40]	; (80071e0 <__libc_init_array+0x40>)
 80071b8:	4c0a      	ldr	r4, [pc, #40]	; (80071e4 <__libc_init_array+0x44>)
 80071ba:	1b64      	subs	r4, r4, r5
 80071bc:	10a4      	asrs	r4, r4, #2
 80071be:	42a6      	cmp	r6, r4
 80071c0:	d105      	bne.n	80071ce <__libc_init_array+0x2e>
 80071c2:	bd70      	pop	{r4, r5, r6, pc}
 80071c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c8:	4798      	blx	r3
 80071ca:	3601      	adds	r6, #1
 80071cc:	e7ee      	b.n	80071ac <__libc_init_array+0xc>
 80071ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d2:	4798      	blx	r3
 80071d4:	3601      	adds	r6, #1
 80071d6:	e7f2      	b.n	80071be <__libc_init_array+0x1e>
 80071d8:	080081c4 	.word	0x080081c4
 80071dc:	080081c4 	.word	0x080081c4
 80071e0:	080081c4 	.word	0x080081c4
 80071e4:	080081c8 	.word	0x080081c8

080071e8 <__retarget_lock_acquire_recursive>:
 80071e8:	4770      	bx	lr

080071ea <__retarget_lock_release_recursive>:
 80071ea:	4770      	bx	lr

080071ec <_free_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4605      	mov	r5, r0
 80071f0:	2900      	cmp	r1, #0
 80071f2:	d040      	beq.n	8007276 <_free_r+0x8a>
 80071f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f8:	1f0c      	subs	r4, r1, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bfb8      	it	lt
 80071fe:	18e4      	addlt	r4, r4, r3
 8007200:	f000 f8dc 	bl	80073bc <__malloc_lock>
 8007204:	4a1c      	ldr	r2, [pc, #112]	; (8007278 <_free_r+0x8c>)
 8007206:	6813      	ldr	r3, [r2, #0]
 8007208:	b933      	cbnz	r3, 8007218 <_free_r+0x2c>
 800720a:	6063      	str	r3, [r4, #4]
 800720c:	6014      	str	r4, [r2, #0]
 800720e:	4628      	mov	r0, r5
 8007210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007214:	f000 b8d8 	b.w	80073c8 <__malloc_unlock>
 8007218:	42a3      	cmp	r3, r4
 800721a:	d908      	bls.n	800722e <_free_r+0x42>
 800721c:	6820      	ldr	r0, [r4, #0]
 800721e:	1821      	adds	r1, r4, r0
 8007220:	428b      	cmp	r3, r1
 8007222:	bf01      	itttt	eq
 8007224:	6819      	ldreq	r1, [r3, #0]
 8007226:	685b      	ldreq	r3, [r3, #4]
 8007228:	1809      	addeq	r1, r1, r0
 800722a:	6021      	streq	r1, [r4, #0]
 800722c:	e7ed      	b.n	800720a <_free_r+0x1e>
 800722e:	461a      	mov	r2, r3
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	b10b      	cbz	r3, 8007238 <_free_r+0x4c>
 8007234:	42a3      	cmp	r3, r4
 8007236:	d9fa      	bls.n	800722e <_free_r+0x42>
 8007238:	6811      	ldr	r1, [r2, #0]
 800723a:	1850      	adds	r0, r2, r1
 800723c:	42a0      	cmp	r0, r4
 800723e:	d10b      	bne.n	8007258 <_free_r+0x6c>
 8007240:	6820      	ldr	r0, [r4, #0]
 8007242:	4401      	add	r1, r0
 8007244:	1850      	adds	r0, r2, r1
 8007246:	4283      	cmp	r3, r0
 8007248:	6011      	str	r1, [r2, #0]
 800724a:	d1e0      	bne.n	800720e <_free_r+0x22>
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	4408      	add	r0, r1
 8007252:	6010      	str	r0, [r2, #0]
 8007254:	6053      	str	r3, [r2, #4]
 8007256:	e7da      	b.n	800720e <_free_r+0x22>
 8007258:	d902      	bls.n	8007260 <_free_r+0x74>
 800725a:	230c      	movs	r3, #12
 800725c:	602b      	str	r3, [r5, #0]
 800725e:	e7d6      	b.n	800720e <_free_r+0x22>
 8007260:	6820      	ldr	r0, [r4, #0]
 8007262:	1821      	adds	r1, r4, r0
 8007264:	428b      	cmp	r3, r1
 8007266:	bf01      	itttt	eq
 8007268:	6819      	ldreq	r1, [r3, #0]
 800726a:	685b      	ldreq	r3, [r3, #4]
 800726c:	1809      	addeq	r1, r1, r0
 800726e:	6021      	streq	r1, [r4, #0]
 8007270:	6063      	str	r3, [r4, #4]
 8007272:	6054      	str	r4, [r2, #4]
 8007274:	e7cb      	b.n	800720e <_free_r+0x22>
 8007276:	bd38      	pop	{r3, r4, r5, pc}
 8007278:	20002924 	.word	0x20002924

0800727c <sbrk_aligned>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	4e0e      	ldr	r6, [pc, #56]	; (80072b8 <sbrk_aligned+0x3c>)
 8007280:	460c      	mov	r4, r1
 8007282:	6831      	ldr	r1, [r6, #0]
 8007284:	4605      	mov	r5, r0
 8007286:	b911      	cbnz	r1, 800728e <sbrk_aligned+0x12>
 8007288:	f000 fbaa 	bl	80079e0 <_sbrk_r>
 800728c:	6030      	str	r0, [r6, #0]
 800728e:	4621      	mov	r1, r4
 8007290:	4628      	mov	r0, r5
 8007292:	f000 fba5 	bl	80079e0 <_sbrk_r>
 8007296:	1c43      	adds	r3, r0, #1
 8007298:	d00a      	beq.n	80072b0 <sbrk_aligned+0x34>
 800729a:	1cc4      	adds	r4, r0, #3
 800729c:	f024 0403 	bic.w	r4, r4, #3
 80072a0:	42a0      	cmp	r0, r4
 80072a2:	d007      	beq.n	80072b4 <sbrk_aligned+0x38>
 80072a4:	1a21      	subs	r1, r4, r0
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 fb9a 	bl	80079e0 <_sbrk_r>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d101      	bne.n	80072b4 <sbrk_aligned+0x38>
 80072b0:	f04f 34ff 	mov.w	r4, #4294967295
 80072b4:	4620      	mov	r0, r4
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	20002928 	.word	0x20002928

080072bc <_malloc_r>:
 80072bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c0:	1ccd      	adds	r5, r1, #3
 80072c2:	f025 0503 	bic.w	r5, r5, #3
 80072c6:	3508      	adds	r5, #8
 80072c8:	2d0c      	cmp	r5, #12
 80072ca:	bf38      	it	cc
 80072cc:	250c      	movcc	r5, #12
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	4607      	mov	r7, r0
 80072d2:	db01      	blt.n	80072d8 <_malloc_r+0x1c>
 80072d4:	42a9      	cmp	r1, r5
 80072d6:	d905      	bls.n	80072e4 <_malloc_r+0x28>
 80072d8:	230c      	movs	r3, #12
 80072da:	2600      	movs	r6, #0
 80072dc:	603b      	str	r3, [r7, #0]
 80072de:	4630      	mov	r0, r6
 80072e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073b8 <_malloc_r+0xfc>
 80072e8:	f000 f868 	bl	80073bc <__malloc_lock>
 80072ec:	f8d8 3000 	ldr.w	r3, [r8]
 80072f0:	461c      	mov	r4, r3
 80072f2:	bb5c      	cbnz	r4, 800734c <_malloc_r+0x90>
 80072f4:	4629      	mov	r1, r5
 80072f6:	4638      	mov	r0, r7
 80072f8:	f7ff ffc0 	bl	800727c <sbrk_aligned>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	4604      	mov	r4, r0
 8007300:	d155      	bne.n	80073ae <_malloc_r+0xf2>
 8007302:	f8d8 4000 	ldr.w	r4, [r8]
 8007306:	4626      	mov	r6, r4
 8007308:	2e00      	cmp	r6, #0
 800730a:	d145      	bne.n	8007398 <_malloc_r+0xdc>
 800730c:	2c00      	cmp	r4, #0
 800730e:	d048      	beq.n	80073a2 <_malloc_r+0xe6>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	4631      	mov	r1, r6
 8007314:	4638      	mov	r0, r7
 8007316:	eb04 0903 	add.w	r9, r4, r3
 800731a:	f000 fb61 	bl	80079e0 <_sbrk_r>
 800731e:	4581      	cmp	r9, r0
 8007320:	d13f      	bne.n	80073a2 <_malloc_r+0xe6>
 8007322:	6821      	ldr	r1, [r4, #0]
 8007324:	4638      	mov	r0, r7
 8007326:	1a6d      	subs	r5, r5, r1
 8007328:	4629      	mov	r1, r5
 800732a:	f7ff ffa7 	bl	800727c <sbrk_aligned>
 800732e:	3001      	adds	r0, #1
 8007330:	d037      	beq.n	80073a2 <_malloc_r+0xe6>
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	442b      	add	r3, r5
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	f8d8 3000 	ldr.w	r3, [r8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d038      	beq.n	80073b2 <_malloc_r+0xf6>
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	42a2      	cmp	r2, r4
 8007344:	d12b      	bne.n	800739e <_malloc_r+0xe2>
 8007346:	2200      	movs	r2, #0
 8007348:	605a      	str	r2, [r3, #4]
 800734a:	e00f      	b.n	800736c <_malloc_r+0xb0>
 800734c:	6822      	ldr	r2, [r4, #0]
 800734e:	1b52      	subs	r2, r2, r5
 8007350:	d41f      	bmi.n	8007392 <_malloc_r+0xd6>
 8007352:	2a0b      	cmp	r2, #11
 8007354:	d917      	bls.n	8007386 <_malloc_r+0xca>
 8007356:	1961      	adds	r1, r4, r5
 8007358:	42a3      	cmp	r3, r4
 800735a:	6025      	str	r5, [r4, #0]
 800735c:	bf18      	it	ne
 800735e:	6059      	strne	r1, [r3, #4]
 8007360:	6863      	ldr	r3, [r4, #4]
 8007362:	bf08      	it	eq
 8007364:	f8c8 1000 	streq.w	r1, [r8]
 8007368:	5162      	str	r2, [r4, r5]
 800736a:	604b      	str	r3, [r1, #4]
 800736c:	4638      	mov	r0, r7
 800736e:	f104 060b 	add.w	r6, r4, #11
 8007372:	f000 f829 	bl	80073c8 <__malloc_unlock>
 8007376:	f026 0607 	bic.w	r6, r6, #7
 800737a:	1d23      	adds	r3, r4, #4
 800737c:	1af2      	subs	r2, r6, r3
 800737e:	d0ae      	beq.n	80072de <_malloc_r+0x22>
 8007380:	1b9b      	subs	r3, r3, r6
 8007382:	50a3      	str	r3, [r4, r2]
 8007384:	e7ab      	b.n	80072de <_malloc_r+0x22>
 8007386:	42a3      	cmp	r3, r4
 8007388:	6862      	ldr	r2, [r4, #4]
 800738a:	d1dd      	bne.n	8007348 <_malloc_r+0x8c>
 800738c:	f8c8 2000 	str.w	r2, [r8]
 8007390:	e7ec      	b.n	800736c <_malloc_r+0xb0>
 8007392:	4623      	mov	r3, r4
 8007394:	6864      	ldr	r4, [r4, #4]
 8007396:	e7ac      	b.n	80072f2 <_malloc_r+0x36>
 8007398:	4634      	mov	r4, r6
 800739a:	6876      	ldr	r6, [r6, #4]
 800739c:	e7b4      	b.n	8007308 <_malloc_r+0x4c>
 800739e:	4613      	mov	r3, r2
 80073a0:	e7cc      	b.n	800733c <_malloc_r+0x80>
 80073a2:	230c      	movs	r3, #12
 80073a4:	4638      	mov	r0, r7
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	f000 f80e 	bl	80073c8 <__malloc_unlock>
 80073ac:	e797      	b.n	80072de <_malloc_r+0x22>
 80073ae:	6025      	str	r5, [r4, #0]
 80073b0:	e7dc      	b.n	800736c <_malloc_r+0xb0>
 80073b2:	605b      	str	r3, [r3, #4]
 80073b4:	deff      	udf	#255	; 0xff
 80073b6:	bf00      	nop
 80073b8:	20002924 	.word	0x20002924

080073bc <__malloc_lock>:
 80073bc:	4801      	ldr	r0, [pc, #4]	; (80073c4 <__malloc_lock+0x8>)
 80073be:	f7ff bf13 	b.w	80071e8 <__retarget_lock_acquire_recursive>
 80073c2:	bf00      	nop
 80073c4:	20002920 	.word	0x20002920

080073c8 <__malloc_unlock>:
 80073c8:	4801      	ldr	r0, [pc, #4]	; (80073d0 <__malloc_unlock+0x8>)
 80073ca:	f7ff bf0e 	b.w	80071ea <__retarget_lock_release_recursive>
 80073ce:	bf00      	nop
 80073d0:	20002920 	.word	0x20002920

080073d4 <__ssputs_r>:
 80073d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d8:	461f      	mov	r7, r3
 80073da:	688e      	ldr	r6, [r1, #8]
 80073dc:	4682      	mov	sl, r0
 80073de:	42be      	cmp	r6, r7
 80073e0:	460c      	mov	r4, r1
 80073e2:	4690      	mov	r8, r2
 80073e4:	680b      	ldr	r3, [r1, #0]
 80073e6:	d82c      	bhi.n	8007442 <__ssputs_r+0x6e>
 80073e8:	898a      	ldrh	r2, [r1, #12]
 80073ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073ee:	d026      	beq.n	800743e <__ssputs_r+0x6a>
 80073f0:	6965      	ldr	r5, [r4, #20]
 80073f2:	6909      	ldr	r1, [r1, #16]
 80073f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073f8:	eba3 0901 	sub.w	r9, r3, r1
 80073fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007400:	1c7b      	adds	r3, r7, #1
 8007402:	444b      	add	r3, r9
 8007404:	106d      	asrs	r5, r5, #1
 8007406:	429d      	cmp	r5, r3
 8007408:	bf38      	it	cc
 800740a:	461d      	movcc	r5, r3
 800740c:	0553      	lsls	r3, r2, #21
 800740e:	d527      	bpl.n	8007460 <__ssputs_r+0x8c>
 8007410:	4629      	mov	r1, r5
 8007412:	f7ff ff53 	bl	80072bc <_malloc_r>
 8007416:	4606      	mov	r6, r0
 8007418:	b360      	cbz	r0, 8007474 <__ssputs_r+0xa0>
 800741a:	464a      	mov	r2, r9
 800741c:	6921      	ldr	r1, [r4, #16]
 800741e:	f000 fafd 	bl	8007a1c <memcpy>
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	6126      	str	r6, [r4, #16]
 8007430:	444e      	add	r6, r9
 8007432:	6026      	str	r6, [r4, #0]
 8007434:	463e      	mov	r6, r7
 8007436:	6165      	str	r5, [r4, #20]
 8007438:	eba5 0509 	sub.w	r5, r5, r9
 800743c:	60a5      	str	r5, [r4, #8]
 800743e:	42be      	cmp	r6, r7
 8007440:	d900      	bls.n	8007444 <__ssputs_r+0x70>
 8007442:	463e      	mov	r6, r7
 8007444:	4632      	mov	r2, r6
 8007446:	4641      	mov	r1, r8
 8007448:	6820      	ldr	r0, [r4, #0]
 800744a:	f000 faaf 	bl	80079ac <memmove>
 800744e:	2000      	movs	r0, #0
 8007450:	68a3      	ldr	r3, [r4, #8]
 8007452:	1b9b      	subs	r3, r3, r6
 8007454:	60a3      	str	r3, [r4, #8]
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	4433      	add	r3, r6
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007460:	462a      	mov	r2, r5
 8007462:	f000 fae9 	bl	8007a38 <_realloc_r>
 8007466:	4606      	mov	r6, r0
 8007468:	2800      	cmp	r0, #0
 800746a:	d1e0      	bne.n	800742e <__ssputs_r+0x5a>
 800746c:	4650      	mov	r0, sl
 800746e:	6921      	ldr	r1, [r4, #16]
 8007470:	f7ff febc 	bl	80071ec <_free_r>
 8007474:	230c      	movs	r3, #12
 8007476:	f8ca 3000 	str.w	r3, [sl]
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007484:	81a3      	strh	r3, [r4, #12]
 8007486:	e7e9      	b.n	800745c <__ssputs_r+0x88>

08007488 <_svfiprintf_r>:
 8007488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748c:	4698      	mov	r8, r3
 800748e:	898b      	ldrh	r3, [r1, #12]
 8007490:	4607      	mov	r7, r0
 8007492:	061b      	lsls	r3, r3, #24
 8007494:	460d      	mov	r5, r1
 8007496:	4614      	mov	r4, r2
 8007498:	b09d      	sub	sp, #116	; 0x74
 800749a:	d50e      	bpl.n	80074ba <_svfiprintf_r+0x32>
 800749c:	690b      	ldr	r3, [r1, #16]
 800749e:	b963      	cbnz	r3, 80074ba <_svfiprintf_r+0x32>
 80074a0:	2140      	movs	r1, #64	; 0x40
 80074a2:	f7ff ff0b 	bl	80072bc <_malloc_r>
 80074a6:	6028      	str	r0, [r5, #0]
 80074a8:	6128      	str	r0, [r5, #16]
 80074aa:	b920      	cbnz	r0, 80074b6 <_svfiprintf_r+0x2e>
 80074ac:	230c      	movs	r3, #12
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	f04f 30ff 	mov.w	r0, #4294967295
 80074b4:	e0d0      	b.n	8007658 <_svfiprintf_r+0x1d0>
 80074b6:	2340      	movs	r3, #64	; 0x40
 80074b8:	616b      	str	r3, [r5, #20]
 80074ba:	2300      	movs	r3, #0
 80074bc:	9309      	str	r3, [sp, #36]	; 0x24
 80074be:	2320      	movs	r3, #32
 80074c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074c4:	2330      	movs	r3, #48	; 0x30
 80074c6:	f04f 0901 	mov.w	r9, #1
 80074ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80074ce:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007670 <_svfiprintf_r+0x1e8>
 80074d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074d6:	4623      	mov	r3, r4
 80074d8:	469a      	mov	sl, r3
 80074da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074de:	b10a      	cbz	r2, 80074e4 <_svfiprintf_r+0x5c>
 80074e0:	2a25      	cmp	r2, #37	; 0x25
 80074e2:	d1f9      	bne.n	80074d8 <_svfiprintf_r+0x50>
 80074e4:	ebba 0b04 	subs.w	fp, sl, r4
 80074e8:	d00b      	beq.n	8007502 <_svfiprintf_r+0x7a>
 80074ea:	465b      	mov	r3, fp
 80074ec:	4622      	mov	r2, r4
 80074ee:	4629      	mov	r1, r5
 80074f0:	4638      	mov	r0, r7
 80074f2:	f7ff ff6f 	bl	80073d4 <__ssputs_r>
 80074f6:	3001      	adds	r0, #1
 80074f8:	f000 80a9 	beq.w	800764e <_svfiprintf_r+0x1c6>
 80074fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074fe:	445a      	add	r2, fp
 8007500:	9209      	str	r2, [sp, #36]	; 0x24
 8007502:	f89a 3000 	ldrb.w	r3, [sl]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 80a1 	beq.w	800764e <_svfiprintf_r+0x1c6>
 800750c:	2300      	movs	r3, #0
 800750e:	f04f 32ff 	mov.w	r2, #4294967295
 8007512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007516:	f10a 0a01 	add.w	sl, sl, #1
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	9307      	str	r3, [sp, #28]
 800751e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007522:	931a      	str	r3, [sp, #104]	; 0x68
 8007524:	4654      	mov	r4, sl
 8007526:	2205      	movs	r2, #5
 8007528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800752c:	4850      	ldr	r0, [pc, #320]	; (8007670 <_svfiprintf_r+0x1e8>)
 800752e:	f000 fa67 	bl	8007a00 <memchr>
 8007532:	9a04      	ldr	r2, [sp, #16]
 8007534:	b9d8      	cbnz	r0, 800756e <_svfiprintf_r+0xe6>
 8007536:	06d0      	lsls	r0, r2, #27
 8007538:	bf44      	itt	mi
 800753a:	2320      	movmi	r3, #32
 800753c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007540:	0711      	lsls	r1, r2, #28
 8007542:	bf44      	itt	mi
 8007544:	232b      	movmi	r3, #43	; 0x2b
 8007546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800754a:	f89a 3000 	ldrb.w	r3, [sl]
 800754e:	2b2a      	cmp	r3, #42	; 0x2a
 8007550:	d015      	beq.n	800757e <_svfiprintf_r+0xf6>
 8007552:	4654      	mov	r4, sl
 8007554:	2000      	movs	r0, #0
 8007556:	f04f 0c0a 	mov.w	ip, #10
 800755a:	9a07      	ldr	r2, [sp, #28]
 800755c:	4621      	mov	r1, r4
 800755e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007562:	3b30      	subs	r3, #48	; 0x30
 8007564:	2b09      	cmp	r3, #9
 8007566:	d94d      	bls.n	8007604 <_svfiprintf_r+0x17c>
 8007568:	b1b0      	cbz	r0, 8007598 <_svfiprintf_r+0x110>
 800756a:	9207      	str	r2, [sp, #28]
 800756c:	e014      	b.n	8007598 <_svfiprintf_r+0x110>
 800756e:	eba0 0308 	sub.w	r3, r0, r8
 8007572:	fa09 f303 	lsl.w	r3, r9, r3
 8007576:	4313      	orrs	r3, r2
 8007578:	46a2      	mov	sl, r4
 800757a:	9304      	str	r3, [sp, #16]
 800757c:	e7d2      	b.n	8007524 <_svfiprintf_r+0x9c>
 800757e:	9b03      	ldr	r3, [sp, #12]
 8007580:	1d19      	adds	r1, r3, #4
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	9103      	str	r1, [sp, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	bfbb      	ittet	lt
 800758a:	425b      	neglt	r3, r3
 800758c:	f042 0202 	orrlt.w	r2, r2, #2
 8007590:	9307      	strge	r3, [sp, #28]
 8007592:	9307      	strlt	r3, [sp, #28]
 8007594:	bfb8      	it	lt
 8007596:	9204      	strlt	r2, [sp, #16]
 8007598:	7823      	ldrb	r3, [r4, #0]
 800759a:	2b2e      	cmp	r3, #46	; 0x2e
 800759c:	d10c      	bne.n	80075b8 <_svfiprintf_r+0x130>
 800759e:	7863      	ldrb	r3, [r4, #1]
 80075a0:	2b2a      	cmp	r3, #42	; 0x2a
 80075a2:	d134      	bne.n	800760e <_svfiprintf_r+0x186>
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	3402      	adds	r4, #2
 80075a8:	1d1a      	adds	r2, r3, #4
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	9203      	str	r2, [sp, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	bfb8      	it	lt
 80075b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80075b6:	9305      	str	r3, [sp, #20]
 80075b8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007674 <_svfiprintf_r+0x1ec>
 80075bc:	2203      	movs	r2, #3
 80075be:	4650      	mov	r0, sl
 80075c0:	7821      	ldrb	r1, [r4, #0]
 80075c2:	f000 fa1d 	bl	8007a00 <memchr>
 80075c6:	b138      	cbz	r0, 80075d8 <_svfiprintf_r+0x150>
 80075c8:	2240      	movs	r2, #64	; 0x40
 80075ca:	9b04      	ldr	r3, [sp, #16]
 80075cc:	eba0 000a 	sub.w	r0, r0, sl
 80075d0:	4082      	lsls	r2, r0
 80075d2:	4313      	orrs	r3, r2
 80075d4:	3401      	adds	r4, #1
 80075d6:	9304      	str	r3, [sp, #16]
 80075d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075dc:	2206      	movs	r2, #6
 80075de:	4826      	ldr	r0, [pc, #152]	; (8007678 <_svfiprintf_r+0x1f0>)
 80075e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075e4:	f000 fa0c 	bl	8007a00 <memchr>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d038      	beq.n	800765e <_svfiprintf_r+0x1d6>
 80075ec:	4b23      	ldr	r3, [pc, #140]	; (800767c <_svfiprintf_r+0x1f4>)
 80075ee:	bb1b      	cbnz	r3, 8007638 <_svfiprintf_r+0x1b0>
 80075f0:	9b03      	ldr	r3, [sp, #12]
 80075f2:	3307      	adds	r3, #7
 80075f4:	f023 0307 	bic.w	r3, r3, #7
 80075f8:	3308      	adds	r3, #8
 80075fa:	9303      	str	r3, [sp, #12]
 80075fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fe:	4433      	add	r3, r6
 8007600:	9309      	str	r3, [sp, #36]	; 0x24
 8007602:	e768      	b.n	80074d6 <_svfiprintf_r+0x4e>
 8007604:	460c      	mov	r4, r1
 8007606:	2001      	movs	r0, #1
 8007608:	fb0c 3202 	mla	r2, ip, r2, r3
 800760c:	e7a6      	b.n	800755c <_svfiprintf_r+0xd4>
 800760e:	2300      	movs	r3, #0
 8007610:	f04f 0c0a 	mov.w	ip, #10
 8007614:	4619      	mov	r1, r3
 8007616:	3401      	adds	r4, #1
 8007618:	9305      	str	r3, [sp, #20]
 800761a:	4620      	mov	r0, r4
 800761c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007620:	3a30      	subs	r2, #48	; 0x30
 8007622:	2a09      	cmp	r2, #9
 8007624:	d903      	bls.n	800762e <_svfiprintf_r+0x1a6>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0c6      	beq.n	80075b8 <_svfiprintf_r+0x130>
 800762a:	9105      	str	r1, [sp, #20]
 800762c:	e7c4      	b.n	80075b8 <_svfiprintf_r+0x130>
 800762e:	4604      	mov	r4, r0
 8007630:	2301      	movs	r3, #1
 8007632:	fb0c 2101 	mla	r1, ip, r1, r2
 8007636:	e7f0      	b.n	800761a <_svfiprintf_r+0x192>
 8007638:	ab03      	add	r3, sp, #12
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	462a      	mov	r2, r5
 800763e:	4638      	mov	r0, r7
 8007640:	4b0f      	ldr	r3, [pc, #60]	; (8007680 <_svfiprintf_r+0x1f8>)
 8007642:	a904      	add	r1, sp, #16
 8007644:	f3af 8000 	nop.w
 8007648:	1c42      	adds	r2, r0, #1
 800764a:	4606      	mov	r6, r0
 800764c:	d1d6      	bne.n	80075fc <_svfiprintf_r+0x174>
 800764e:	89ab      	ldrh	r3, [r5, #12]
 8007650:	065b      	lsls	r3, r3, #25
 8007652:	f53f af2d 	bmi.w	80074b0 <_svfiprintf_r+0x28>
 8007656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007658:	b01d      	add	sp, #116	; 0x74
 800765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765e:	ab03      	add	r3, sp, #12
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	462a      	mov	r2, r5
 8007664:	4638      	mov	r0, r7
 8007666:	4b06      	ldr	r3, [pc, #24]	; (8007680 <_svfiprintf_r+0x1f8>)
 8007668:	a904      	add	r1, sp, #16
 800766a:	f000 f87d 	bl	8007768 <_printf_i>
 800766e:	e7eb      	b.n	8007648 <_svfiprintf_r+0x1c0>
 8007670:	08008190 	.word	0x08008190
 8007674:	08008196 	.word	0x08008196
 8007678:	0800819a 	.word	0x0800819a
 800767c:	00000000 	.word	0x00000000
 8007680:	080073d5 	.word	0x080073d5

08007684 <_printf_common>:
 8007684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007688:	4616      	mov	r6, r2
 800768a:	4699      	mov	r9, r3
 800768c:	688a      	ldr	r2, [r1, #8]
 800768e:	690b      	ldr	r3, [r1, #16]
 8007690:	4607      	mov	r7, r0
 8007692:	4293      	cmp	r3, r2
 8007694:	bfb8      	it	lt
 8007696:	4613      	movlt	r3, r2
 8007698:	6033      	str	r3, [r6, #0]
 800769a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800769e:	460c      	mov	r4, r1
 80076a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076a4:	b10a      	cbz	r2, 80076aa <_printf_common+0x26>
 80076a6:	3301      	adds	r3, #1
 80076a8:	6033      	str	r3, [r6, #0]
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	0699      	lsls	r1, r3, #26
 80076ae:	bf42      	ittt	mi
 80076b0:	6833      	ldrmi	r3, [r6, #0]
 80076b2:	3302      	addmi	r3, #2
 80076b4:	6033      	strmi	r3, [r6, #0]
 80076b6:	6825      	ldr	r5, [r4, #0]
 80076b8:	f015 0506 	ands.w	r5, r5, #6
 80076bc:	d106      	bne.n	80076cc <_printf_common+0x48>
 80076be:	f104 0a19 	add.w	sl, r4, #25
 80076c2:	68e3      	ldr	r3, [r4, #12]
 80076c4:	6832      	ldr	r2, [r6, #0]
 80076c6:	1a9b      	subs	r3, r3, r2
 80076c8:	42ab      	cmp	r3, r5
 80076ca:	dc2b      	bgt.n	8007724 <_printf_common+0xa0>
 80076cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076d0:	1e13      	subs	r3, r2, #0
 80076d2:	6822      	ldr	r2, [r4, #0]
 80076d4:	bf18      	it	ne
 80076d6:	2301      	movne	r3, #1
 80076d8:	0692      	lsls	r2, r2, #26
 80076da:	d430      	bmi.n	800773e <_printf_common+0xba>
 80076dc:	4649      	mov	r1, r9
 80076de:	4638      	mov	r0, r7
 80076e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076e4:	47c0      	blx	r8
 80076e6:	3001      	adds	r0, #1
 80076e8:	d023      	beq.n	8007732 <_printf_common+0xae>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	6922      	ldr	r2, [r4, #16]
 80076ee:	f003 0306 	and.w	r3, r3, #6
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	bf14      	ite	ne
 80076f6:	2500      	movne	r5, #0
 80076f8:	6833      	ldreq	r3, [r6, #0]
 80076fa:	f04f 0600 	mov.w	r6, #0
 80076fe:	bf08      	it	eq
 8007700:	68e5      	ldreq	r5, [r4, #12]
 8007702:	f104 041a 	add.w	r4, r4, #26
 8007706:	bf08      	it	eq
 8007708:	1aed      	subeq	r5, r5, r3
 800770a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800770e:	bf08      	it	eq
 8007710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007714:	4293      	cmp	r3, r2
 8007716:	bfc4      	itt	gt
 8007718:	1a9b      	subgt	r3, r3, r2
 800771a:	18ed      	addgt	r5, r5, r3
 800771c:	42b5      	cmp	r5, r6
 800771e:	d11a      	bne.n	8007756 <_printf_common+0xd2>
 8007720:	2000      	movs	r0, #0
 8007722:	e008      	b.n	8007736 <_printf_common+0xb2>
 8007724:	2301      	movs	r3, #1
 8007726:	4652      	mov	r2, sl
 8007728:	4649      	mov	r1, r9
 800772a:	4638      	mov	r0, r7
 800772c:	47c0      	blx	r8
 800772e:	3001      	adds	r0, #1
 8007730:	d103      	bne.n	800773a <_printf_common+0xb6>
 8007732:	f04f 30ff 	mov.w	r0, #4294967295
 8007736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773a:	3501      	adds	r5, #1
 800773c:	e7c1      	b.n	80076c2 <_printf_common+0x3e>
 800773e:	2030      	movs	r0, #48	; 0x30
 8007740:	18e1      	adds	r1, r4, r3
 8007742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800774c:	4422      	add	r2, r4
 800774e:	3302      	adds	r3, #2
 8007750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007754:	e7c2      	b.n	80076dc <_printf_common+0x58>
 8007756:	2301      	movs	r3, #1
 8007758:	4622      	mov	r2, r4
 800775a:	4649      	mov	r1, r9
 800775c:	4638      	mov	r0, r7
 800775e:	47c0      	blx	r8
 8007760:	3001      	adds	r0, #1
 8007762:	d0e6      	beq.n	8007732 <_printf_common+0xae>
 8007764:	3601      	adds	r6, #1
 8007766:	e7d9      	b.n	800771c <_printf_common+0x98>

08007768 <_printf_i>:
 8007768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800776c:	7e0f      	ldrb	r7, [r1, #24]
 800776e:	4691      	mov	r9, r2
 8007770:	2f78      	cmp	r7, #120	; 0x78
 8007772:	4680      	mov	r8, r0
 8007774:	460c      	mov	r4, r1
 8007776:	469a      	mov	sl, r3
 8007778:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800777a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800777e:	d807      	bhi.n	8007790 <_printf_i+0x28>
 8007780:	2f62      	cmp	r7, #98	; 0x62
 8007782:	d80a      	bhi.n	800779a <_printf_i+0x32>
 8007784:	2f00      	cmp	r7, #0
 8007786:	f000 80d5 	beq.w	8007934 <_printf_i+0x1cc>
 800778a:	2f58      	cmp	r7, #88	; 0x58
 800778c:	f000 80c1 	beq.w	8007912 <_printf_i+0x1aa>
 8007790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007798:	e03a      	b.n	8007810 <_printf_i+0xa8>
 800779a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800779e:	2b15      	cmp	r3, #21
 80077a0:	d8f6      	bhi.n	8007790 <_printf_i+0x28>
 80077a2:	a101      	add	r1, pc, #4	; (adr r1, 80077a8 <_printf_i+0x40>)
 80077a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077a8:	08007801 	.word	0x08007801
 80077ac:	08007815 	.word	0x08007815
 80077b0:	08007791 	.word	0x08007791
 80077b4:	08007791 	.word	0x08007791
 80077b8:	08007791 	.word	0x08007791
 80077bc:	08007791 	.word	0x08007791
 80077c0:	08007815 	.word	0x08007815
 80077c4:	08007791 	.word	0x08007791
 80077c8:	08007791 	.word	0x08007791
 80077cc:	08007791 	.word	0x08007791
 80077d0:	08007791 	.word	0x08007791
 80077d4:	0800791b 	.word	0x0800791b
 80077d8:	08007841 	.word	0x08007841
 80077dc:	080078d5 	.word	0x080078d5
 80077e0:	08007791 	.word	0x08007791
 80077e4:	08007791 	.word	0x08007791
 80077e8:	0800793d 	.word	0x0800793d
 80077ec:	08007791 	.word	0x08007791
 80077f0:	08007841 	.word	0x08007841
 80077f4:	08007791 	.word	0x08007791
 80077f8:	08007791 	.word	0x08007791
 80077fc:	080078dd 	.word	0x080078dd
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	1d1a      	adds	r2, r3, #4
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	602a      	str	r2, [r5, #0]
 8007808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800780c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007810:	2301      	movs	r3, #1
 8007812:	e0a0      	b.n	8007956 <_printf_i+0x1ee>
 8007814:	6820      	ldr	r0, [r4, #0]
 8007816:	682b      	ldr	r3, [r5, #0]
 8007818:	0607      	lsls	r7, r0, #24
 800781a:	f103 0104 	add.w	r1, r3, #4
 800781e:	6029      	str	r1, [r5, #0]
 8007820:	d501      	bpl.n	8007826 <_printf_i+0xbe>
 8007822:	681e      	ldr	r6, [r3, #0]
 8007824:	e003      	b.n	800782e <_printf_i+0xc6>
 8007826:	0646      	lsls	r6, r0, #25
 8007828:	d5fb      	bpl.n	8007822 <_printf_i+0xba>
 800782a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800782e:	2e00      	cmp	r6, #0
 8007830:	da03      	bge.n	800783a <_printf_i+0xd2>
 8007832:	232d      	movs	r3, #45	; 0x2d
 8007834:	4276      	negs	r6, r6
 8007836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800783a:	230a      	movs	r3, #10
 800783c:	4859      	ldr	r0, [pc, #356]	; (80079a4 <_printf_i+0x23c>)
 800783e:	e012      	b.n	8007866 <_printf_i+0xfe>
 8007840:	682b      	ldr	r3, [r5, #0]
 8007842:	6820      	ldr	r0, [r4, #0]
 8007844:	1d19      	adds	r1, r3, #4
 8007846:	6029      	str	r1, [r5, #0]
 8007848:	0605      	lsls	r5, r0, #24
 800784a:	d501      	bpl.n	8007850 <_printf_i+0xe8>
 800784c:	681e      	ldr	r6, [r3, #0]
 800784e:	e002      	b.n	8007856 <_printf_i+0xee>
 8007850:	0641      	lsls	r1, r0, #25
 8007852:	d5fb      	bpl.n	800784c <_printf_i+0xe4>
 8007854:	881e      	ldrh	r6, [r3, #0]
 8007856:	2f6f      	cmp	r7, #111	; 0x6f
 8007858:	bf0c      	ite	eq
 800785a:	2308      	moveq	r3, #8
 800785c:	230a      	movne	r3, #10
 800785e:	4851      	ldr	r0, [pc, #324]	; (80079a4 <_printf_i+0x23c>)
 8007860:	2100      	movs	r1, #0
 8007862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007866:	6865      	ldr	r5, [r4, #4]
 8007868:	2d00      	cmp	r5, #0
 800786a:	bfa8      	it	ge
 800786c:	6821      	ldrge	r1, [r4, #0]
 800786e:	60a5      	str	r5, [r4, #8]
 8007870:	bfa4      	itt	ge
 8007872:	f021 0104 	bicge.w	r1, r1, #4
 8007876:	6021      	strge	r1, [r4, #0]
 8007878:	b90e      	cbnz	r6, 800787e <_printf_i+0x116>
 800787a:	2d00      	cmp	r5, #0
 800787c:	d04b      	beq.n	8007916 <_printf_i+0x1ae>
 800787e:	4615      	mov	r5, r2
 8007880:	fbb6 f1f3 	udiv	r1, r6, r3
 8007884:	fb03 6711 	mls	r7, r3, r1, r6
 8007888:	5dc7      	ldrb	r7, [r0, r7]
 800788a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800788e:	4637      	mov	r7, r6
 8007890:	42bb      	cmp	r3, r7
 8007892:	460e      	mov	r6, r1
 8007894:	d9f4      	bls.n	8007880 <_printf_i+0x118>
 8007896:	2b08      	cmp	r3, #8
 8007898:	d10b      	bne.n	80078b2 <_printf_i+0x14a>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	07de      	lsls	r6, r3, #31
 800789e:	d508      	bpl.n	80078b2 <_printf_i+0x14a>
 80078a0:	6923      	ldr	r3, [r4, #16]
 80078a2:	6861      	ldr	r1, [r4, #4]
 80078a4:	4299      	cmp	r1, r3
 80078a6:	bfde      	ittt	le
 80078a8:	2330      	movle	r3, #48	; 0x30
 80078aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078b2:	1b52      	subs	r2, r2, r5
 80078b4:	6122      	str	r2, [r4, #16]
 80078b6:	464b      	mov	r3, r9
 80078b8:	4621      	mov	r1, r4
 80078ba:	4640      	mov	r0, r8
 80078bc:	f8cd a000 	str.w	sl, [sp]
 80078c0:	aa03      	add	r2, sp, #12
 80078c2:	f7ff fedf 	bl	8007684 <_printf_common>
 80078c6:	3001      	adds	r0, #1
 80078c8:	d14a      	bne.n	8007960 <_printf_i+0x1f8>
 80078ca:	f04f 30ff 	mov.w	r0, #4294967295
 80078ce:	b004      	add	sp, #16
 80078d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	f043 0320 	orr.w	r3, r3, #32
 80078da:	6023      	str	r3, [r4, #0]
 80078dc:	2778      	movs	r7, #120	; 0x78
 80078de:	4832      	ldr	r0, [pc, #200]	; (80079a8 <_printf_i+0x240>)
 80078e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	6829      	ldr	r1, [r5, #0]
 80078e8:	061f      	lsls	r7, r3, #24
 80078ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80078ee:	d402      	bmi.n	80078f6 <_printf_i+0x18e>
 80078f0:	065f      	lsls	r7, r3, #25
 80078f2:	bf48      	it	mi
 80078f4:	b2b6      	uxthmi	r6, r6
 80078f6:	07df      	lsls	r7, r3, #31
 80078f8:	bf48      	it	mi
 80078fa:	f043 0320 	orrmi.w	r3, r3, #32
 80078fe:	6029      	str	r1, [r5, #0]
 8007900:	bf48      	it	mi
 8007902:	6023      	strmi	r3, [r4, #0]
 8007904:	b91e      	cbnz	r6, 800790e <_printf_i+0x1a6>
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	f023 0320 	bic.w	r3, r3, #32
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	2310      	movs	r3, #16
 8007910:	e7a6      	b.n	8007860 <_printf_i+0xf8>
 8007912:	4824      	ldr	r0, [pc, #144]	; (80079a4 <_printf_i+0x23c>)
 8007914:	e7e4      	b.n	80078e0 <_printf_i+0x178>
 8007916:	4615      	mov	r5, r2
 8007918:	e7bd      	b.n	8007896 <_printf_i+0x12e>
 800791a:	682b      	ldr	r3, [r5, #0]
 800791c:	6826      	ldr	r6, [r4, #0]
 800791e:	1d18      	adds	r0, r3, #4
 8007920:	6961      	ldr	r1, [r4, #20]
 8007922:	6028      	str	r0, [r5, #0]
 8007924:	0635      	lsls	r5, r6, #24
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	d501      	bpl.n	800792e <_printf_i+0x1c6>
 800792a:	6019      	str	r1, [r3, #0]
 800792c:	e002      	b.n	8007934 <_printf_i+0x1cc>
 800792e:	0670      	lsls	r0, r6, #25
 8007930:	d5fb      	bpl.n	800792a <_printf_i+0x1c2>
 8007932:	8019      	strh	r1, [r3, #0]
 8007934:	2300      	movs	r3, #0
 8007936:	4615      	mov	r5, r2
 8007938:	6123      	str	r3, [r4, #16]
 800793a:	e7bc      	b.n	80078b6 <_printf_i+0x14e>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	2100      	movs	r1, #0
 8007940:	1d1a      	adds	r2, r3, #4
 8007942:	602a      	str	r2, [r5, #0]
 8007944:	681d      	ldr	r5, [r3, #0]
 8007946:	6862      	ldr	r2, [r4, #4]
 8007948:	4628      	mov	r0, r5
 800794a:	f000 f859 	bl	8007a00 <memchr>
 800794e:	b108      	cbz	r0, 8007954 <_printf_i+0x1ec>
 8007950:	1b40      	subs	r0, r0, r5
 8007952:	6060      	str	r0, [r4, #4]
 8007954:	6863      	ldr	r3, [r4, #4]
 8007956:	6123      	str	r3, [r4, #16]
 8007958:	2300      	movs	r3, #0
 800795a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800795e:	e7aa      	b.n	80078b6 <_printf_i+0x14e>
 8007960:	462a      	mov	r2, r5
 8007962:	4649      	mov	r1, r9
 8007964:	4640      	mov	r0, r8
 8007966:	6923      	ldr	r3, [r4, #16]
 8007968:	47d0      	blx	sl
 800796a:	3001      	adds	r0, #1
 800796c:	d0ad      	beq.n	80078ca <_printf_i+0x162>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	079b      	lsls	r3, r3, #30
 8007972:	d413      	bmi.n	800799c <_printf_i+0x234>
 8007974:	68e0      	ldr	r0, [r4, #12]
 8007976:	9b03      	ldr	r3, [sp, #12]
 8007978:	4298      	cmp	r0, r3
 800797a:	bfb8      	it	lt
 800797c:	4618      	movlt	r0, r3
 800797e:	e7a6      	b.n	80078ce <_printf_i+0x166>
 8007980:	2301      	movs	r3, #1
 8007982:	4632      	mov	r2, r6
 8007984:	4649      	mov	r1, r9
 8007986:	4640      	mov	r0, r8
 8007988:	47d0      	blx	sl
 800798a:	3001      	adds	r0, #1
 800798c:	d09d      	beq.n	80078ca <_printf_i+0x162>
 800798e:	3501      	adds	r5, #1
 8007990:	68e3      	ldr	r3, [r4, #12]
 8007992:	9903      	ldr	r1, [sp, #12]
 8007994:	1a5b      	subs	r3, r3, r1
 8007996:	42ab      	cmp	r3, r5
 8007998:	dcf2      	bgt.n	8007980 <_printf_i+0x218>
 800799a:	e7eb      	b.n	8007974 <_printf_i+0x20c>
 800799c:	2500      	movs	r5, #0
 800799e:	f104 0619 	add.w	r6, r4, #25
 80079a2:	e7f5      	b.n	8007990 <_printf_i+0x228>
 80079a4:	080081a1 	.word	0x080081a1
 80079a8:	080081b2 	.word	0x080081b2

080079ac <memmove>:
 80079ac:	4288      	cmp	r0, r1
 80079ae:	b510      	push	{r4, lr}
 80079b0:	eb01 0402 	add.w	r4, r1, r2
 80079b4:	d902      	bls.n	80079bc <memmove+0x10>
 80079b6:	4284      	cmp	r4, r0
 80079b8:	4623      	mov	r3, r4
 80079ba:	d807      	bhi.n	80079cc <memmove+0x20>
 80079bc:	1e43      	subs	r3, r0, #1
 80079be:	42a1      	cmp	r1, r4
 80079c0:	d008      	beq.n	80079d4 <memmove+0x28>
 80079c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079ca:	e7f8      	b.n	80079be <memmove+0x12>
 80079cc:	4601      	mov	r1, r0
 80079ce:	4402      	add	r2, r0
 80079d0:	428a      	cmp	r2, r1
 80079d2:	d100      	bne.n	80079d6 <memmove+0x2a>
 80079d4:	bd10      	pop	{r4, pc}
 80079d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079de:	e7f7      	b.n	80079d0 <memmove+0x24>

080079e0 <_sbrk_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	2300      	movs	r3, #0
 80079e4:	4d05      	ldr	r5, [pc, #20]	; (80079fc <_sbrk_r+0x1c>)
 80079e6:	4604      	mov	r4, r0
 80079e8:	4608      	mov	r0, r1
 80079ea:	602b      	str	r3, [r5, #0]
 80079ec:	f7f9 fec0 	bl	8001770 <_sbrk>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_sbrk_r+0x1a>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_sbrk_r+0x1a>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	2000291c 	.word	0x2000291c

08007a00 <memchr>:
 8007a00:	4603      	mov	r3, r0
 8007a02:	b510      	push	{r4, lr}
 8007a04:	b2c9      	uxtb	r1, r1
 8007a06:	4402      	add	r2, r0
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	d101      	bne.n	8007a12 <memchr+0x12>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	e003      	b.n	8007a1a <memchr+0x1a>
 8007a12:	7804      	ldrb	r4, [r0, #0]
 8007a14:	3301      	adds	r3, #1
 8007a16:	428c      	cmp	r4, r1
 8007a18:	d1f6      	bne.n	8007a08 <memchr+0x8>
 8007a1a:	bd10      	pop	{r4, pc}

08007a1c <memcpy>:
 8007a1c:	440a      	add	r2, r1
 8007a1e:	4291      	cmp	r1, r2
 8007a20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a24:	d100      	bne.n	8007a28 <memcpy+0xc>
 8007a26:	4770      	bx	lr
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a2e:	4291      	cmp	r1, r2
 8007a30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a34:	d1f9      	bne.n	8007a2a <memcpy+0xe>
 8007a36:	bd10      	pop	{r4, pc}

08007a38 <_realloc_r>:
 8007a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a3c:	4680      	mov	r8, r0
 8007a3e:	4614      	mov	r4, r2
 8007a40:	460e      	mov	r6, r1
 8007a42:	b921      	cbnz	r1, 8007a4e <_realloc_r+0x16>
 8007a44:	4611      	mov	r1, r2
 8007a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4a:	f7ff bc37 	b.w	80072bc <_malloc_r>
 8007a4e:	b92a      	cbnz	r2, 8007a5c <_realloc_r+0x24>
 8007a50:	f7ff fbcc 	bl	80071ec <_free_r>
 8007a54:	4625      	mov	r5, r4
 8007a56:	4628      	mov	r0, r5
 8007a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a5c:	f000 f81b 	bl	8007a96 <_malloc_usable_size_r>
 8007a60:	4284      	cmp	r4, r0
 8007a62:	4607      	mov	r7, r0
 8007a64:	d802      	bhi.n	8007a6c <_realloc_r+0x34>
 8007a66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a6a:	d812      	bhi.n	8007a92 <_realloc_r+0x5a>
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	4640      	mov	r0, r8
 8007a70:	f7ff fc24 	bl	80072bc <_malloc_r>
 8007a74:	4605      	mov	r5, r0
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d0ed      	beq.n	8007a56 <_realloc_r+0x1e>
 8007a7a:	42bc      	cmp	r4, r7
 8007a7c:	4622      	mov	r2, r4
 8007a7e:	4631      	mov	r1, r6
 8007a80:	bf28      	it	cs
 8007a82:	463a      	movcs	r2, r7
 8007a84:	f7ff ffca 	bl	8007a1c <memcpy>
 8007a88:	4631      	mov	r1, r6
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	f7ff fbae 	bl	80071ec <_free_r>
 8007a90:	e7e1      	b.n	8007a56 <_realloc_r+0x1e>
 8007a92:	4635      	mov	r5, r6
 8007a94:	e7df      	b.n	8007a56 <_realloc_r+0x1e>

08007a96 <_malloc_usable_size_r>:
 8007a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a9a:	1f18      	subs	r0, r3, #4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bfbc      	itt	lt
 8007aa0:	580b      	ldrlt	r3, [r1, r0]
 8007aa2:	18c0      	addlt	r0, r0, r3
 8007aa4:	4770      	bx	lr
	...

08007aa8 <_init>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	bf00      	nop
 8007aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aae:	bc08      	pop	{r3}
 8007ab0:	469e      	mov	lr, r3
 8007ab2:	4770      	bx	lr

08007ab4 <_fini>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	bf00      	nop
 8007ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aba:	bc08      	pop	{r3}
 8007abc:	469e      	mov	lr, r3
 8007abe:	4770      	bx	lr
